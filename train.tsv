Description	Code
26. Python Program to Convert Decimal to Octal	"dec = 344


print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")
"
100 Write a Python class to convert an integer to a roman numeral.	"class Solution:
<TAB>def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
        ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
        ]
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num
"
write a python function that returns binary representation of given number	"

def to_binary(n):
<TAB>return bin(n)
"
write a Python program to combine two dictionary by adding values for common keys	"dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}
for key in dict2:
<TAB>if key in dict1:
        dict2[key] = dict2[key] + dict1[key]
<TAB>else:
        pass
"
54 write a pythom program to find Maximum value from dictionary whose key is present in the list	"

test_dict = {""Gfg"": 4, ""is"": 5, ""best"": 9,
             ""for"": 11, ""geeks"": 3}

print(""The original dictionary is : "" + str(test_dict))
test_list = [""Gfg"", ""best"", ""geeks""]
c = sorted(test_dict.values(), reverse=True)
for key, value in test_dict.items():
<TAB>if key in test_list and value in c[0:2]:
        print(key)
"
modify the 1st element of the 2nd sublist	"my_list1[1][0] = 'a'
print(""after my_list1[1][0] = 'a' ---> "", my_list1)
"
write a python function to find URLs in a string	"

import re


def Find(string):
<TAB>regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
<TAB>url = re.findall(regex, string)
<TAB>return [x[0] for x in url]
"
write a python program to print binary ones complement on a variable	"a = 60
ones_complement_a = ~a
print(ones_complement_a)
"
33 write a program that shows how child class can access the init method of the parent class using super	"

class A:
<TAB>def __init__(self):
        print(""My name is GYOBU MASATAKA ONIWA!"")


class B(A):
<TAB>def __init__(self):
        super(B, self).__init__()
        print(""as I breath, you WILL not pass the castle gates!"")


tmp = B()
"
write a python function get the maximum number in passed list	"

def max_check(x):
<TAB>max_val = x[0]
<TAB>for check in x:
        if check > max_val:
            max_val = check
<TAB>return max_val


print(f'{max_check([2,4,5,7,98])}')
"
write a program to print even length words in a string	"

str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:
<TAB>if len(word) % 2 == 0:
        print(word)
"
Check if the key exists or not in JSON	"import json


studentJson = """"""{
   ""id"": 1,
   ""name"": ""john wick"",
   ""class"": 8,
   ""percentage"": 75,
   ""email"": ""jhon@pynative.com""
}""""""


print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
<TAB>print(""Key exist in JSON data"")
<TAB>print(student[""name""], ""marks is: "", student[""percentage""])
else:
<TAB>print(""Key doesn't exist in JSON data"")
"
write a python function to decapitalize the first letter of user provided string.	"

def decapitalize(s, upper_rest=False):
<TAB>return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])
"
write a python function that takes a list of numbers and calculate square of each number and return it in a list	"def square_num(mynumbers):
<TAB>return list(map(lambda num: num**2, mynumbers))


square_num([1, 2, 3])
"
Shuffle a list randomly	"import random
list = [2, 5, 8, 9, 12]
random.shuffle(list)
print(""Printing shuffled list "", list)
"
Write a python program to print positive Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

<TAB>if num >= 0:
        print(num, end="" "")
"
Write a program that calculates and prints the value according to the given formula: Q = Square root of [(2 * C * D)/H]	"import math
c = 50
h = 30
value = []
items = [x for x in raw_input().split(',')]
for d in items:
<TAB>value.append(str(int(round(math.sqrt(2 * c * float(d) / h)))))
print(','.join(value))
"
Write a function to return the profit or loss based on cost price and selling price	"def find_profit_or_loss(cp, sp):
<TAB>if cp > sp:
        return 'loss', cp - sp
<TAB>elif cp < sp:
        return 'profit', sp - cp
<TAB>else:
        return 'no profit or loss', 0
"
write Python program to illustrate  enumerate function in loops	"l1 = [""eat"", ""sleep"", ""repeat""]


for count, ele in enumerate(l1, 100):
<TAB>print(count, ele)
"
Write a Python program to print the length of a set.	"
seta = set([5, 10, 3, 15, 2, 20])
print(len(seta))
"
Write a Python function to get OS name & platform using os & platform library	"import os
import platform


def get_info():
<TAB>return f'OS: {os.name}\n Platform: {platform.system}'
"
write a python generator function for generating Fibonacci Numbers	"def fib(limit):
<TAB>a, b = 0, 1
<TAB>while a < limit:
        yield a
        a, b = b, a + b
"
21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate	"def is_camel_case(s):
<TAB>return s != s.lower() and s != s.upper() and ""_"" not in s
"
"75 write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
<TAB>for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
write a python function to return the sequence elements n times	"def ncycles(iterable, n):
<TAB>from itertools import chain, repeat
<TAB>return chain.from_iterable(repeat(tuple(iterable), n))
"
Write a python program to print all pair combinations of 2 tuples.	"

test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print(""The filtered tuple : "" + str(res))
"
Write a function to convert time from 12 hour to 24 hour format	"def convert24(str1):
<TAB>if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
<TAB>elif str1[-2:] == ""AM"":
        return str1[:-2]

<TAB>elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
<TAB>else:
        return str(int(str1[:2]) + 12) + str1[2:8]


print(convert24(""08:05:45 PM""))
"
write a python function thats accepts a list and returns most frequent element that appears in a list	"

def most_frequent(list):
<TAB>return max(set(list), key=list.count)
"
86 write a python program to raise elements of tuple as power to another tuple and print it	"

test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 6, 7, 5)
s = tuple()
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

for i in range(0, len(test_tup1)):
<TAB>s += (test_tup1[i] ** test_tup2[i],)
print(s)
"
Write a python program to print the smallest number in a list	"

list1 = [10, 20, 1, 45, 99]

print(""Smallest element is:"", min(list1))
"
37 Write a python program to calculate the LCM and HCF of two given numbers	"def hcf(x1, x2):
<TAB>if x1 == 0:
        return x2
<TAB>else:
        return hcf(x2 % x1, x1)


def lcm_hcf(x1, x2):
<TAB>h_c_f = hcf(x1, x2)
<TAB>lcm = x1 * x2 / h_c_f
<TAB>return lcm, h_c_f


l, h = lcm_hcf(18, 12)


print(f""LCM : {l}, HCF: {h}"")
"
write Python code to convert radian to degree	"def Convert(radian):
<TAB>pi = 3.14159
<TAB>degree = radian * (180 / pi)
<TAB>return degree


radian = 5
print(""degree ="", (Convert(radian)))
"
Write a function that will provide the ascii value of a character	"

def charToASCII(chr):
<TAB>return f'ASCII value of {chr} is: {ord(chr)}'
"
write  a python program to find Cumulative sum of a list	"list = [10, 20, 30, 40, 50]
new_list = []
j = 0
for i in range(0, len(list)):
<TAB>j += list[i]
<TAB>new_list.append(j)

print(new_list)
"
89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?	"def solve(numheads, numlegs):
<TAB>ns = ""No solutions!""
<TAB>for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
<TAB>return ns, ns
"
Insert a number at the beginning of the queue	"q = [1, 2, 3, 4]
q.insert(0, 5)
print(f""Revised List:{q}"")
"
write a program to insert elemnet in the list after every nth element	"

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
i = 3
while i < len(letters):
<TAB>letters.insert(i, 'x')
<TAB>i += 4


letters
"
write a function that return space count	"
def count_space(str1):

<TAB>count = 0

<TAB>for i in range(0, len(str1)):

        if str1[i] == "" "":
            count += 1

<TAB>return count
"
Remove empty strings from the list of strings	"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)
"
write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key	"cube_dict = {}
for i in range(1, 11):
<TAB>cube_dict[i] = i ** 3
"
Write a Python program to find the total number of uppercase and lowercase letters in a given string	"str1 = 'TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0, 0
for c in str1:
<TAB>if c >= 'A' and c <= 'Z':
        no_of_ucase += 1
<TAB>if c >= 'a' and c <= 'z':
        no_of_lcase += 1


print(no_of_lcase)
print(no_of_ucase)
"
write a python function to find the volume of tetraheadron	"
def vol_tetra(side):
<TAB>volume = (side ** 3 / (6 * 1.414))
<TAB>return round(volume, 2)
"
write Python function to Count the Frequency of Words Appearing in a String Using a Dictionary	"def countword(test_string):
<TAB>l = []
<TAB>l = test_string.split()
<TAB>wordfreq = [l.count(p) for p in l]
<TAB>return(dict(zip(l, wordfreq)))
"
Write a function to return the area of a rhombus with diagonals q1 and q2	"def cal_area_rhombus(q1, q2):
<TAB>return (q1 * q2) / 2
"
write a python function that returns the gcd of two numbers	"def gcd(x, y):
<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x

<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i

<TAB>return gcd
"
write a python program to check two dictionary are equal or not	"

d1 = {""john"": 40, ""peter"": 45}
d2 = {""john"": 466, ""peter"": 45}
d1 == d2
"
write a python function that removes all the vowels from the given list of strings and return the list	"def myfunc(listitems):
<TAB>final = []
<TAB>for strchar in listitems:
        for letters in strchar:
            if letters in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):
                strchar = strchar.replace(letters, """")
        final.append(strchar)
<TAB>return final


myfunc([""rohan"", ""END""])
"
write a python program to iterate through the list and create a dictionary with integers as keys	"list_ = [1, 2, 3, 4]
dict_comp = {idx: value for idx, value in enumerate(list_)}
print(f""{dict_comp}"")
"
write a python function to convert degree fahrenheit to degree celsius	"def celsius(fahrenheit):
<TAB>return (fahrenheit - 32) / 1.8
"
Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.	"def print_dict_keys_val_1():
<TAB>d = dict()
<TAB>d[1] = 1
<TAB>d[2] = 2**2
<TAB>d[3] = 3**2
<TAB>print(d)
"
Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2.	"def substring_copy(str, n):
<TAB>flen = 2
<TAB>if flen > len(str):
        flen = len(str)
<TAB>substr = str[:flen]

<TAB>result = """"
<TAB>for i in range(n):
        result = result + substr
<TAB>return result


print(substring_copy('abcdef', 2))
print(substring_copy('p', 3))
"
7 add a value to the start of a list python	"var = 7
array = [1, 2, 3, 4, 5, 6]
array.insert(0, var)
"
write a program to remove even numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_even_nums = [i for i in nums if i % 2 == 1]
"
write a python function to bubblesort an array	"
def bubbleSort(arr):
<TAB>n = len(arr)

<TAB>for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
"
Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).	"

l = []
for i in range(2000, 3201):
<TAB>if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))


print(','.join(l))
"
Write a function to Check whether following json is valid or invalid	"import json


def validateJSON(jsonData):
<TAB>try:
        json.loads(jsonData)
<TAB>except ValueError as err:
        return False
<TAB>return True
"
41 write a program to find area of a triangle	"

a = float(input('Enter first side: '))
b = float(input('Enter second side: '))
c = float(input('Enter third side: '))

s = (a + b + c) / 2

area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
print('The area of the triangle is %0.2f' % area)
"
Write a Python function to strip vowels from a string	"

def vowel_stripping(string):

<TAB>return """".join([x for x in string if x not in ('a', 'e', 'i', 'o', 'u')])
"
write a python program to sort tuple values	"

a = (2, 3, 1, 5)
tuple_sorted = sorted(a)
print(tuple(tuple_sorted))
"
write a python program to iterate through a string using for loop	"h_letters = []


for letter in 'human':
<TAB>h_letters.append(letter)


print(f""{h_letters}"")
"
Write a Python function to return Syslvester's Sequence	"def syslvester_seq(n):
<TAB>if n == 1:
        return 2
<TAB>if n > 1:
        return syslvester_seq(n - 1)**2 - syslvester_seq(n - 1) + 1
"
write a python program which takes input a list and prints the mean of elements within the list	"s1 = eval(input(""Enter list ""))
mean = sum(s1) / len(s1)
print(""Mean of sample is : "" + str(mean))
"
Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.	"def printDict():
<TAB>d = dict()
<TAB>for i in range(1, 21):
        d[i] = i**2
<TAB>for k in d.keys():
        print(k)
"
28 to get a random element from an array in python	"import random
list_ = [1, 2, 3, 4]
random.choice(list_)
"
write a python function to find the L.C.M. of two input number	"

def compute_lcm(x, y):

<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y

<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

<TAB>return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
write a python program that takes two integers as input and check if the first number is divisible by other	"

num1 = int(input(""Enter first number :""))
num2 = int(input(""Enter second number :""))
remainder = num1 % num2
if remainder == 0:
<TAB>print(num1, "" is divisible by "", num2)
else:
<TAB>print(num1, "" is not divisible by "", num2)
"
Write a Python function that Given a list of numbers, return True if first and last number of a list is same	"def isFirst_And_Last_Same(numberList):
<TAB>firstElement = numberList[0]
<TAB>lastElement = numberList[-1]
<TAB>if (firstElement == lastElement):
        return True
<TAB>else:
        return False
"
write a python program to add and square a range of number	"x = [i**+1 for i in range(3)]
print(x)
"
write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.	"test_dict1 = {'Gfg': 1, 'is': 2, 'best': 3}
test_dict2 = {'Gfg': 4, 'is': 10, 'for': 7, 'geeks': 12}
prio_dict = {1: test_dict2, 2: test_dict1}
res = prio_dict[2].copy()
for key, val in prio_dict[1].items():
<TAB>res[key] = val
print(""The dictionary after combination : "" + str(res))
"
Deepcopy in python	"

list1 = [[1], [2]]
list2 = list1.copy()
list3 = deepcopy(list1)
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\n'
      .format(id(list1), id(list2), id(list3)))
"
11. Python Program to Check if a Number is Odd or Even	"num = int(input(""Enter a number: ""))
if (num % 2) == 0:
<TAB>print(""{0} is Even"".format(num))
else:
<TAB>print(""{0} is Odd"".format(num))
"
Write a function that returns a dictionary sorted descending by its keys	"def descending_dict_keysort(d: dict):
<TAB>return {key: val for key, val in sorted(d.items(), reverse=True, key=lambda ele: ele[0])}
"
55 Write a Python function to check if a number is a power of a given base.	"import math


def isPower(n, base):
<TAB>if base == 1 and n != 1:
        return False
<TAB>if base == 1 and n == 1:
        return True
<TAB>if base == 0 and n != 1:
        return False
<TAB>power = int(math.log(n, base) + 0.5)
<TAB>return base ** power == n
"
list of allowed users	"user1 = ""Ram""
user2 = ""Mohan""
"
Write a python program to Implement Binary Search without Recursion and print the key element if found	"

def binary_search(alist, key):
<TAB>
<TAB>start = 0
<TAB>end = len(alist)
<TAB>while start < end:
        mid = (start + end) // 2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
<TAB>return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search(alist, key)
if index < 0:
<TAB>print(f'{key} was not found.')
else:
<TAB>print(f'{key} was found at index {index}.')
"
Write a python program to remove even numbers from a list. Print the final list.	"
list1 = [11, 5, 17, 18, 23, 50]

for ele in list1:
<TAB>if ele % 2 == 0:
        list1.remove(ele)

print(""New list after removing all even numbers: "", list1)
"
Write a python program to Implement Selection sort and print the sorted list for the below list	"

def selection_sort(alist):
<TAB>for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]


alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
23. Python Program To Display Powers of 2 Using Anonymous Function	"
terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))
print(""The total terms are:"", terms)
for i in range(terms):
<TAB>print(""2 raised to power"", i, ""is"", result[i])
"
48 write a python Program to multiply two matrices and print the result	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
<TAB>print(r)
"
Write a Python function to check all elements of a list are the same or not	"def check_equal(a):
<TAB>return a[1:] == a[:-1]
"
"Write a python program to generate and print all sentences where subject is in[""Americans"", ""Indians""] and verb is in [""Play"", ""watch""] and the object is in [""Baseball"",""cricket""]"	"

subjects = [""Americans"", ""Indians""]
verbs = [""play"", ""watch""]
objects = [""Baseball"", ""Cricket""]
sentence_list = [subject + "" "" + verb + "" "" + object +
                 ""."" for subject in subjects for verb in verbs for object in objects]
for sentence in sentence_list:
<TAB>print(sentence)
"
Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)	"def get_slope(x1, y1, x2, y2):
<TAB>if (x1 == x2):
        return ValueError
<TAB>return -((y2 - y1) / (x2 - x1))
"
Write a lambda function to that gives the number of digits in a number	"

def dig_cnt(a): return len(str(a))
"
Write a python function to get the volume of a rectangular prism with side as length, width and height as input	"def rec_prism_volume(length, width, height):
<TAB>volume = length * width * height
<TAB>return volume
"
Define a function that can convert a integer into a string and print it in console.	"def convert_to_str(n):
<TAB>print(str(n))
"
write a function to calculate speed given distance covered and time taken	"

def calspeed(dist, time):
<TAB>return dist / time
"
Write a Python program to find the first repeated character in a given string	"def first_repeated_char(str1):
<TAB>for index, c in enumerate(str1):
        if str1[:index + 1].count(c) > 1:
            return c
<TAB>return ""None""
"
24. Python Program to Find Numbers Divisible by Another Number	"my_list = [12, 65, 54, 39, 102, 339, 221, ]

result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"", result)
"
Write a python program to find and print volume of a sphere for which diameter d is given	"import math


diameter = 12.
radius = diameter / 2.
"
97 write a python program to Join tuple elements in a list and print it	"
test_list = [('geeks', 'for', 'geeks'),
             ('computer', 'science', 'portal')]

print(""The original list is : "" + str(test_list))
l = []

for i in test_list:
<TAB>s = ''
<TAB>for j in i:
        s += j + ' '
<TAB>l.append(s)
print(l)
"
Write a Python function which returns the Modulo of the two given numbers.	"def mod(m, n):
<TAB>return m % n
"
write a python function to sort each item in a data structure on one of the keys	"def sort_list_with_key():
<TAB>animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
<TAB>print(sorted(animals, key=lambda animal: -animal['age']))
"
19. python program to compare strings using interning	"import sys


def compare_using_interning(n):
<TAB>a = sys.intern('a long string that is not intered' * 200)
<TAB>b = sys.intern('a long string that is not intered' * 200)
<TAB>for i in range(n):
        if a is b:
            pass
"
Remove special symbols/Punctuation from a given string	"import string


str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)
"
reverse a number in Python	"number = 1367891
revs_number = 0
while (number > 0):
<TAB>remainder = number % 10
<TAB>revs_number = (revs_number * 10) + remainder
<TAB>number = number // 10
print(""The reverse number is : {}"".format(revs_number))
"
58 Write a Python function to find the single element in a list where every element appears three times except for one.	"def single_number(arr):
<TAB>ones, twos = 0, 0
<TAB>for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
<TAB>assert twos == 0
<TAB>return ones
"
"Write a program which accepts a string as input to print ""Yes"" if the string is ""yes"" or ""YES"" or ""Yes"", otherwise print ""No""."	"s = input()
if s == ""yes"" or s == ""YES"" or s == ""Yes"":
<TAB>print(""Yes"")
else:
<TAB>print(""No"")
"
write a function to calculate the apothem of polygon given the number of edges, circumradius	"import math


def apothem_of_polygon(number_of_edges, circumradius):
<TAB>return circumradius * math.cos(180 / number_of_edges)
"
write a python program to swap two numbers and print them	"

num1 = 2
num2 = 4


num1, num2 = num2, num1


print(num1, num2)
"
write a python function to get the most common word in text	"def most_common(text):
<TAB>c = Counter(text)
<TAB>return c.most_common(1)
"
Write a function that returns lowercase string	"def str_lowercase(s: str):
<TAB>return s.lower()
"
Generate 3 random integers between 100 and 999 which is divisible by 5	"import random


print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
<TAB>print(random.randrange(100, 999, 5), end=', ')
"
Write a Python function to Find the Intersection of Two Lists	"def intersection(a, b):
<TAB>return list(set(a) & set(b))
"
Write a program to get 3rd and last character of a given string	"

string = ""Good Night""
print(""\nSlicing characters between ""
      + ""3rd and last character: "")
print(string[3:-1])
"
60 write a  program to sort words in alphabetic order	"

my_str = input(""Enter a string: "")
"
95  write a program to Split tuple into groups of n and print it	"

ini_tuple = (1, 2, 3, 4, 8, 12, 3, 34,
             67, 45, 1, 1, 43, 65, 9, 10)
n = 4
N = 0
s = tuple()
for i in range(0, len(ini_tuple) // n):
<TAB>t = tuple()
<TAB>for j in range(N, N + n):
        t += (ini_tuple[j],)
<TAB>N = N + n
<TAB>s += (t,)
print(s)
"
Usge of *args	"def a_func(*args):
<TAB>print('type of args:', type(args))
<TAB>print('args contents:', args)
<TAB>print('1st argument:', args[0])


a_func(0, 1, 'a', 'b', 'c')
"
With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half values in one line and the last half values in one line.	"tp = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tp1 = tp[:5]
tp2 = tp[5:]
print(tp1)
print(tp2)
"
93 write a python function to find One's compliment of a number	"

import math


def OnesComplement(num):
<TAB>bits = int(math.floor(math.log(num) / math.log(2)) + 1)
<TAB>return ((1 << bits) - 1) ^ num
"
47 write a python function to print lcm of n numbers python	"import math


def LCMofArray(a):
<TAB>lcm = a[0]
<TAB>for i in range(1, len(a)):
        lcm = lcm * a[i] // math.gcd(lcm, a[i])
<TAB>return lcm


arr1 = [1, 2, 3]
print(""LCM of arr1 elements:"", LCMofArray(arr1))
"
22 write a function that counts the sum of every element in the odd place in a list	"

from functools import reduce


def count_second(lst):
<TAB>return reduce(lambda x, y: x + y, lst[::2])
"
Write a program that accepts a sentence and calculate the number of letters and digits.	"s = input()
d = {""DIGITS"": 0, ""LETTERS"": 0}
for c in s:
<TAB>if c.isdigit():
        d[""DIGITS""] += 1
<TAB>elif c.isalpha():
        d[""LETTERS""] += 1
<TAB>else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])
"
write a program to find and print all words which are less than a given length in a string	"

str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5


res_str = []

text = str1.split("" "")

for x in text:

<TAB>if len(x) < str_len:
        res_str.append(x)


print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))
"
write a python function to return the base 10 logarithm of a number	"def get_natural_log_value(i):
<TAB>import math
<TAB>return(math.log10(i))
"
write a Python function to convert number to english	"

def num_to_eng(n):
<TAB>if n == 0:
        return 'zero'

<TAB>unit = ('', 'one', 'two', 'three', 'four',
            'five', 'six', 'seven', 'eight', 'nine')
<TAB>tens = ('', '', 'twenty', 'thirty', 'forty', 'fifty',
            'sixty', 'seventy', 'eighty', 'ninety')
<TAB>teen = ('ten', 'eleven', 'twelve', 'thirteen', 'fourteen',
            'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen')
<TAB>h, t, u = '', '', ''

<TAB>if n // 100:
        h = unit[n // 100] + ' hundred'
        n = n % 100

<TAB>if n >= 20:
        t = tens[n // 10]
        n = n % 10
<TAB>elif n >= 10:
        t = teen[n - 10]
        n = 0

<TAB>u = unit[n]

<TAB>return ' '.join(filter(None, [h, t, u]))


print(num_to_eng(115))
"
12  write a python function to return the third last element of an array	"

def return_last(arr):
<TAB>return arr[-3]
"
Write a function that returns a list sorted ascending	"def ascending_sort(l: list):
<TAB>sorted(l, reverse=False)
"
write a python program that adds the elements of a list to a set and prints the set	"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)
"
Write a Python program to modify the second item (33) of a list inside a following tuple to 333	"tuple1 = (11, [22, 33], 44, 55)
tuple1[1][1] = 333
print(tuple1)
"
write a python function that returns the input list sorted in descending order	"def sort_descending(list_to_be_sorted):
<TAB>return sorted(list_to_be_sorted, reverse=True)
"
Usage of global keyword	"x = 0


def in_func2():
<TAB>global x
<TAB>x = 1
<TAB>print('in_func2:', x)


in_func2()
print('global:', x)
"
write a python program to calculate and print square root of numbers 0 to 100	"i = 0
while i <= 100:
<TAB>print(i, ""\t\t"", i**0.5)
<TAB>i = i + 1
"
write a program to print 5 random numbers divisible by 4 between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 4 == 0], 5))
"
Write a Python Program to print a list of fibonacci series for a given no using class	"

class Fib:
<TAB>def __init__(self):
        self.cache = {1: 1, 2: 1}

<TAB>def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n - 1) + self.fib(n - 2)
        return self.cache[n]
"
Define a custom exception class which takes a string message as attribute.	"class MyError(Exception):
<TAB>def __init__(self, msg):
        self.msg = msg
"
By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
Write a python function to Count the Number of Lines in a Text File	"def check_lines():
<TAB>fname = input(""file name: "")
<TAB>num_lines = 0
<TAB>with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
<TAB>print(""Number of lines = "", num_lines)
"
Write a Python program to convert the index of a series into a column of a dataframe	"import pandas as pd
import numpy as np
mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))
ser = pd.Series(mydict)
df = ser.to_frame().reset_index()
print(df.head())
"
write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.	"def get_ordered_combinations_with_replacement(string, k):
<TAB>[print(''.join(x))
     for x in combinations_with_replacement(sorted(string), int(k))]
"
42 function to print the India Time	"def get_India_time():
<TAB>import datetime
<TAB>import pytz
<TAB>print(datetime.datetime.now(pytz.timezone('Asia/kolkata')))
"
write a python program to filter a list and return words with alphabets only and print it	"

list = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']
result = [item for item in list if item.isalpha()]
print(result)
"
Define a class, which has a class parameter and have a same instance parameter.	"class Person:
<TAB>name = ""Person""

<TAB>def __init__(self, name=None):
        self.name = name
"
91 write a python program to concatenate tuple and print it	"
test_tup1 = (1, 3, 5)
test_tup2 = (4, 6)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
c = test_tup1 + test_tup2
print(c)
"
Write a Python function to check if all items in the following tuple are the same	"def check_tuple_same(sampleTuple):
<TAB>return all(i == sampleTuple[0] for i in sampleTuple)
"
write a program Creating a Dictionary with each item as a Pair	"Dict = dict([(1, 'Geeks'), (2, 'For')])
print(""\nDictionary with each item as a pair: "")
print(Dict)
"
Write a function to return the total surface area of a cylinder	"def cal_cylinder_surf_area(height, radius):
<TAB>pi = 3.14
<TAB>return 2 * pi * radius**2 * +2 * pi * radius * height
"
write a python program to calculate the average	"

list1 = [1, 3, 4, 5]
average = (sum(list1)) / len(list1)
print(f""the average score is:  {average} "")
"
Write a function to return the total surface area of a cuboid of length l, bredth b and height h	"def cal_surface_area_cuboid(l, b, h):
<TAB>return 2 * (l * b + b * h + h * l)
"
Write a Python function to Find the Total Sum of a Nested List Using Recursion	"

def sum1(lst):
<TAB>total = 0
<TAB>for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
<TAB>return total
"
write a python program to add two binary numbers	"
a = ""1101""
b = ""100""
sum = bin(int(a, 2) + int(b, 2))
print(sum[2:])
"
48. python function for finding the derivative of exponent of a number	"def dexp(x):

<TAB>return math.exp(x)
"
Write a function to return day of a week, given the number	"

def give_day(n):
<TAB>day_dict = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday',
                4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}
<TAB>return day_dict[n]
"
write a python function to convert from Celcius to fahrenhiet	"

def cel_to_fah(celcius):
<TAB>return 9 * celcius / 5 + 32
"
write  Function to left rotate n by d bits	"def leftRotate(n, d):
<TAB>INT_BITS = 32
<TAB>return (n << d) | (n >> (INT_BITS - d))


n = 16
d = 2


print(""Left Rotation of"", n, ""by"", d, ""is"", end="" "")
print(leftRotate(n, d))
"
Write a Python program to add member in a set	"color_set = set()
color_set.add(""Red"")
print(color_set)
"
87 write a python program to Count the elements till first tuple and print it	"

test_tup = (1, 5, 7, (4, 6), 10)
print(""The original tuple : "" + str(test_tup))
count = 0
for i in test_tup:
<TAB>if isinstance(i, tuple):

        break
<TAB>count = count + 1
print(f'count of element till first tuple is {count}')
"
Write a Python function to compute compound interest	"def compound_interest(principle, rate, time):
<TAB>Amount = principle * (pow((1 + rate / 100), time))
<TAB>CI = Amount - principle
<TAB>return CI
"
Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.	"def sum_of_ints(s1, s2):
<TAB>print(int(s1) + int(s2))
"
Write a Python Program to Count and print Number of Lowercase Characters in a String	"

string = 'This is an Assignment'
count = 0
for i in string:
<TAB>if(i.islower()):
        count = count + 1
print(""The number of lowercase characters is:"")
print(count)
"
69 write a program to shuffle a deck of card	"

import itertools
import random


deck = list(itertools.product(range(1, 14), [
<TAB>'Spade', 'Heart', 'Diamond', 'Club']))
random.shuffle(deck)


print(""You got:"")
for i in range(5):
<TAB>print(deck[i][0], ""of"", deck[i][1])
"
Write a python function to call a user-input function with default exception handling and re-raise the exception again.	"def default_exception_simulator(user_func):
<TAB>try:
        if callable(user_func):
            user_func()
<TAB>except:
        print(""An exception occured"")
        raise
"
control that the user belongs to the list of allowed users	"if username == user1:
<TAB>print(""Access granted"")
elif username == user2:
<TAB>print(""Welcome to the system"")
else:
<TAB>print(""Access denied"")
"
43. Python Program to Transpose a Matrix using Nested List Comprehension	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]


for r in result:
<TAB>print(r)
"
Replacing a string with another string	"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")
"
write a python function to check if a user provided number is a perfect square.	"

def is_perfect_square(n):
<TAB>x = n // 2
<TAB>y = set([x])
<TAB>while x * x != n:
        x = (x + (n // x)) // 2
        if x in y:
            return False
        y.add(x)
<TAB>return True
"
3 write a program to find the largest number in a list	"list1 = [10, 20, 4, 45, 99]
list1.sort()
print(""Largest element is:"", list1[-1])
"
Write a program to take a string and print all the words and their frequencies	"string_words = '''This assignment is of 900 marks. Each example if 9 marks.
If your example is similar to someone else, then you score less.
The formula we will use is 9/(repeated example). That means if 9 people write same example,
then you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''
word_list = string_words.split()
word_freq = [word_list.count(n) for n in word_list]
print(""Pairs (Words and Frequencies:\n {}"".format(
<TAB>str(list(zip(word_list, word_freq)))))
"
Write a python program to implement Dequeue	"

class Dequeue:
<TAB>def __init__(self):
        self.items = []

<TAB>def is_empty(self):
        return self.items == []

<TAB>def append(self, data):
        self.items.append(data)

<TAB>def append_left(self, data):
        self.items.insert(0, data)

<TAB>def pop(self):
        return self.items.pop()

<TAB>def pop_left(self):
        return self.items.pop(0)


q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')

while True:
<TAB>do = input('What would you like to do? ').split()

<TAB>operation = do[0].strip().lower()
<TAB>if operation == 'append':
        q.append(int(do[1]))
<TAB>elif operation == 'appendleft':
        q.append_left(int(do[1]))
<TAB>elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
<TAB>elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
<TAB>elif operation == 'quit':
        break
"
Pick a random character from a given String	"import random


name = 'pynative'
char = random.choice(name)
print(""random char is "", char)
"
82 function to show how to use f string	"def f_string(msg: ""user message""):
<TAB>print(f'This is an f string with user paramter {msg}')
"
write a function to check if a upper case letter exists in a given string	"

def check_upper(str1):

<TAB>for char in str1:
        k = char.isupper()
        if k == True:
            return True
<TAB>if(k != 1):
        return False
"
Write a python program to print a list of tuples from given list having number and its cube in each tuple	"
list1 = [1, 2, 5, 6]

res = [(val, pow(val, 3)) for val in list1]

print(res)
"
Write a lambda function to to give character from it's ascii value	"

def ascii(a): return chr(a)
"
Please write a program which count and print the numbers of each character in a string input by console.	"dic = {}
s = input()
for s in s:
<TAB>dic[s] = dic.get(s, 0) + 1
print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))
"
Python program to execute a string containing Python code.	"mycode = 'print(""hello world"")'
code = """"""
def multiply(x,y):
    return x*y


print('Multiply of 2 and 3 is: ',multiply(2,3))
""""""
exec(mycode)
exec(code)
"
Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart	"def cal_electrostatic_force(q1, q2, d):
<TAB>k = 9 * (10**9)
<TAB>return (k * q1 * q2) / (d**2)
"
Shallow copy in python	"list1 = [1, 2]
list2 = list1
list3 = list1[:]
list4 = list1.copy()
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\nlist4: {}\n'
      .format(id(list1), id(list2), id(list3), id(list4)))
"
10 write a python function to remove duplicate from a list.	"def remove_duplicates(dup_list: list):
<TAB>print(list(set(dup_list)))
"
26 write a function to print other value with given base to int.	"def other_int(value, b):
<TAB>return int(value, b)
"
Write a python program to find and print sum of series with cubes of first n natural numbers	"

n = 10
sum = 0
for i in range(1, n + 1):
<TAB>sum += i**3


print(f""{sum}"")
"
67 Write a Python function to the push the first number to the end of a list.	"def move_last(num_list):
<TAB>a = [num_list[0] for i in range(num_list.count(num_list[0]))]
<TAB>x = [i for i in num_list if i != num_list[0]]
<TAB>x.extend(a)
<TAB>return(x)
"
62 write a program to concatenate Ranged Values in String list and print it	"

test_list = [""abGFGcs"", ""cdforef"", ""asalloi""]

i, j = 2, 5
r = ''
for z in test_list:
<TAB>r += z[i:j]
print(r)
"
12 python print last element of list	"mylist = [0, 1, 2]
print(myList[-1])
"
7 write a python function to return every nth number from a list	"

def every_nth_number(lst, n):
<TAB>return lst[::n]
"
write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension	"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}
"
Write a Python function that returns biggest character in a string	"

from functools import reduce


def biggest_char(string):
<TAB>
<TAB>def biggest_chr(x, y): return x if ord(x) > ord(y) else y
<TAB>return reduce(biggest_chr, string)
"
Write a Python program to convert Year/Month/Day to Day of Year.	"import datetime
today = datetime.datetime.now()
day_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1
print(day_of_year)
"
78 write a python program to decrement Dictionary value by K	"

test_dict = {'gfg': 1, 'is': 2, 'for': 4, 'CS': 5}
print(""The original dictionary : "" + str(test_dict))
K = 5
for key, value in test_dict.items():
<TAB>test_dict.update({key: value - K})
print(test_dict)
"
write a python program to find the factorial of a number provided by the user.	"num = int(input(""Enter a number: ""))


factorial = 1


if num < 0:
<TAB>print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
<TAB>print(""The factorial of 0 is 1"")
else:
<TAB>for i in range(1, num + 1):
        factorial = factorial * i
<TAB>print(""The factorial of"", num, ""is"", factorial)
"
74 write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle


li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
write a python program to check tuple are immutable	"a = (1, 2, 3)
try:
<TAB>a = a + 1
except Exception as e:
<TAB>print(e)
"
write a python function to return first n items of the iterable as a list	"def take(n, iterable):
<TAB>import itertools
<TAB>return list(itertools.islice(iterable, n))
"
Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area.	"class Rectangle(object):
<TAB>def __init__(self, l, w):
        self.length = l
        self.width = w

<TAB>def area(self):
        return self.length * self.width


aRectangle = Rectangle(2, 10)
print(aRectangle.area())
"
Write a Python function to reverse words in a string.	"def reverse_string_words(text):
<TAB>for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
"
Write a python program to reverse a string	"s = ""i like this program very much""
words = s.split(' ')
string = []
for word in words:
<TAB>string.insert(0, word)

print(""Reversed String:"")
print("" "".join(string))
"
94 write a program to remove matching tuples and print it	"

test_list1 = [('Early', 'morning'), ('is', 'good'), ('for', 'Health')]
test_list2 = [('Early', 'morning'), ('is', 'good')]


l = []
for i in range(0, len(test_list1)):
<TAB>for j in range(0, len(test_list2)):
        if test_list1[i] not in test_list2:
            l.append(test_list1[i])
            break
print(l)
"
Write a program to print bit wise OR of two numbers	"a = 60
b = 13


c = a | b
print(""OR"", c)
"
Python program to create all possible permutations from a given collection of distinct numbers.	"def permute(nums):
<TAB>result_perms = [[]]
<TAB>for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
<TAB>return result_perms


my_nums = [1, 2, 3]
print(""Original Collection: "", my_nums)
print(""Collection of distinct numbers:\n"", permute(my_nums))
"
Write a Python program to get the frequency of the elements in a list	"import collections
my_list = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]
print(""Original List : "", my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "", ctr)
"
write a python program to make use of maps	"

def square(number):
<TAB>return number ** 2


numbers = [1, 2, 3, 4, 5]


squared = map(square, numbers)


print(f'mapped numbers:{list(squared)}')
"
Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.	"
test_list = ['gfg', '   ', ' ', 'is', '            ', 'best']

print(""The original list is : "" + str(test_list))

res = [ele for ele in test_list if ele.strip()]

print(""List after filtering non-empty strings : "" + str(res))
"
59 write a python program to  remove digits from Dictionary String Values List	"

import re
test_dict = {'Gfg': [""G4G is Best 4"", ""4 ALL geeks""],
             'is': [""5 6 Good""],
             'best': [""Gfg Heaven"", ""for 7 CS""]}
print(""The original dictionary is : "" + str(test_dict))
res = {key: [re.sub('\d', '', ele) for ele in val]
       for key, val in test_dict.items()}
print(""The filtered dictionary : "" + str(res))
"
Write a Python program to print negative numbers in a list	"list1 = [11, -21, 0, 45, 66, -93]
for num in list1:
<TAB>if num < 0:
        print(num, end="" "")
"
Write a function to multiplies two lists element wise only if numbers are odd	"def adds_listoddelements(l1: list, l2: list):
<TAB>return [i * j for i, j in zip(l1, l2) if i * j % 2 == 1]
"
Write a Python Program to Convert Binary to Gray Code	"

def binary_to_gray(n):
<TAB>
<TAB>n = int(n, 2)
<TAB>n ^= (n >> 1)

<TAB>return bin(n)[2:]
"
write a python program to implement try catch code	"

try:
<TAB>s = {5, 6}
<TAB>s * 3
except Exception as e:
<TAB>print(e)
"
write a python program to replace blank space to 1	"a = re.compile('[0-9]')
z = a.findall('3 trees')
print(z)
"
write a function to check if a number is perfect square or not	"import math


def checksquare(num):
<TAB>x = int(math.sqrt(num))
<TAB>if x * x == num:
        return True
<TAB>return False
"
write a python function for Named Entity Recognizer using NLTK	"def ner_checker(texts):
<TAB>all_set = set()

<TAB>def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = "" "".join([word for word, tag in entity.leaves()])
                    
                    all_set.add(etext)

<TAB>nltk_ner_check(texts=texts)
<TAB>return all_set
"
8. Python Program to Convert Kilometers to Miles	"kilometers = 5.0
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
write a python program to add two hexadecimal numbers	"
a = ""B""
b = ""C""
sum = hex(int(a, 16) + int(b, 16))
print(sum[2:])
"
write a python program which iterates two lists of numbers simultaneously and adds corresponding values, print the result	"f_list = [1, 2, 3, 4]
s_list = [2, 3, 4, 5]
res = [f_n + s_n for f_n, s_n in zip(f_list, s_list)]
print(f""{res}"")
"
Write a function that finds a list is homogeneous	"

def homoList(li):
<TAB>res = True
<TAB>for i in li:
        if not isinstance(i, type(li[0])):
            res = False
            break
<TAB>return res
"
Write a Python program to swap two tuples	"tuple1 = (11, 22)
tuple2 = (99, 88)
tuple1, tuple2 = tuple2, tuple1
print(tuple2)
print(tuple1)
"
write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.	"def min_max():
<TAB>nums = [int(x) for x in input().strip().split(' ')]
<TAB>print(sum(nums) - max(nums), sum(nums) - min(nums))
"
"Please write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
<TAB>for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
write a Python program to demonstrate working of Convert Snake case to Pascal case	"

test_str = 'geeksforgeeks_is_best'
print(""The original string is : "" + test_str)


res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(""The String after changing case : "" + str(res))
"
Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date	"import pandas as pd
import numpy as np
ser = pd.Series([1, 10, 3, np.nan], index=pd.to_datetime(
<TAB>['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').ffill())
"
python program to add three list	"def add_list(num1, num2, num3):
<TAB>result = map(lambda x, y, z: x + y + z, num1, num2, num3)
<TAB>print(""\nNew list after adding above three lists:"")
<TAB>print(list(result))


nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
nums3 = [7, 8, 9]


add_list(nums1, nums2, nums3)
"
"write a python function that call another function and that function prints ""Inside B"""	"def A():
<TAB>B()


def B():
<TAB>print(""Inside B"")


A()
"
write a Python program to calculate surface area of Torus	"

r = 3
R = 7


Surface = (float)(4 * pi * pi * R * r)
print(""Surface: "", Surface)
"
Write a function to return the mean of numbers in a list	"def cal_mean(num_list: list) -> float:
<TAB>if num_list:
        return sum(num_list) / len(num_list)
<TAB>else:
        return None
"
91 Write a python function to round up a given decimal number	"

import math


def apply_floor(num):
<TAB>return math.floor(num)
"
write a python program to make use of modulo operator	"

print(f'modulo 15 % 4: Sol->{15 % 4}')
"
write a python program to make use of regular expression for matching	"

import re
print('Find the characters in the given string:', re.findall(
<TAB>r'[a-z]+', '123FOO456', flags=re.IGNORECASE))
"
Write a python function get unique value from tuple	"

def unique_values(v):
<TAB>return(list(set(v)))


t = [(1, 2), (3, 4), (4, 3), (1, 2)]


unique_values(t)
"
17 Write a python program to check if any string is empty in list and print true or False	"
list1 = ['the', 'sun', 'rises', '', 'the', 'east']
res = any(len(ele) == 0 for ele in list1)
print(""Is any string empty in list? : "" + str(res))
"
Write a python function to create an argument parser that takes inputs as program name and description of program and filename as inputs for variable length of args	"import argparse


def create_parser(prog_name, prog_description, arg_name):
<TAB>parser = argparse.ArgumentParser(
        prog=prog_name, description=prog_description)
<TAB>parser.add_argument(arg_name, nargs='+')
<TAB>
<TAB>return parser
"
write a Python function that returns the determinant of a given square matrix	"def determinant(A):
<TAB>if len(A) == 1:
        return A[0][0]
<TAB>elif len(A) == 2:
        return A[0][0] * A[1][1] - A[0][1] * A[1][0]
<TAB>else:
        s = 0
        for i in range(len(A)):
            B = [[A[row][col] for col in range(1, len(A))]
                 for row in range(len(A)) if row != i]
            s += ((-1)**i) * A[i][0] * determinant(B)
        return s


print(determinant([[3, 0], [2, 2]]))
"
Write a Python Program to print Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers	"lower = 1
upper = 100
for i in range(lower, upper + 1):
<TAB>if(i % 7 == 0 and i % 5 == 0):
        print(i)
"
44. Python Program to Multiply Two Matrices using Nested List Comprehension	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]


result = [[sum(a * b for a, b in zip(X_row, Y_col))
           for Y_col in zip(*Y)] for X_row in X]


for r in result:
<TAB>print(r)
"
Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius	"def temp_converter(temp, temp_given_in='f'):
<TAB>
<TAB>if temp_given_in.lower() == 'f':  
        return (temp - 32) * (5 / 9)
<TAB>else:  
        return (temp * 9 / 5) + 32
"
write a python program which takes an integer N as input and add the odd numbers up to N and print the result	"

N = int(input(""Enter Number : ""))
sum = 0
i = 1
while i <= N:
<TAB>sum = sum + i
<TAB>i = i + 2
print(sum)
"
Write a function that returns sine value of the input	"def sin(x: float) -> float:
<TAB>import math
<TAB>return math.sin(x)
"
write a python function to locate the rightmost value less than x	"def find_lt(a, x):
<TAB>from bisect import bisect_left
<TAB>i = bisect_left(a, x)
<TAB>if i:
        return a[i - 1]
<TAB>raise ValueError
"
Write a Python program to fill an intermittent time series so all missing dates show up with values of next non-missing date	"import pandas as pd
import numpy as np
ser = pd.Series([1, 10, 3, np.nan], index=pd.to_datetime(
<TAB>['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').bfill())
"
write a list comprehension in python to get a list of odd numbers when a range is given	"N = 20
number_list = [x for x in range(N) if x % 2 != 0]
print(f'List of Odd Numbers:', number_list)
"
Python program to print out all even numbers from a given numbers list in the same order and stop the printing if any numbers that come after 237 in the sequence.	"

numbers = [
<TAB>386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
<TAB>399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
<TAB>815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,
<TAB>958, 743, 527
]


for x in numbers:
<TAB>if x == 237:
        print(x)
        break
<TAB>elif x % 2 == 0:
        print(x)
"
write a python program to check if the list is empty	"

l = []
if not l:
<TAB>print(""List is empty"")
else:
<TAB>print(""List is not empty"")
"
"write a python program using ""all"" function"	"print(all([False, True, False, False]))
"
Python program to validate a Gregorian date	"

def check_date(m, d, y):
<TAB>import datetime
<TAB>try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
<TAB>except ValueError:
        return False


print(check_date(11, 11, 2002))
print(check_date('11', '11', '2002'))
print(check_date(13, 11, 2002))
"
remove punctuation from the string	"no_punct = """"
for char in my_str:
<TAB>if char not in punctuations:
        no_punct = no_punct + char
"
82 With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.	"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)
"
List are mutable	"a_list = []
print('ID:', id(a_list))
a_list += [1]
print('ID (+=):', id(a_list))
a_list = a_list + [2]
print('ID (list = list + ...):', id(a_list))
"
write a python function with generator for an infinite sequence	"def infinite_sequence():
<TAB>n = 0
<TAB>while True:
        yield n
        n += 1


import uuid
"
write a Python function to convert binary to Gray codeword	"def binary_to_gray(n):
<TAB>n = int(n, 2)
<TAB>n ^= (n >> 1)
<TAB>return bin(n)[2:]
"
write a python program to count the number of each vowels in a given text	"

vowels = 'aeiou'
text = 'Hello, have you tried our tutorial section yet?'
text = text.casefold()
count = {}.fromkeys(vowels, 0)
for char in text:
<TAB>if char in count:
        count[char] += 1
print(count)
"
Write a lambda function to add two numbers	"

def add(a, b): return a + b
"
Write a python function to merge two given lists into one	"

def merge_lists(l1, l2):
<TAB>return l1 + l2
"
Write a program to print the powers of 2 using anonymous function	"

terms = 10


result = list(map(lambda x: 2 ** x, range(terms)))


print(""The total terms are:"", terms)
for i in range(terms):
<TAB>print(""2 raised to power"", i, ""is"", result[i])
"
write a python program to explain the generator	"def f11(x):
<TAB>yield x + 1


g = f11(8)
print(next(g))
"
Usage of bool class	"print('isinstance(True, int):', isinstance(True, int))
"
99 write a  python function that accepts a string and reverses it	"

def reverse(st):
<TAB>return st[::-1]
"
Write a Python function to check whether a number is a power of another number or not	"def power_checker(a, b):
<TAB>import math
<TAB>s = math.log(a, b)
<TAB>p = round(s)
<TAB>if (b**p) == a:
        return f'{a} is the power of {b}.'
<TAB>else:
        return f'{a} is NOT the power of {b}.'
"
write a Python function To Calculate Volume OF Cylinder	"pi = 22 / 7


def volume(r, h):
<TAB>vol = pi * r * r * h
<TAB>return vol


r = 5
h = 8


print(""Volume Of Cylinder = "", volume(r, h))
"
we have to be careful if we use a variable name that occurs in the global scope, and we want to access it in the local function scope if we want to reuse this name:	"def my_func():
<TAB>print(var)
<TAB>var = 'locally changed'


var = 'global'
my_func()
"
Write a function that takes a base and a power and finds the power of the base using recursion.	"

def power(base, exp):
<TAB>if(exp == 1):
        return(base)
<TAB>if(exp != 1):
        return(base * power(base, exp - 1))


base = int(input(""Enter base: ""))
exp = int(input(""Enter exponential value: ""))
print(""Result:"", power(base, exp))
"
Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given	"def find_pressure_of_ideal_gas(volume: float, temp: float, n: float) -> float:
<TAB>r = 8.3145  
<TAB>return (n * r * temp) / volume
"
Write a python program print the the number of occurrences of 8 in a list	"def countX(lst, x):
<TAB>count = 0
<TAB>for ele in lst:
        if (ele == x):
            count = count + 1
<TAB>return count


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
write a python program to clone a list	"a = [1, 2, 3]
b = a[:]
"
write a python program to add two list using python zip method	"

l1 = [10, 20, 30]
l2 = [-10, -20, -30]
l3 = [x + y for x, y in zip(l1, l2)]
print('added two list:', l3)
"
Write a function that generates fibbonacci series	"def Fibonacci(n: int) -> int:
<TAB>if n == 1:
        fibonacci = 0
<TAB>elif n == 2:
        fibonacci = 1
<TAB>else:
        fibonacci = Fibonacci(n - 1) + Fibonacci(n - 2)
<TAB>return fibonacci
"
write a python function get the random number from the given range and square the number	"import random


min_value = 10
max_value = 20


def square(x):
<TAB>return x * x


def get_square_of_random_number(min_value, max_value):
<TAB>return square(random.randint(min_value, max_value))


get_square_of_random_number(min_value, max_value)
"
34. write a Python function to Find LCM and returb the value	"def compute_lcm(x, y):

<TAB>
<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y

<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

<TAB>return lcm
"
write a Function to convert the time from 12 hour format to 24 hour format	"def convert24(str1):

<TAB>if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]

<TAB>elif str1[-2:] == ""AM"":
        return str1[:-2]

<TAB>elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]

<TAB>else:

        return str(int(str1[:2]) + 12) + str1[2:8]
"
write a python function to check if a string is a palindrome or not	"def isPalindrome(s):
<TAB>return s == s[::-1]
"
write a python function to return mean of a list of numbers	"

def mean(list):
<TAB>sum = 0
<TAB>for num in list:
        sum += num
<TAB>return sum / len(list)
"
write a python program to flip a coin 100 times and print number of heads and tails	"import random
heads = 0
tails = 0
for i in range(100):
<TAB>if(random.choice([True, False])):
        heads += 1
<TAB>else:
        tails += 1
print(f'{heads} heads, {tails} tails')
"
43 Define a function which returns the current working directory	"import os


def get_cwd():
<TAB>return os.getcwd()
"
Write a Python function to return perrin's number	"def perrins_number(n):
<TAB>if n >= 0:
        if n == 0:
            return 3
        elif n == 1:
            return 0
        elif n == 2:
            return 2
        else:
            return perrins_number(n - 3) + perrins_number(n - 2)
"
23. python function to find the area of a circle	"def square_area(x):
<TAB>return x ** 2
"
Counting total alphanumeric in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
<TAB>char = str1[i]
<TAB>if(char.isalpha()):
        digitCount += 1
print('Number of alphanumeric: ', digitCount)
"
tuples are immutable	"tup = (1,)
tup[0] += 1
"
63 write a program to replace dictionary value from other dictionary and print it	"
test_dict = {""Gfg"": 5, ""is"": 8, ""Best"": 10, ""for"": 8, ""Geeks"": 9}

print(""The original dictionary is : "" + str(test_dict))

updict = {""Gfg"": 10, ""Best"": 17}
d = {}
for key in test_dict.keys():
<TAB>if key in updict:
        d.update({key: updict[key]})
<TAB>else:
        d.update({key: test_dict[key]})
print(d)
"
Write a Python program to Calculate the sum of the digits of a random three-digit number and print the result.	"

import random


n = random() * 900 + 100
n = int(n)
print(n)


a = n // 100
b = (n // 10) % 10
c = n % 10


print(a + b + c)
"
write a function to multiply all the numbers in a list	"def multiply_all(a_list):
<TAB>product = 1
<TAB>for i in a_list:
        product *= i
<TAB>return product
"
27. Python Program to Convert Decimal to Hexadecimal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(hex(dec), ""in hexadecimal."")
"
4 add a string to each element of a list python	"my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))
"
30 program to count number of cpu cores available	"import os
os.cpu_count()
"
57 write a python function to implement the tanh activation function	"

import math


def tanh(x):
<TAB>return (math.exp(2 * x) - 1) / (math.exp(2 * x) + 1)
"
write a python function to convert a user provided date to iso representation	"

from datetime import datetime


def to_iso_date(d):
<TAB>return d.isoformat()
"
Python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.	"def sum_of_cubes(n):
<TAB>n -= 1
<TAB>total = 0
<TAB>while n > 0:
        total += n * n * n
        n -= 1
<TAB>return total


print(""Sum of cubes: "", sum_of_cubes(3))
"
Interning of string	"hello1 = 'Hello'
hello2 = 'Hell' + 'o'
hello3 = 'Hell'
hello3 = hello3 + 'o'
print('hello1 is hello2:', hello1 is hello2)
print('hello1 is hello3:', hello1 is hello3)
"
47. python function for finding the exponent of a number	"def exp(x):
<TAB>

<TAB>return math.exp(x)
"
Write a function to get nth element of the fibonacci series	"def fibonacci_nth(n):
<TAB>a = 0
<TAB>b = 1

<TAB>if n <= 0:
        print(""Incorrect input"")
<TAB>elif n == 1:
        return a
<TAB>elif n == 1:
        return 1
<TAB>else:
        for i in range(2, n):
            c = a + b
            a, b = b, c
        return b
"
84 write a program to design a dice throw function	"

import random


def dice():
<TAB>return random.choice([1, 2, 3, 4, 5, 6])
"
write a function to slice a tuple, given an input tuple and start, stop, step=1	"def slice_a_tuple(a_tuple, start, stop, step=1):
<TAB>return a_tuple[start:stop:step]
"
write a program to find a given character in a string and print its position	"a = ""Hello World""
x = a.find(""r"")
print(x)
"
write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.	"def mean_key_val_diff(input_dict):
<TAB>sum_diff = 0
<TAB>for key, val in input_dict.items():
        sum_diff += abs(len(val) - len(key))
<TAB>return sum_diff / len(input_dict)
"
write a python function to locate the leftmost value exactly equal to x	"def index(a, x):
<TAB>from bisect import bisect_left
<TAB>i = bisect_left(a, x)
<TAB>if i != len(a) and a[i] == x:
        return i
<TAB>raise ValueError
"
Write a python program to find and print the longest word in a sentence	"

string = ""python java c c++ javascript pascal php""


print(string)


words = string.split()


id_longest = 0


for i in range(1, len(words)):
<TAB>if len(words[id_longest]) < len(words[i]):
        id_longest = i


print(words[id_longest])
"
Count the number of spaces in a sring	"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")
"
74 function to show namedtuple is instance of tuple	"def show_ins_tup():
<TAB>from collections import namedtuple
<TAB>IplData = namedtuple(
        'IplData', 'match toss choice session1 session2 winner')
<TAB>match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')
<TAB>return isinstance(match1, tuple)
"
54 Write a python function that implements the ReLU function	"

def relu(arr):
<TAB>return [x if x > 0 else 0 for x in arr]
"
write a python function to convert a user provided string to camelcase	"

from re import sub


def camel(s):
<TAB>s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
<TAB>return ''.join([s[0].lower(), s[1:]])
"
Write a python program to Implement Bubble sort and print the sorted list for the below list	"

def bubble_sort(alist):
<TAB>for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return


alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
37. python function to find angle between hour hand and minute hand	"def calcAngle(hh, mm):

<TAB>
<TAB>
<TAB>
<TAB>hour_angle = 0.5 * (hh * 60 + mm)
<TAB>minute_angle = 6 * mm

<TAB>
<TAB>
<TAB>angle = abs(hour_angle - minute_angle)

<TAB>
<TAB>
<TAB>angle = min(360 - angle, angle)

<TAB>return angle
"
Python Program to Display the multiplication Table	"

num = 12
for i in range(1, 11):
<TAB>print(num, 'x', i, '=', num * i)
"
Write a function to return the area of a circle of raidus r	"def cal_area_circle(r):
<TAB>pi = 3.14
<TAB>return pi * r**2
"
Write a program to replace a string by a given string #in a sentence	"

string = 'This is beautiful picture'


string.replace('beautiful', 'good')
"
write a python program to print only digit or only apha charac in a given list	"l = [""good"", ""oh!"", ""excellent!"", ""#450""]
print([n for n in l if n.isalpha() or n.isdigit()])
"
write a python lambda function to get remainder when divisor and divident are given	"def remainder(Divident, Divisor): return Divident % Divisor


print(remainder(5, 2))
"
26 Write a program to split a string by custom length and print it	"
test_str = 'geeksforgeeks'
print(""The original string is : "" + str(test_str))
cus_lens = [5, 3, 2, 3]


res = []
strt = 0
for size in cus_lens:

<TAB>res.append(test_str[strt: strt + size])
<TAB>strt += size
print(""Strings after splitting : "" + str(res))
"
Create a list comprehension	"def listcompr(n=100000):
<TAB>my_list = [i for i in range(n) if i % 5 == 0]
<TAB>return my_list
"
Write a python program to print positive Tuples in List.	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]


print(""The original list is : "" + str(test_list))


res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]


print(""Positive elements Tuples : "" + str(res))
"
20 write program to find yesterday, today and tomorrow	"
from datetime import datetime, timedelta
presentday = datetime.now()
yesterday = presentday - timedelta(1)
tomorrow = presentday + timedelta(1)
print(""Yesterday = "", yesterday.strftime('%d-%m-%Y'))
print(""Today = "", presentday.strftime('%d-%m-%Y'))
print(""Tomorrow = "", tomorrow.strftime('%d-%m-%Y'))
"
write a python program to print if year is a leap year or not	"year = 2000
if (year % 4) == 0:
<TAB>if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
<TAB>else:
        print(""{0} is a leap year"".format(year))
else:
<TAB>print(""{0} is not a leap year"".format(year))
"
Write a program to print the sum of squares of first n natural numbers	"n = 21
sum_n = 0
for i in range(1, n + 1):
<TAB>sum_n += i**2
print(sum_n)
"
1. write a python program to add two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
write a python program that asks for user input and prints the given input	"a = input(""User Input"")
print(a)
"
71 write a python function to count the length of the string	"

def len_str(st):
<TAB>return len(st)
"
Write a program to reverse a number	"

n = int(input(""Enter number: ""))
rev = 0
while(n > 0):
<TAB>dig = n % 10
<TAB>rev = rev * 10 + dig
<TAB>n = n // 10
print(""Reverse of the number:"", rev)
"
write a Python program to Sum all the items in a dictionary	"

my_dict = {'data1': 100, 'data2': -54, 'data3': 247}
print(f'Sum all the items in a dictionary:{sum(my_dict.values())}')
"
Program to find the number if it is within 100 of 1000 or 2000	"def near_thousand(n):
<TAB>return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100)


print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))
print(near_thousand(2200))
"
write Python function to find the Length of the Longest One element in the list	"def findlongest(list):
<TAB>max1 = len(list[0])
<TAB>temp = list[0]
<TAB>for i in list:
        if(len(i) > max1):
            max1 = len(i)
            temp = i
<TAB>return temp
"
Write a python program to Count and print the Number of Words in a Text File	"

fname = input(""Enter file name: "")

num_words = 0

with open(fname, 'r') as f:
<TAB>for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)
"
write a python program to print a list in reverse	"a = [1, 2, 3]
print(a[::-1])
"
using eval() to get the required result	"res = eval(temp)

print(""The computed summation of products : "" + str(res))
"
write Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using loop + enumerate()	"

test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


print(""The original list is : "" + str(test_list))


res = []
for idx, sub in enumerate(test_list, start=0):
<TAB>if idx == 0:
        res.append(list(sub.keys()))
        res.append(list(sub.values()))
<TAB>else:
        res.append(list(sub.values()))


print(""The converted list : "" + str(res))
"
"write a python function to list unique elements, preserving order remembering only the element just seen."""	"def unique_justseen(iterable, key=None):
<TAB>import operator
<TAB>from itertools import groupby
<TAB>return map(next, map(operator.itemgetter(1), groupby(iterable, key)))
"
write a program to print length of a string	"

str1 = ""great way to learn!""
print(len(str1))
"
Write a python function to generate  Euclid Number Series(2, 3, 7, 31, 211, 2311, 30031)	"from math import sqrt
from itertools import count, islice


def is_prime(n):
<TAB>return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))


def euclid_numbers(n):
<TAB>product = 1
<TAB>if n > 3:
        for i in range(n):
            if is_prime(i):
                product = product * i
                yield product
"
write a program to convert given dictonary to list of list key value pairs	"

d = {'Food': 'Fish&Chips', '2012': 'Olympics', 'Capital': 'London'}
list_key_value = [[k, v] for k, v in d.items()]
print(f'lsit_key_value:{list_key_value}')
"
Write a python program to Implement Insertion sort and print the sorted list for the below list	"

def insertion_sort(alist):
<TAB>for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python program to replace all the negative values to zero and keep only positive values in the list	"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""{prices}"")
"
Write a Python program to compute the autocorrelations for first 10 lags of a numeric series	"import pandas as pd
import numpy as np
ser = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))
autocorrelations = [ser.autocorr(i).round(2) for i in range(11)]
print(autocorrelations[1:])
"
21. Python Program to Find Armstrong Number in an Interval	"lower = 100
upper = 2000


for num in range(lower, upper + 1):
<TAB>order = len(str(num))
<TAB>sum = 0
<TAB>temp = num
<TAB>while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10

<TAB>if num == sum:
        print(num)
"
Write a function that returns derivative of sine value of the input	"def derivative_sin(x: float) -> float:
<TAB>import math
<TAB>return math.cos(x)
"
write a python program to generate random float numbers in a specific numerical range.	"

import random
for x in range(6):
<TAB>print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')
"
Write a program to swap first and last elements in a list	"

my_list = [1, 2, 3, 4, 5, 6]
my_list[0], my_list[-1] = my_list[-1], my_list[0]
"
34 write a python function to convert a string  into xml	"import xml.etree.ElementTree as ET


root = ET.fromstring(country_data_as_string)
"
46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.	"import requests


def get_encoding(url):
<TAB>data = requests.get(url)
<TAB>return data.encoding
"
59 function to show boolean true / false is a number	"def bool_show(a=5):
<TAB>return False * a
"
By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
write a python program to split a string based on space	"strin = ""Hello how are you ?""
res = strin.split()
print(f""{res}"")
"
Merge two dictionaries in a single expression	"currentEmployee = {1: 'Scott', 2: ""Eric"", 3: ""Kelly""}
formerEmployee = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)
"
write a python program to merge two lists	"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)
"
Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.	"l = []
for i in range(2000, 3201):
<TAB>if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))
print(','.join(l))
"
19 capitalize first letter in python in list	"my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()
"
write a python program to transpose Matrix using Nested Loops and print the result	"transposed = []
matrix = [[1, 2, 3, 4], [4, 5, 6, 8]]


for i in range(len(matrix[0])):
<TAB>transposed_row = []

<TAB>for row in matrix:
        transposed_row.append(row[i])
<TAB>transposed.append(transposed_row)


print(f""{transposed}"")
"
write Python program to find key with Maximum value in Dictionary	"

Tv = {'BreakingBad': 100, 'GameOfThrones': 1292, 'TMKUC': 88}


Keymax = max(Tv, key=Tv.get)
print(Keymax)
"
local scope representation	"x = 0


def in_func():
<TAB>x = 1
<TAB>print('in_func:', x)
"
Write a Python function for Program to find area of a circle	"def findArea(r):
<TAB>PI = 3.142
<TAB>return PI * (r * r)
"
Write a python function Split a given file path into filename and parent directory	"def split_filename(input_file_name):
<TAB>if(isinstance(input_file_name, str) == False):
        raise TypeError
<TAB>tokens = input_file_name.split(""/"")
<TAB>return ""/"".join(tokens[:-1]), tokens[-1]
"
Write a program to reverse the key and item mapping	"

sample_dict = {1: 'Seeta', 2: 'Geeta', 3: 'Babita'}


print(""The original dictionary : "" + str(sample_dict))


sample_dict = {v: k for k, v in sample_dict.items()}


print(""Inverse mapped dictionary : "", str(sample_dict))
"
write a python program to expalin the use of f-string	"n = 3
m = 4
print(f""{n} times {m} is {n*m}"")
"
write  Function to Rotate  the matrix by 180 degree	"def rotateMatrix(mat):
<TAB>N = 3
<TAB>i = N - 1
<TAB>while(i >= 0):
        j = N - 1
        while(j >= 0):
            print(mat[i][j], end="" "")
            j = j - 1
        print()
        i = i - 1


mat = [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]
rotateMatrix(mat)
"
write a Python Program to print all the Divisors of an Integer	"n = 20
print(""The divisors of the number are:"")
for i in range(1, n + 1):
<TAB>if(n % i == 0):
        print(i)
"
34 write a program to generate a random number between two ranges	"

import random


def rand_range(low, high):
<TAB>return random.randrange(low, high)
"
Write a function to find the perimeter of a square	"

def square_perimeter(a):
<TAB>return 4 * a
"
Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squaredNumbers = map(lambda x: x**2, li)
print(squaredNumbers)
"
write a list comprehension for printing rows into columns and vv	"

def unpack(a, b, c, d):
<TAB>print(a + d)


x = [1, 2, 3, 4]
unpack(*x)
"
write a program that prints the number of unique keys in a list of dictionaries.	"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""},
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"": ""bar2""}]
unique_keys = []
for d in list_of_dicts:
<TAB>for key in d:
        if key not in unique_keys:
            unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")
"
96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.	"def smallest_multiple(n):
<TAB>if (n <= 2):
        return n
<TAB>i = n * 2
<TAB>factors = [number for number in range(n, 1, -1) if number * 2 > n]
<TAB>print(factors)

<TAB>while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
"
Python function to find a distinct pair of numbers whose product is odd from a sequence of integer values.	"def odd_product(nums):
<TAB>for i in range(len(nums)):
        for j in range(len(nums)):
            if i != j:
                product = nums[i] * nums[j]
                if product & 1:
                    return True
                    return False


dt1 = [2, 4, 6, 8]
dt2 = [1, 6, 4, 7, 8]
print(dt1, odd_product(dt1))
print(dt2, odd_product(dt2))
"
write a function to check if a lower case letter exists in a given string	"

def check_lower(str1):

<TAB>for char in str1:
        k = char.islower()
        if k == True:
            return True
<TAB>if(k != 1):
        return False
"
Write a python program to print a list after removing elements from index 1 to 4	"

list1 = [11, 5, 17, 18, 23, 50]

del list1[1:5]

print(*list1)
"
write a python program to remove punctuations in a string	"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
string = ''.join(e for e in d if e not in punctuations)
"
write a python function that takes input a string and removes duplicates from the same	"foo = input(""Enter String : "")
print(""Duplicates Removed"", """".join(set(foo)))
"
Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension	"

l_range = 2
u_range = 5
a = [(x, x**2) for x in range(l_range, u_range + 1)]
"
write a Python function to find the Area of Icosahedron	"

def findArea(a):

<TAB>area = 5 * 3 ** 0.5 * a * a
<TAB>return area


a = 5
print(""Area: "", findArea(a))
"
Write a function that returns the exponential value of the input	"def exp(x) -> float:
<TAB>import math
<TAB>return math.exp(x)
"
write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate()	"

test_list = [{""Gfg"": 3, 4: 9}, {""is"": 8, ""Good"": 2}, {""Best"": 10, ""CS"": 1}]


print(""The original list : "" + str(test_list))


res = dict()
for idx, val in enumerate(test_list):
<TAB>res[idx] = val


print(""The constructed dictionary : "" + str(res))
"
write a Python function to convert Gray code to binary	"def gray_to_binary(n):
<TAB>n = int(n, 2)  
<TAB>mask = n
<TAB>while mask != 0:
        mask >>= 1
        n ^= mask
<TAB>return bin(n)[2:]
"
write a python program to print binary right shift on a variable	"a = 60
binary_right_shift = a >> 2
print(binary_right_shift)
"
24. python program for the sum of first n numbers.	"def sum_n_num(n):
<TAB>return n * (n + 1) / 2
"
Write a python program to accept a number n and calculate n+nn+nn	"

n = int(input(""Enter a number n: ""))
temp = str(n)
t1 = temp + temp
t2 = temp + temp + temp
comp = n + int(t1) + int(t2)
print(""The value is:"", comp)
"
write a program to remove all duplicate characters from a string	"

str1 = ""what a great day!""
print("""".join(set(str1)))
"
Write a python program to find and print if a number given is disarium or not	"

num = 135
num_len = len(str(num))
n = num
sum = 0
exp = num_len
while n != 0:
<TAB>i = int(n % 10)
<TAB>n = int(n / 10)
<TAB>sum += i ** exp
<TAB>exp -= 1
if sum == num:
<TAB>print(""disarium"")
else:
<TAB>print(""not disarium"")
"
6 write a python function that concatenates two stings	"

def concat(s1, s2):
<TAB>return s1 + s2
"
8 print into lowersase an uppercase sentence in python	"s = ""Kilometer""
print(s.lower())
"
Define a function that can accept two strings as input and concatenate them and then print it in console.	"def printValue(s1, s2):
<TAB>print(s1 + s2)
"
Write a Python function to find the maximum ODD number from a given list	"def odd_max_checker(list1):
<TAB>maxnum = 0
<TAB>for num in list1:
        if num % 2 != 0:
            if num > maxnum:
                maxnum = num
<TAB>return maxnum
"
write a python function to check if two lists contains same elements regardless of order	"

def have_same_contents(a, b):
<TAB>for v in set(a + b):
        if a.count(v) != b.count(v):
            return False
<TAB>return True
"
Write a python function to rotate a point (x,y) around a given origix (ox,oy) by an angle	"def rotate(origin, point, angle):
<TAB>ox, oy = origin
<TAB>px, py = point

<TAB>radian_angle = math.radians(angle)
<TAB>qx = ox + math.cos(radian_angle) * (px - ox) -        math.sin(radian_angle) * (py - oy)
<TAB>qy = oy + math.sin(radian_angle) * (px - ox) +        math.cos(radian_angle) * (py - oy)
<TAB>return qx, qy
"
Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.	"items = [x for x in raw_input().split(',')]
items.sort()
print(','.join(items))
"
61 write a program to sort Dictionary by Values and Keys and print it	"

test_dict = {""Gfg"": 1, ""is"": 3, ""Best"": 2, ""for"": 3, ""Geeks"": 2}
print(""The original dictionary is : "" + str(test_dict))

res = {val[0]: val[1]
       for val in sorted(test_dict.items(), key=lambda x: (-x[1], x[0]))}

print(""Sorted dictionary : "" + str(res))
"
write a python function that takes list as an input and converts it into tuple	"def convert(list):
<TAB>return tuple(list)
"
breakdown the string into a list of words	"words = my_str.split()
"
Write a python function to  add only even numbers in a list	"

from functools import reduce


input_list = [x for x in range(100)]


def sum_even(it):
<TAB>return reduce(lambda x, y: x + y if (y % 2) == 0 else x, it, 0)


res = sum_even(input_list)


print('Sum of even numbers in the list is ', res)
"
Write a Python program to generate all permutations of a list in Python. Example:# Input [1,2,3]# Output [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]	"

import itertools
print(list(itertools.permutations([1, 2, 3])))
"
Write a Python function to Find Element Occurring Odd Number of Times in a List	"

def find_odd_occurring(alist):
<TAB>
<TAB>ans = 0

<TAB>for element in alist:
        ans ^= element

<TAB>return ans
"
Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area.	"class Circle(object):
<TAB>def __init__(self, r):
        self.radius = r

<TAB>def area(self):
        return self.radius**2 * 3.14


aCircle = Circle(2)
print(aCircle.area())
"
Write a python function to multiply all values in a list	"
def multiplyList(myList):
<TAB>result = 1
<TAB>for x in myList:
        result = result * x
<TAB>return result
"
write a function to check a valid email id	"

import re


def check(email):
<TAB>regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
<TAB>if(re.search(regex, email)):
        print(""Valid Email"")
<TAB>else:
        print(""Invalid Email"")
"
Given a list slice it into a 3 equal chunks and revert each list	"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]


length = len(sampleList)
chunkSize = int(length / 3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
<TAB>indexes = slice(start, end, 1)
<TAB>listChunk = sampleList[indexes]
<TAB>mylist = [i for i in listChunk]
<TAB>print(""After reversing it "", mylist)
<TAB>start = end
<TAB>if(i != 2):
        end += chunkSize
<TAB>else:
        end += length - chunkSize
"
Write a python function to get the volume of a cone with radius & vertical height as input	"def cone_volume(radius, height):
<TAB>volume = 1 / 3 * 3.14 * (radius ** 2) * height
<TAB>return volume
"
64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.	"def reverse_sum(n1, n2):
<TAB>return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])
"
write a python program to find the biggest character in a string	"def bigChar(word): return reduce(
<TAB>lambda x, y: x if ord(x) > ord(y) else y, word)
"
Write a python function to find greatest common divisor	"

def greatest_common_divisor(x, y):
<TAB>print(""For"", x, ""and"", y, "","")
<TAB>r = x % y
<TAB>while r > 0:
        r = x % y
        if r == 0:
            print(""the greatest common divisor is"", y, ""."")
        else:
            q = y
            x = q
            y = r


greatest_common_divisor(1071, 1029)
"
write a program to print 5 odd random numbers between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 1], 5))
"
Given a dictionary get all values from the dictionary and add it in a list but don’t add duplicates	"speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53,
         'july': 54, 'Aug': 44, 'Sept': 54}


speedList = []
for item in speed.values():
<TAB>if item not in speedList:
        speedList.append(item)
print(""unique list"", speedList)
"
Generate a list by list comprehension	"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")
"
write a python function to capitalize first letter of a string	"

def capitalize(s, lower_rest=False):
<TAB>return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])
"
Write a Python program to sort list.	"numbers = [1, 3, 4, 2]
numbers.sort()
print(numbers)
"
17 split list into lists of equal length python	"[lst[i:i + n] for i in range(0, len(lst), n)]
"
write a program to return the absolute value	"

num = -10
print(f'Absolute of {num} is {abs(num)}')
"
write Python program to find Mathematical Median of Cumulative Records	"

test_list = [(1, 4, 5), (7, 8), (2, 4, 10)]


print(""The original list : "" + str(test_list))


res = []
for sub in test_list:
<TAB>for ele in sub:
        res.append(ele)
res.sort()
mid = len(res) // 2
res = (res[mid] + res[~mid]) / 2


print(""Median of Records is : "" + str(res))
"
write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate()	"

test_list = [{""Gfg"": 3, 4: 9}, {""is"": 8, ""Good"": 2}, {""Best"": 10, ""CS"": 1}]


print(""The original list : "" + str(test_list))


res = {idx: val for idx, val in enumerate(test_list)}
print(""The constructed dictionary : "" + str(res))
"
35. write a Python function To Calculate Volume OF Cylinder	"def volume(r, h):
<TAB>vol = 22 / 7 * r * r * h
<TAB>return vol
"
write a program to print 5 even random numbers between 10 and 100	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 0], 5))
"
68 Write a Python function to find the length of the last word.	"def length_of_last_word(s):
<TAB>words = s.split()
<TAB>if len(words) == 0:
        return 0
<TAB>return len(words[-1])
"
Write a Python program to print Square root of matrix elements	"mat1 = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
print(np.sqrt(mat1))
"
15 how to add extra zeros after decimal in python	"format(2.0, '.6f')

"
Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
write a python function to check if the user provided string is palindrome or not a palindrome	"

def ifPalindrome(inVar):
<TAB>revInvar = []
<TAB>for _ in range((len(inVar) - 1), -1, -1):
        revInvar.append(inVar[_])
<TAB>if revInvar == inVar:
        return ""Palindrome""
<TAB>else:
        return ""Not a palindrome""
"
Generate a random n-dimensional array of float numbers	"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array, ""\n"")
"
90 write a program for swapping the value of two integers without third variable	"

x = int(input(""Enter the value of x :""))
y = int(input(""Enter the value of y :""))


(x, y) = (y, x)


print('Value of x: ', x, '\nValue of y: ', y, '\nWOO!! Values SWAPPEDDD')
"
84  write a python program remove particular data type Elements from Tuple and print it	"

test_tuple = (4, 5, 'Gfg', 7.7, 'Best')
print(""The original tuple : "" + str(test_tuple))
a = tuple()
data_type = int
for i in test_tuple:
<TAB>if not isinstance(i, data_type):
        a = a + (i,)
print(list(a))
"
Write a function to remove punctuation from the string	"def r_punc():
<TAB>test_str = ""end, is best : for ! Nlp ;""
<TAB>print(""The original string is : "" + test_str)
<TAB>punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
<TAB>for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
<TAB>print(""The string after punctuation filter : "" + test_str)
"
41 how to sort a list in python using lambda	"data = [(""Apples"", 5, ""20""), (""Pears"", 1, ""5""), (""Oranges"", 6, ""10"")]


data.sort(key=lambda x: x[0])
"
write a python function to print every alternate number in the user provided list	"def print_alternate_numbers(list1):
<TAB>print(list1[::2])
"
Write a function to print a string by repeating it n times	"

def print_repeatnstring(text: str, n: int) -> str:
<TAB>return text * n
"
write a Python program to demonstrate working of Words Frequency in String Shorthands	"

test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'


print(""The original string is : "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency : "" + str(res))
"
write a python program to add whitespaces both sides of a string	"

s = 'The Little Price'


width = 20
s3 = s.center(width)


print(s3)
"
write a python program to check if year is a leap year or not	"

year = 2004
if (year % 4) == 0:
<TAB>if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
<TAB>else:
        print(f""{year} is a leap year"")
else:
<TAB>print(f""{year} is not a leap year"")
"
write a python function for some weird hypnosis text.	"def weird():
<TAB>import random

<TAB>def getlength(script):
        return sum((i['length'] for i in script))

<TAB>def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (
                k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

<TAB>def as_text(script):
        return ""\n"".join([i['text'] for i in script])

<TAB>priorities_and_sentences = [
        (1, ""...now... sitting comfortably in the chair""),
        (2, ""...with your feet still flat on the ground""),
        (3, ""...back straight and head up right""),
        (2, ""...make these adjustments now if you need to""),
        (3, ""... pause..............................""),
        (1, ""...your eyes ...still ...comfortably closed""),
        (2, ""...nice and relaxed...comfortable and relaxed...""),
        (3, ""... pause.......................................""),
        (1, ""...now...I want you to notice...how heavy your head is starting to feel...""),
        (1, ""how heavy your head feels...""),
        (3, ""... pause.......................................""),
        (2, ""really noticing the weight... of your head...""),
        (3,
         ""and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable""),
<TAB>]

<TAB>scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

<TAB>print(as_text(truncate(500, scriptlist)))
<TAB>print(as_text(truncate(300, scriptlist)))
<TAB>print(as_text(truncate(200, scriptlist)))
"
Python program to reverse the string	"def string_reverse(str1):
<TAB>rstr1 = ''
<TAB>index = len(str1)
<TAB>while index > 0:
        rstr1 += str1[index - 1]
        index = index - 1
<TAB>return rstr1


print(string_reverse('1234abcd'))
"
write a python function to return the absolute difference between two numbers	"

def abs_diff(num1, num2):
<TAB>return abs(num1 - num2)
"
Write a function to Get Kth Column of Matrix	"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]], k=2):

<TAB>print(""The original list is : "" + str(test_list))
<TAB>K = k
<TAB>res = list(zip(*test_list))[K]
<TAB>print(""The Kth column of matrix is : "" + str(res))
"
write a python program to print the first 5 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])
"
47. Python Program to Sort Words in Alphabetic Order	"

my_str = ""Hello this Is an Example With cased letters""
words = [word.lower() for word in my_str.split()]
words.sort()

print(""The sorted words are:"")
for word in words:
<TAB>print(word)
"
write a python function to check if a given string is a palindrome	"def is_palindrome(string):
<TAB>return string == string[::-1]
"
With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.	"def removeDuplicate(li):
<TAB>newli = []
<TAB>seen = set()
<TAB>for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)

<TAB>return newli
"
write Python program to demonstrate working of Get next key in Dictionary	"

test_dict = {'gfg': 1, 'is': 2, 'best': 3}


print(f""The original dictionary is : {test_dict}"")


test_key = 'is'


temp = list(test_dict)
try:
<TAB>res = temp[temp.index(test_key) + 1]
except (ValueError, IndexError):
<TAB>res = None


print(f""The next key is : {res}"")
"
write a python function to calculate the dot product of two lists	"def dot(l1, l2):
<TAB>return sum(x * y for x, y in zip(l1, l2))
"
write a python program to check and print if a number is prime	"num = 407
if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            break
<TAB>else:
        print(num, ""is a prime number"")
else:
<TAB>print(num, ""is not a prime number"")
"
Write a python function to find bilinear interpolation of a point x, y given 4 points represented as a list	"def bilinear_interpolation(x, y, points):
<TAB>points = sorted(points)
<TAB>(x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points

<TAB>if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:
        raise ValueError('points do not form a rectangle')
<TAB>if not x1 <= x <= x2 or not y1 <= y <= y2:
        raise ValueError('(x, y) not within the rectangle')

<TAB>return (q11 * (x2 - x) * (y2 - y)
            + q21 * (x - x1) * (y2 - y)
            + q12 * (x2 - x) * (y - y1)
            + q22 * (x - x1) * (y - y1)
            ) / ((x2 - x1) * (y2 - y1) + 0.0)
"
write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.	"def get_ordered_combinations(string, k):
<TAB>[print(''.join(x)) for i in range(1, int(k) + 1)
     for x in combinations(sorted(string), i)]
"
59 Write a python program that adds a time delay between a loop that prints numbers between 0 and 10	"

import time


def print_loop_with_delay(sec):
<TAB>for i in range(0, 10):
        time.sleep(sec)
        print(i)
"
write a python program to print current working directory	"import os
print(os.getcwd())
"
Write a fucntion to convert Fahrenheit to Celsius	"def Fahrenheit_to_Celsius(f):
<TAB>celsius = (f - 32) / 1.8
<TAB>return celsius
"
Write a Python program to print shape of an array/ matrix	"import numpy as np
A = np.array([[1, 2, 3], [2, 3, 5], [3, 6, 8], [323, 623, 823]])
print(""Shape of the matrix A: "", A.shape)
"
Write a python function check if a given directory exists and has any files	"import os


def check_dir_files(src_dir_path):
<TAB>if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return False
<TAB>files_in_dir = glob.glob(src_dir_path + ""/*.*"")
<TAB>if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return False
<TAB>print(""The directory "", src_dir_path,
          "" has "", len(files_in_dir), "" files."")
<TAB>return True
"
write a program to join all items in a tuple into a string, using a hash character as separator	"myTuple = (""John"", ""Peter"", ""Vicky"")
x = ""#"".join(myTuple)
print(x)
"
write a python function to get stock prices for a company from 2015 to 2020-12	"def get_stock_prices(tickerSymbol='TSLA'):
<TAB>import yfinance as yf

<TAB>tickerData = yf.Ticker(tickerSymbol)

<TAB>tickerDf = tickerData.history(
        period='1d', start='2015-1-1', end='2020-12-20')

<TAB>print(tickerDf)
"
71 write a program to find simple interest	"

p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))


si = (p * r * t) / 100


print(""Principle amount: "", p)
print(""Interest rate   : "", r)
print(""Time in years   : "", t)
print(""Simple Interest : "", si)
"
26 write a generator in python which returns a random number between 0 and a million	"

import random


def yield_a_number():
<TAB>yield random.randint(0, 1000000)
"
11 write a function to reverse every word in a string	"def reverse_word(sen: str):
<TAB>words = sen.split(' ')
<TAB>rever_word = [i[::-1] for i in words]
<TAB>final_sen = ' '.join(rever_word)
<TAB>print(final_sen)
"
write a list comprehension in python to get a list of even numbers when a range is given	"N = 20
number_list = [x for x in range(N) if x % 2 == 0]
print(f'List of Even Numbers:', number_list)
"
check if the number of terms is valid	"if nterms <= 0:
<TAB>print(""Plese enter a positive integer"")
else:
<TAB>print(""Fibonacci sequence:"")
<TAB>for i in range(nterms):
        print(recur_fibo(i))
"
Write a Python program that prints a set of all elements in either A or B, but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
write a python function to remove all punctuation from a string	"def remove_punctuations(sentence):
<TAB>punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
<TAB>no_punct = ''
<TAB>for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
<TAB>return no_punct
"
70 write a program to randomly print a integer number between 7 and 15 inclusive.	"import random


print(random.randrange(7, 16))
"
Write a python program using list comprehension to produce and print the list ['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']	"

input_string_list = ['x', 'y', 'z']
repeat_count = 4
list3 = [input_string_list[i] * (j + 1) for j in range(repeat_count)
         for i in range(len(input_string_list))]
print(list3)
"
write a program which accepts a string from console and print it in reverse order.	"s = raw_input()
s = s[::-1]
print(s)
"
Write a Python program to convert two equal length sets to dictionary	"keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)
"
write a python function to find the URL from an input string using the regular expression	"import re


def Find(string):
<TAB>regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
<TAB>url = re.findall(regex, string)
<TAB>return [x[0] for x in url]
"
write a Python function to check if count of divisors is even or odd	"def NumOfDivisor(n):
<TAB>if n < 1:
        return
<TAB>root_n = n**0.5
<TAB>if root_n**2 == n:
        print(""Odd"")
<TAB>else:
        print(""Even"")
"
92 Write a python function to round off a given decimal number	"

def apply_round(num):
<TAB>return round(num)
"
32 write a program to replace vowels by next vowel using list comprehension + zip()	"
test_str = 'helloworld'
print(""The original string is : "" + str(test_str))
vow = 'a e i o u'.split()
temp = dict(zip(vow, vow[1:] + [vow[0]]))
res = """".join([temp.get(ele, ele) for ele in test_str])
print(""The replaced string : "" + str(res))
"
Write a Python function to clear a set.	"def clear_set(set_input):
<TAB>setp_copy = set_input.copy()
<TAB>setp_copy.clear()
<TAB>return setp_copy
"
write a python program to create a dictionary with numbers 1 to 5 as keys and the numbers in english as values	"number_dict = {
<TAB>1: 'one',
<TAB>2: 'two',
<TAB>3: 'three',
<TAB>4: 'four',
<TAB>5: 'five'
}
"
6 python add all values of another list	"a = [1, 2, 3]
b = [4, 5, 6]
a += b
"
Write a function to calculate Volume of Hexagonal Pyramid	"def volumeHexagonal(a, b, h):
<TAB>return a * b * h
"
Define a class named American and its subclass NewYorker.	"class American(object):
<TAB>pass


class NewYorker(American):
<TAB>pass
"
write a Python function to print First n Digits of Pi	"

def pi(n):
<TAB>i = 1
<TAB>p = x = 3 * 10 ** (n + 10)
<TAB>while x:
        x = x * i // ((i + 1) * 4)
        i += 2
        p += x // i
<TAB>return '3.' + f""{p // 10 ** 10}""[1:]


print(pi(7))
"
Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.	"def printDict():
<TAB>d = dict()
<TAB>for i in range(1, 21):
        d[i] = i**2
<TAB>print(d)
"
write a python function that takes two path strings and return the combined path string	"import os


def path_join(PARENT_DIR, DIR):
<TAB>joined_path = os.path.join(PARENT_DIR, DIR)
<TAB>return joined_path


path_join(""C:/"", ""DATA"")
"
53 factorial using pythonish	"def fact_one_line(n):
<TAB>return 1 if n < 2 else n * fact_one_line(n - 1)
"
write a Python program to find a list of uncommon words	"

def UncommonWords(A, B):

<TAB>count = {}

<TAB>for word in A.split():
        count[word] = count.get(word, 0) + 1

<TAB>for word in B.split():
        count[word] = count.get(word, 0) + 1

<TAB>return [word for word in count if count[word] == 1]


A = ""Geeks for Geeks""
B = ""Learning from Geeks for Geeks""


print(UncommonWords(A, B))
"
52 write a python program to update a dictionary with the values from a dictionary list and print it	"
test_dict = {""Gfg"": 2, ""is"": 1, ""Best"": 3}

print(""The original dictionary is : "" + str(test_dict))

dict_list = [{'for': 3, 'all': 7}, {'geeks': 10}, {'and': 1, 'CS': 9}]


for i in dict_list:
<TAB>test_dict.update(i)
print(test_dict)
"
write Program to demonstrate conditional operator	"a, b = 10, 20
min = a if a < b else b
print(min)
"
9 write a python function to update a dictionary with a new key, value pair	"

def update_dictionary(dict, key, value):
<TAB>dict[str(key)] = value
<TAB>return dict
"
write a python program to do nothing for a condition	"

if 1 + 1 == 2:
<TAB>pass
"
Write a program to reverse a string	"

string = 'Today is bad day'
string[::-1]
"
write a python program to check identifier/keyword	"print('for'.isidentifier())
"
write a program to convert a dictionary value list to dictionary list and prints it.	"test_list = [{'END': [5, 6, 5]}, {'is': [10, 2, 3]}, {'best': [4, 3, 1]}]
res = [{} for idx in range(len(test_list))]
idx = 0
for sub in test_list:
<TAB>for key, val in sub.items():
        for ele in val:
            res[idx][key] = ele
            idx += 1
        idx = 0
print(""Records after conversion : "" + str(res))
"
4 write a python function to print the factorial of a number	"

def factorial(x):
<TAB>prod = 1
<TAB>for i in range(1, x + 1):
        prod *= i

<TAB>return prod
"
write a python program to split the string into chunks of size 3	"

str = 'CarBadBoxNumKeyValRayCppSan'
n = 3
chunks = [str[i:i + n] for i in range(0, len(str), n)]
print(chunks)
"
3 write a python program to convert a string to a char array	"

def char_array(string):
<TAB>return list(string)
"
42 write a function to subtract two matrices in python	"matrix1 = [[0, 1, 2],
           [3, 5, 5],
           [6, 7, 8]]


matrix2 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]


def subtractTheMatrix(matrix1, matrix2):
<TAB>matrix1Rows = len(matrix1)
<TAB>matrix2Rows = len(matrix2)
<TAB>matrix1Col = len(matrix1[0])
<TAB>matrix2Col = len(matrix2[0])

<TAB>
<TAB>if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

<TAB>matrix = []
<TAB>rows = []

<TAB>for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

<TAB>for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]

<TAB>return matrix
"
Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given	"def compound_interest(p, r, t):
<TAB>ci = p * (pow((1 + r / 100), t))
<TAB>return ci
"
Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.	"def printValue(s1, s2):
<TAB>print(int(s1) + int(s2))
"
5. write a program to find and print the largest among three numbers	"

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
<TAB>largest = num1
elif (num2 >= num1) and (num2 >= num3):
<TAB>largest = num2
else:
<TAB>largest = num3
print(f'largest:{largest}')
"
write a Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using list comprehension	"

test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


print(""The original list is : "" + str(test_list))


res = [[key for key in test_list[0].keys()], *[list(idx.values())
                                               for idx in test_list]]


print(""The converted list : "" + str(res))
"
46 write Python Function to print leaders in array	"def printLeaders(arr, size):

<TAB>for i in range(0, size):
        for j in range(i + 1, size):
            if arr[i] < arr[j]:
                break
        if j == size - 1:
            print(arr[i])


arr = [16, 17, 4, 3, 5, 2]
printLeaders(arr, len(arr))
"
51. python function for finding softmax output of a vector	"

def softmax(x):
<TAB>

<TAB>if(type(x) == int or type(x) == float):

        return 1

<TAB>denom = 0

<TAB>for i in x:

        denom += math.exp(i)

<TAB>new_vec = []

<TAB>for i in x:

        new_vec.append(math.exp(i) / denom)

<TAB>return new_vec
"
write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.	"import random
print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))
"
Write a function to return the area of a square	"def cal_area_square(side):
<TAB>return side**2
"
write a python function to generate cryptographically strong pseudo-random data	"def get_cryptographically_secure_data(n=101):
<TAB>return secrets.token_bytes(n), secrets.token_hex(n)
"
write a python program to find the average of list of numbers provided as input by user	"n = int(input(""Enter the number of elements to be inserted: ""))
a = []
for i in range(0, n):
<TAB>elem = int(input(""Enter element: ""))
<TAB>a.append(elem)
avg = sum(a) / n
print(""Average of elements in the list"", round(avg, 2))
"
81 By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
From given string replace each punctuation with #	"from string import punctuation


str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
<TAB>str1 = str1.replace(char, replace_char)


print(""The strings after replacement : "", str1)
"
Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]


print(""intial_list"", str(ini_tuple))
result = []
for i in ini_tuple:
<TAB>if i[1] <= 100:
        result.append(i)
print(""Resultant tuple list: "", str(result))
"
"write a python program using ""any"" function"	"print(any([False, True, False, False]))
"
Generate a Python list of all the even numbers between two given numbers	"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)
"
write python function to detect if a number is even number	"def is_even(num):
<TAB>return((num % 2) == 0)
"
write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0	"def divide(num1, num2):
<TAB>if num2 == 0:
        return
<TAB>else:
        return num1 / num2
"
24 write a program to caclulate the approximate value of pi using the monte carlo method	"

import random


def pi_monte_carlo(n=1000000):
<TAB>count = 0
<TAB>for _ in range(n):
        x = random.random()
        y = random.random()
        if x ** 2 + y ** 2 <= 1:
            count += 1
<TAB>return 4 * count / n


print(pi_monte_carlo())
"
14.Write a Python Program to check if a number is prime or not	"

num = 407
if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
<TAB>else:
        print(num, ""is a prime number"")

else:
<TAB>print(num, ""is not a prime number"")
"
write a python function to convert Celsius to Fahrenheit.	"

def celsius_to_fahrenheit(degrees):
<TAB>return ((degrees * 1.8) + 32)
"
write a python program to find a string in a given phrase	"phrase = ""the surprise is in here somewhere""
print(phrase.find(""surprise""))
"
write a Python3 program that prints a index wise product of a Dictionary of Tuple Values	"test_dict = {'END Program': (5, 6, 1), 'is': (8, 3, 2), 'best': (1, 4, 9)}
prod_list = []
for x in zip(*test_dict.values()):
<TAB>res = 1
<TAB>for ele in x:
        res *= ele
<TAB>prod_list.append(res)
res = tuple(prod_list)
print(""The product from each index is : "" + str(res))
"
22. python program to find if given co-ordinates are inside circle	"from random import uniform
from math import sqrt


def random_shot(rad):
<TAB>r_x = uniform(-rad, rad)
<TAB>r_y = uniform(-rad, rad)

<TAB>if sqrt(r_x**2 + r_y**2) <= rad:
        is_in_circle = True
<TAB>else:
        is_in_circle = False

<TAB>return r_x, r_y, is_in_circle
"
Write a Python function to count occurrence of a word in the given text	"def text_searcher(text, word):
<TAB>count = 0
<TAB>for w in text.split():
        if w == word:
            count = count + 1
<TAB>return count
"
display the sorted words	"for word in words:
<TAB>print(word)
"
98 write a python program to  count the elements in a list until an element is a Tuple  and print it	"
li = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]
count = 0
for i in li:
<TAB>if isinstance(i, tuple):
        break
<TAB>count = count + 1
print(f'count of element till tuple is encountered {count}')
"
write a program to convert tuple to list	"t = (1, 2, 4, 5, 6)
print(f'list:{list(t)}')
"
Write a python program to Implement Shell sort and print the sorted list for the below list	"

def gaps(size):
<TAB>length = size.bit_length()
<TAB>for k in range(length - 1, 0, -1):
        yield 2**k - 1


def shell_sort(alist):
<TAB>def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp

<TAB>for g in gaps(len(alist)):
        insertion_sort_with_gap(g)


alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python function that sorts a list based on the user provided list of indexes.	"

def sort_by_indexes(lst, indexes, reverse=False):
<TAB>return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x:
                                       x[0], reverse=reverse)]
"
Convert dictionary to JSON	"import json
person_dict = {'name': 'Bob',
               'age': 12,
               'children': None
               }
person_json = json.dumps(person_dict)
print(person_json)
"
73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.	"r = range(1, 201)
a = sum(r)
print(a * a - sum(i * i for i in r))
"
Write a Python function to find numbers within a given range where every number is divisible by every digit it contains.	"def divisible_by_digits(start_num, end_num):
<TAB>return [n for n in range(start_num, end_num + 1)
            if not any(map(lambda x: int(x) == 0 or n % int(x) != 0, str(n)))]
"
"List slicing using indexes that are ""out of range"""	"my_list = [1, 2, 3, 4, 5]
print(my_list[5])
"
write a python function to get dot product between two lists of numbers	"def dot_product(a, b):
<TAB>return sum(e[0] * e[1] for e in zip(a, b))
"
Write a function to calculate the density given mass and volume	"def cal_density(mass, volume):
<TAB>return (mass / volume)
"
Sort the list in ascending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")
"
write a python funaction to create a new string by appending second string in the middle of first string	"

def appendMiddle(s1, s2):
<TAB>middleIndex = int(len(s1) / 2)
<TAB>print(""Original Strings are"", s1, s2)
<TAB>middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
<TAB>print(""After appending new string in middle"", middleThree)


appendMiddle(""bananna"", ""monkey"")
"
Python code to convert string to list	"def Convert_2(string):
<TAB>li = list(string.split(""-""))
<TAB>return li


str1 = ""Geeks-for-Geeks""
print(Convert(str1))
"
47 first class function	"def call_func(x, func):
<TAB>return fn(x)
"
48 write a python program to merge a list of dictionaires	"result = {}
for d in L:
<TAB>result.update(d)
"
write a function to convert list to tuple	"def list2tuple(l):
<TAB>return tuple(l)
"
write a program to find and print the largest among three number	"snum1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
<TAB>largest = num1
elif (num2 >= num1) and (num2 >= num3):
<TAB>largest = num2
else:
<TAB>largest = num3
print(f'largest:{largest}')
"
6. python ReLu function	"def relu_like_activation(l):
<TAB>return[0 if x < 0 else x for x in l]
"
Write a Python program to  bin a numeric series to 10 groups of equal size	"import pandas as pd
import numpy as np
ser = pd.Series(np.random.random(20))
deciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1],
                  labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])
print(deciled)
"
Define a function which can compute the sum of two numbers.	"def SumFunction(number1, number2):
<TAB>return number1 + number2
"
90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.	"from itertools import groupby


def modified_encode(alist):
<TAB>def ctr_ele(el):
        if len(el) > 1:
            return [len(el), el[0]]
        else:
            return el[0]
<TAB>return [ctr_ele(list(group)) for key, group in groupby(alist)]


n_list = [1, 1, 2, 3, 4, 4, 5, 1]
print(""Original list:"")
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))
"
write Python3 code to demonstrate working of Rear word replace in String using rfind() + join()	"test_str = ""GFG is good""
print(""The original string is : "" + test_str)
rep_str = ""best""
res = test_str[: test_str.rfind(' ')] + ' ' + rep_str
print(""The String after performing replace : "" + res)
"
write a Python function to find surface area of the Pentagonal Prism	"

def surfaceArea(a, b, h):
<TAB>return 5 * a * b + 5 * b * h


a = 5
b = 3
h = 7


print(""surface area ="", surfaceArea(a, b, h))
"
45 Define a python function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.	"

import requests


def get_status(url):
<TAB>data = requests.get(url)
<TAB>return data.status_code
"
write a python program to find sum of natural numbers up to a 16	"

num = 16
if num < 0:
<TAB>print(""Enter a positive number"")
else:
<TAB>sum = 0
<TAB>
<TAB>while(num > 0):
        sum += num
        num -= 1
<TAB>print(""The sum is"", sum)
"
write a program to subtract two matrix	"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
<TAB>raise ArithmeticError('Matrices are NOT the same size.')


C = []
while len(C) < rowsA:
<TAB>C.append([])
<TAB>while len(C[-1]) < colsB:
        C[-1].append(0.0)


for i in range(rowsA):
<TAB>for j in range(colsB):
        C[i][j] = A[i][j] - B[i][j]


print(""Subtracted Array"")
for i in range(rowsA):
<TAB>row = '|'
<TAB>for b in range(colsA):
        row = row + ' ' + str(C[i][b])
<TAB>print(row + ' ' + '|')
"
Write a python program to print the distance between first and last occurrence of even element.	"
test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11]

indices_list = [idx for idx in range(
<TAB>len(test_list)) if test_list[idx] % 2 == 0]


res = indices_list[-1] - indices_list[0]

print(""Even elements distance : "" + str(res))
"
Write a Python program to reverse a tuple	"aTuple = (10, 20, 30, 40, 50)
aTuple = aTuple[::-1]
print(aTuple)
"
88 write a python program to print Dissimilar Elements in Tuples	"
test_tup1 = (3, 4, 5, 6)
test_tup2 = (5, 7, 4, 10)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
c = tuple()
c = tuple(set(test_tup1) ^ set(test_tup2))
print(f'Dissimilar element tuple is {c}')
"
10. python function to find the area of a circle	"def circle_area(r):
<TAB>return 22 / 7 * r**2
"
Write a program to print bit wise XOR of two numbers	"a = 60
b = 13


c = a ^ b
print(""XOR"", c)
"
Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically.	"freq = {}
line = raw_input()
for word in line.split():
<TAB>freq[word] = freq.get(word, 0) + 1
words = freq.keys()
words.sort()
for w in words:
<TAB>print(""%s:%d"" % (w, freq[w]))
"
Dynamic binding and typos in variable names	"print('first list:')
for i in range(3):
<TAB>print(i)

print('\nsecond list:')
for j in range(3):
<TAB>print(i)
"
87 Write a Python function to check whether a list contains a sublist.	"def is_Sublist(l, s):
<TAB>sub_set = False
<TAB>if s == []:
        sub_set = True
<TAB>elif s == l:
        sub_set = True
<TAB>elif len(s) > len(l):
        sub_set = False

<TAB>else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i + n] == s[n]):
                    n += 1

                if n == len(s):
                    sub_set = True

<TAB>return sub_set
"
12. Python Program to Check Leap Year	"year = 2000


if (year % 4) == 0:
<TAB>if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
<TAB>else:
        print(""{0} is a leap year"".format(year))
else:
<TAB>print(""{0} is not a leap year"".format(year))
"
5 write a python function to accept a number and return all the numbers from 0 to that number	"

def print_numbers(x):
<TAB>for i in range(x):
        print(i)
"
write a python program to add two numbers	"num1 = 5465461
num2 = 8765468
sum = num1 + num2
print(f'Sum: {sum}')
"
Write a Python function to return Padovan's Sequence	"def padovan_seq(n):
<TAB>if n >= 0:
        if n in {0, 1, 2}:
            return 1
        else:
            return padovan_seq(n - 3) + padovan_seq(n - 2)
"
"Write a python function to replace all the spaces in an entered string with a hyphen ""-"""	"def replacetext(string):
<TAB>string = string.replace("" "", ""-"")
<TAB>return string
"
27 write a python funtion to execute bash commands	"import subprocess
subprocess.call([""sudo"", ""apt"", ""update""])
"
43. python function for finding sine angle	"def sine(angle):
<TAB>

<TAB>return math.sin(angle)
"
write a python program to multiply three numbers and print the result	"num1 = 2
num2 = 4
num3 = 6
print(num1 * num2 * num3)
"
71 write a python program to count dictionaries in a list in Python and print it	"
test_list = [10, {'gfg': 1}, {'ide': 2, 'code': 3}, 20]

print(""The original list is : "" + str(test_list))
count = 0
for i in test_list:
<TAB>if isinstance(i, dict):
        count = count + 1
print(count)
"
write a recursive python function that takes either a list or tuple as input and reverses the order of its elements	"def reverse(seq):
<TAB>SeqType = type(seq)
<TAB>emptySeq = SeqType()
<TAB>if seq == emptySeq:
        return emptySeq
<TAB>restrev = reverse(seq[1:])
<TAB>first = seq[0:1]
<TAB>result = restrev + first
<TAB>return result
"
Python program to compute distance between two points	"def points(x1, x2):
<TAB>import math
<TAB>p1 = list(x1)
<TAB>p2 = list(x2)
<TAB>distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))
<TAB>print(distance)


points((2, 3), (4, 5))
"
write a function which creates a deck of cards, given the list of suits and values	"def create_deck_of_cards(values: list, suits: list):
<TAB>card_deck = []
<TAB>for i in range(52):
        tup = (values[i], suits[i])
        card_deck.append(tup)
<TAB>return card_deck
"
Write a function that returns uppercase string	"def str_uppercase(s: str):
<TAB>return s.upper()
"
Write a Python function to return octal value of a given integer	"def int_to_oct(a):
<TAB>return oct(a)
"
Write a Python function to convert a list to a tuple.	"def convert_list_to_tuple(list_input):
<TAB>return tuple(list_input)
"
Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort	"

a = [2, 3, 8, 9, 2, 4, 6]
for i in range(0, len(a)):
<TAB>for j in range(0, len(a) - i - 1):
        if(a[j] > a[j + 1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.	"n = int(input())
d = dict()
for i in range(1, n + 1):
<TAB>d[i] = i * i


print(d)
"
write a python function to check if SHA256 hashed value is valid for given data or not	"def check_sha256_hash(hashed, data):
<TAB>import hashlib
<TAB>return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False
"
65 write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.	"import random


print(random.choice([i for i in range(11) if i % 2 == 0]))
"
write a program to find index of a word in given string	"txt = ""Hello, welcome to my world.""
x = txt.index(""welcome"")
print(x)
"
39 how to remove integer from string in python	"s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])
"
Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5	"def findDivisible(numberList):
<TAB>for num in numberList:
        if (num % 5 == 0):
            print(num)
"
Write a python function to merge two Dictionaries	"def Merge(dict1, dict2):
<TAB>return(dict2.update(dict1))
"
2 write a program to get numbers = 1,3,11,42,12,4001	"highestnumber = -999
for i in numbers:
<TAB>if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
write a python function to append text to a user provided file	"

def file_read(fname):
<TAB>with open(fname, ""w"") as myfile:
        myfile.write(""Appending line one\n"")
        myfile.write(""Appending line two"")
        txt = open(fname)
        print(txt.read())
"
Write a program to print prime numbers in a range using Sieve of Eratosthenes.	"

n = int(input(""Enter upper limit of range: ""))
sieve = set(range(2, n + 1))
while sieve:
<TAB>prime = min(sieve)
<TAB>print(prime, end=""\t"")
<TAB>sieve -= set(range(prime, n + 1, prime))

print()
"
Write a Python Program to Concatenate Two Dictionaries Into One	"

def concat_dic(d1, d2):
<TAB>return d1.update(d2)
"
write a Python function to Convert Decimal to Binary	"def convertToBinary(n):
<TAB>if n > 1:
        convertToBinary(n // 2)
<TAB>print(n % 2, end='')
"
16. Python program to find the factorial of a number.	"num = 7
factorial = 1


if num < 0:
<TAB>print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
<TAB>print(""The factorial of 0 is 1"")
else:
<TAB>for i in range(1, num + 1):
        factorial = factorial * i
<TAB>print(""The factorial of"", num, ""is"", factorial)
"
Write a python function to capitalize first and last letters of each word of a given string	"def capitalize_both_ends(x): return x[0].upper() + x[1:-1] + x[-1].upper()


def capitalize_first_and_last(string):
<TAB>string = string.strip().split()
<TAB>new_string = [capitalize_both_ends(word) for word in string]
<TAB>return new_string
"
write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sorted() + lambda	"

test_list = ['gfg', 'is', 'best', 'for', 'geeks']


print(""The original list is : "" + str(test_list))


res = sorted(test_list, key=lambda sub: sub[-1])


print(""Sorted List : "" + str(res))
"
write python function to detect if an year is leap year	"def is_leap_year(year):
<TAB>if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                return True
            else:
                return False
        else:
            return True
<TAB>else:
        return False
"
write a regex pattern in python to print all adverbs and their positions in user input text	"import re
text = input(""Enter a string: "")
for m in re.finditer(r""\w+ly"", text):
<TAB>print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
"
Write a Python program to create a symmetric difference	"setx = set([""apple"", ""mango""])
sety = set([""mango"", ""orange""])
setc = setx ^ sety
print(setc)
"
Write a function to calculate Volume of Pentagonal Pyramid	"def volumePentagonal(a, b, h):
<TAB>return (0.83) * a * b * h
"
89 write a python program to flatten Tuples List to String and print it	"

test_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]
print(""The original list : "" + str(test_list))
s = ''
for i in test_list:
<TAB>for j in i:
        s += ' ' + j + ' '
print(f' string after flattening is {s}')
"
Write Python Program to print the Square Root of a number	"num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
using for loop to iterate multiplication 10 times	"for i in range(1, 11):
<TAB>print(num, 'x', i, '=', num * i)
"
write Python Program to print the Sum of 10 Natural Numbers	"num = 10
if num < 0:
<TAB>print(""Enter a positive number"")
else:
<TAB>sum = 0
<TAB>
<TAB>while(num > 0):
        sum += num
        num -= 1
<TAB>print(""The sum is"", sum)
"
Write a python function to find perimeter Of Rectangle	"def perimeterRectangle(a, b):
<TAB>return (2 * (a + b))
"
Write a Python function that returns the values   of the largest and second largest elements in the passed list.	"def max2(x):
<TAB>if x[0] > x[1]:
        m1, m2 = (x[0], x[1])
<TAB>else:
        m1, m2 = (x[1], x[0])

<TAB>for i in range(2, len(x)):
        if x[i] > m1:
            m2 = m1
            m1 = x[i]
        elif x[i] > m2:
            m2 = x[i]
<TAB>return m1, m2
"
write a python function to print a given string n times	"def printn(string, n):
<TAB>print(string * n)
"
write a python function that takes in two numbers and returns their LCM	"def lcm(num1, num2):
<TAB>bigger = num1 if num1 > num2 else num2
<TAB>while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
<TAB>return bigger
"
Write a function that returns a list sorted descending	"def descending_sort(l: list):
<TAB>sorted(l, reverse=True)
"
Write a function to determine the bits used by any number	"

def totalBits(n):
<TAB>return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'
"
write a function to calculate area of a triangle given height and base	"

def area_triangle(base, height):
<TAB>return 0.5 * base * height
"
Write a python function to copy the sign bit from one variable to another	"def copysign(dst, src):
<TAB>return math.copysign(dst, src)
"
write a function to convert miles to kilometers	"

def miles_to_kms(dist):
<TAB>return dist * 1.609
"
write a python function to print pyramid pattern	"def pyramid_pattern(symbol='*', count=4):
<TAB>for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))
"
Write a function that returns derivative derivative relu value of the input	"def derivative_relu(x: float) -> float:
<TAB>x = 1 if x > 0 else 0
<TAB>return x
"
Write a Python function to check whether the input letter is a vowel or not	"def check_vowel_or_not(letter):
<TAB>result = str(letter) in ""aeiou""
<TAB>return result
"
Write a function that returns length of the list	"

def list_length(l):
<TAB>return len(l)
"
write a python function to inherit a parent class person in a child class Student	"class Person:
<TAB>def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

<TAB>def printname(self):
        print(self.firstname, self.lastname)


class Student(Person):
<TAB>pass
"
Python program to create a list containing the power of said number in bases raised to the corresponding number in the index using Python map	"

bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def power_base(num1, index1):
<TAB>print(""Base numbers abd index: "")
<TAB>print(bases_num)
<TAB>print(index)
<TAB>result = list(map(pow, num1, index1))
<TAB>print(""\nPower of said number in bases raised to the corresponding number in the index:"")
<TAB>print(result)


power_base(bases_num, index)
"
Write a python program to sort alphabetically the words form a string provided by the user	"

my_str = ""Hello this Is an Example With cased letters""


words = [word.lower() for word in my_str.split()]


words.sort()


print(""The sorted words are:"")
for word in words:
<TAB>print(word)
"
write a python function to find the area of a circle using the user provided diameter	"

def area_of_circle(diameter):
<TAB>PI = 3.14
<TAB>area = (PI / 4) * (diameter * diameter)
<TAB>print(f'Area Of a Circle {area}')
"
write a function to find length of list	"def get_list_length(l):
<TAB>return len(l)
"
33 write a program to reverse words of string	"
def rev_sentence(sentence):
<TAB>words = sentence.split(' ')
<TAB>reverse_sentence = ' '.join(reversed(words))
<TAB>return reverse_sentence


if __name__ == ""__main__"":
<TAB>input = 'have a good day'
<TAB>print(rev_sentence(input))
"
Write a python program to Implement Comb sort and print the sorted list for the below list	"

def comb_sort(alist):
<TAB>def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

<TAB>gap = len(alist)
<TAB>shrink = 1.3

<TAB>no_swap = False
<TAB>while not no_swap:
        gap = int(gap / shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = [2, 3, 5, 6, 4, 5]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python function to read first n lines from a file	"

def file_read_from_head(fname, nlines):
<TAB>from itertools import islice
<TAB>with open(fname) as f:
        for line in islice(f, nlines):
            print(line)
"
77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
Write a function to Subtracts two lists element wise	"def sub_listelements(l1: list, l2: list):
<TAB>return [i - j for i, j in zip(l1, l2)]
"
Write a python program code to perform Triple quote String concatenation Using splitlines() + join() + strip()	"

test_str1 = """"""India
is""""""
test_str2 = """"""best
for everybody
""""""


print(""The original string 1 is : "" + test_str1)
print(""The original string 2 is : "" + test_str2)

test_str1 = test_str1.splitlines()
test_str2 = test_str2.splitlines()
res = []

for i, j in zip(test_str1, test_str2):
<TAB>res.append(""   "" + i.strip() + "" "" + j.strip())
res = '\n'.join(res)


print(""String after concatenation : "" + str(res))
"
Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
Write a Python function to check whether a person is eligible for voting or not based on their age	"def vote_eligibility(age):
<TAB>if age >= 18:
        status = ""Eligible""
<TAB>else:
        status = ""Not Eligible""
<TAB>return status
"
Write a Python function to remove falsy values from a list	"def newlist(lst):
<TAB>return list(filter(None, lst))
"
using replace() to create eval friendly string	"temp = test_str.replace(',', '+').replace('x', '*')
"
write a  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda	"
test_list = [{""Gfg"": [6, 7, 8], ""is"": 9, ""best"": 10},
             {""Gfg"": [2, 0, 3], ""is"": 11, ""best"": 19},
             {""Gfg"": [4, 6, 9], ""is"": 16, ""best"": 1}]
print(""The original list : "" + str(test_list))
K = ""Gfg""
idx = 2
res = sorted(test_list, key=lambda ele: ele[K][idx])
print(""The required sort order : "" + str(res))
"
write a python program to create dictionary from the lists	"

L1 = ['a', 'b', 'c', 'd']
L2 = [1, 2, 3, 4]
d = dict(zip(L1, L2))
print(f'dictionary:{d}')
"
write a program to replace duplicate word occurence in String	"

str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""


repl_dict = {'IISC': 'It', 'Classes': 'They'}


str_list = str1.split(' ')


res = set()


for idx, ele in enumerate(str_list):
<TAB>if ele in repl_dict:
        print(str(idx) + '  ' + ele)
        if ele in res:
            str_list[idx] = repl_dict[ele]
        else:
            res.add(ele)


res = ' '.join(str_list)


print(""Replaced String: "" + str(res))
"
"You are given a string. Split the string on a "" "" (space) delimiter and join using a - hyphen."	"def word_join(s):
<TAB>words = s.split(' ')
<TAB>return '-'.join(words)


print(word_join(""This is 17B Assignment""))
"
Sort JSON keys in Python and write it into a file	"import json
sampleJson = {""id"": 1, ""name"": ""value2"", ""age"": 29}


with open(""sampleJson.json"", ""w"") as write_file:
<TAB>json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")
"
write a python program which takes user input tuple and prints length of each tuple element	"userInput = input(""Enter a tuple:"")
x = map(lambda x: len(x), tuple(x.strip() for x in userInput.split(',')))
print(list(x))
"
Write a python function to get the surface area of a cube with side as input	"def cube_surface_area(side):
<TAB>surface_area = 6 * side ** 2
<TAB>return surface_area
"
write a python program that sorts and prints a comma separated list of values	"values = 'one,two,three,four,five'
items = values.split(',')
items.sort()
print(','.join(items))
"
write a python program that alphabetically sorts the words in a sentence and prints it	"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))
"
Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area.	"class Rectangle(object):
<TAB>def __init__(self, l, w):
        self.length = l
        self.width = w

<TAB>def area(self):
        return self.length * self.width
"
34. write a Python function to Find LCM and returb the value	"def compute_lcm(x, y):
<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y

<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

<TAB>return lcm
"
Write a Python program to sort (ascending) a dictionary by value.	"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}


print({k: v for k, v in sorted(d.items(), key=lambda x: x[1])})
"
Please raise a RuntimeError exception.	"raise RuntimeError('something wrong')
"
write a python program which takes 3 numbers as input and to print largest of three numbers using elif statement	"

a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))


if (a > b and a > c):
<TAB>print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
<TAB>print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
<TAB>print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
<TAB>print(""Either any two values or all the three values are equal"")
"
Write a function that returns derivative of log of a function	"def derivative_log(x: float) -> float:
<TAB>return (1 / x)
"
75 write a python program to test Boolean Value of Dictionary and print it	"
test_dict = {'gfg': True, 'is': False, 'best': True}

print(""The original dictionary is : "" + str(test_dict))
res = True
for key, value in test_dict.items():
<TAB>if value == False:
        res = False
        break
print(f""Dictionary is {res}"")
"
Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.	"def putNumbers(n):
<TAB>i = 0
<TAB>while i < n:
        j = i
        i = i + 1
        if j % 7 == 0:
            yield j


for i in reverse(100):
<TAB>print(i)
"
Given a two list of equal size create a set such that it shows the element from both lists in the pair	"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)
"
write a python program to print equal length of string	"

print('ab'.zfill(5))
"
write a program to print keys in a dictionary whose values are greater than a given input.	"test_dict = {'tsai': 4, 'random_key': 2, 'foo': 3, 'bar': 'END'}
K = 3
res = {key: val for key, val in test_dict.items()
       if type(val) != int or val > K}
print(""Values greater than K : "", res.keys())
"
Write a Python Program to Remove the nth Index Character from a Non-Empty String	"

def remove(string, n):
<TAB>first = string[:n]
<TAB>last = string[n + 1:]
<TAB>return first + last
"
Subtract a week from a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
8 write a python function to accept a key, value pair and return a dictionary	"

def create_dictionary(key, value):
<TAB>return {str(key): value}
"
70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.	"def odd_occurrence(arr):

<TAB>result = 0

<TAB>for element in arr:
        result = result ^ element

<TAB>return result
"
write a python program to print sum of natural numbers up to num	"

num = 16


if num < 0:
<TAB>print(""Enter a positive number"")
else:
<TAB>sum = 0
<TAB>while(num > 0):
        sum += num
        num -= 1
<TAB>print(""The sum is"", sum)
"
Test if string starts with H	"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")
"
Write a function to print all time when angle between hour hand and minute	"def printTime(theta):
<TAB>for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
<TAB>print(""Input angle not valid."")
<TAB>return


theta = 90.0
printTime(theta)
"
70 write a program to display the powers of 2 using anonymous function	"

terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))


print(""The total terms are:"", terms)
for i in range(terms):
<TAB>print(""2 raised to power"", i, ""is"", result[i])
"
write a python function to print odd numbers between user provided ranges	"

def odd_numbers(lower, upper):
<TAB>for i in range(lower, upper + 1):
        if(i % 2 != 0):
            print(i)
"
Write a function to return the area of a equilateral triangle	"def cal_eq_triangle_area(a: float) -> float:
<TAB>if a:
        return (3**(1 / 2)) * (a**2) / 4
<TAB>else:
        return None
"
write a python program to del the first element of the array/list	"a = [-1, 1, 66.25, 333, 333, 1234.5]
del a[0]
print(a)
"
Python program to get a string which is n (non-negative integer) copies of a given string.	"def larger_string(string1, n):
<TAB>result = """"
<TAB>for i in range(n):
        result = result + string1
<TAB>return result


print(larger_string('abc', 2))
print(larger_string('.py', 3))
"
write a python function that returns every nth element in a list	"

def every_nth(lst, nth):
<TAB>return lst[nth - 1::nth]
"
sort the list	"words.sort()
"
write a python function to find the area of a circle using the user provided radius	"

def area_of_circle(radius):
<TAB>PI = 3.14
<TAB>radius = float(radius)
<TAB>area = PI * radius * radius
<TAB>circumference = 2 * PI * radius
<TAB>print(f'Area Of a Circle {area}')
<TAB>print(f'Circumference Of a Circle {circumference}')
"
"write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
<TAB>for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
Write a function that returns a replace values in string with values provided	"def replace_values(s: str, old, new) -> str:
<TAB>s.replace(old, new)
"
Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0	"def prod_of_roots(a: float, b: float):
<TAB>if a:
        return -b / a
<TAB>else:
        return None
"
Write a function that returns log of a function	"def log(x: float) -> float:
<TAB>import math
<TAB>return math.log(x)
"
write a python function to count the occurrence of a given word in a given file	"def check_word_count(word, file):
<TAB>if not os.path.isfile(file):
        raise FileNotFoundError
<TAB>if not isinstance(word, str):
        raise TypeError

<TAB>with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
<TAB>return c.get(word, 0)
"
Write a python program to determine the percentage of lowercase and uppercase letters in a string.	"string = input()


length = len(string)


lower = upper = 0


for i in string:
<TAB>if i.islower():
        lower += 1
<TAB>elif i.isupper():
        upper += 1


per_lower = lower / length * 100
per_upper = upper / length * 100
print(""Lower: %.2f%%"" % per_lower)
print(""Upper: %.2f%%"" % per_upper)
"
write a python program to print the number of letters and digits in sentence	"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
<TAB>if c.isdigit():
        digits += 1
<TAB>elif c.isalpha():
        letters += 1
<TAB>else:
        pass
print(f'Digits: {digits}, Letters: {letters}')
"
Write a Python function that takes a list and returns the difference between the biggest and smallest numbers.	"def difference_max_min(lst):
<TAB>return abs(min(lst) - max(lst))
"
write a python function to check if all elements in a list are equal.	"

def all_equal(lst):
<TAB>return len(set(lst)) == 1
"
write a Python program to create multiple list	"

obj = {}
for i in range(1, 11):
<TAB>obj[str(i)] = []
print(f'create multiple list:{obj}')
"
90 write a python program to filter tuples according to list element presence and print it	"

test_list = [(1, 4, 6), (5, 8), (2, 9), (1, 10)]
s = []
tar_list = [6, 10]

for i in test_list:
<TAB>for j in i:
        if j in tar_list:
            s.append(i)
print(s)
"
Write a Python function to add two given lists using map and lambda.	"def add_two_lists(list_1, list_2):
<TAB>result = map(lambda x, y: x + y, list_1, list_2)
<TAB>return result
"
78 By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
Write a python function to get the surface_area of a cone with radius & slant height as input	"def cone_surface_area(radius, slant_height):
<TAB>surface_area = 3.14 * (radius ** 2) + 3.14 * radius * slant_height
<TAB>return surface_area
"
write a python program to convert a dictionary to list of tuples	"dict_new = {'1': 'A', '2': 'B'}
tup = dict_new.items()
print(list(tup))
"
write a python program using while loop to reverse a number and print the reversed number	"Number = int(input(""Please Enter any Number: ""))
Reverse = 0
while(Number > 0):
<TAB>Reminder = Number % 10
<TAB>Reverse = (Reverse * 10) + Reminder
<TAB>Number = Number // 10

print(""\n Reverse of entered number is = %d"" % Reverse)
"
Write a Python program to create the colon of a tuple.	"

from copy import deepcopy
tuplex = (""HELLO"", 5, [], True)
print(tuplex)
tuplex_colon = deepcopy(tuplex)
tuplex_colon[2].append(50)
"
write a python function to return random selection from itertools.permutations(iterable, r)	"def random_permutation(iterable, r=None):
<TAB>import random
<TAB>pool = tuple(iterable)
<TAB>r = len(pool) if r is None else r
<TAB>return tuple(random.sample(pool, r))
"
write a python function to return the natural logarithm of a number	"def get_natural_log_value(i):
<TAB>import math
<TAB>return(math.log(i))
"
write a Python function to find area of an Ellipse.	"

def findArea(a, b):

<TAB>Area = 3.142 * a * b

<TAB>print(""Area:"", round(Area, 2))


a = 5
b = 4


findArea(a, b)
"
Write a Python function to find the union of two arrays	"def array_union(A, B):
<TAB>union = list(set(A) | set(B))
<TAB>return union
"
write a python function to rotate the given list by n times toward left	"

def rotate(lst, offset):
<TAB>return lst[offset:] + lst[:offset]
"
write a python program to print todays date	"tday = datetime.date.today()
print(tday)
"
1 write a program to get numbers = 1,3,11,42,12,4001	"from collections import Iterable
highestnumber = -999
for i in numbers:
<TAB>if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
Write a function to merge two lists element wise	"

def merge_lists(l1: list, l2: list):
<TAB>return list(zip(l1, l2))
"
52. python function for finding the hyperbolic tangent value of a number	"def tanh(x):
<TAB>

<TAB>return math.tanh(x)
"
38. Python Program to Find Sum of Natural Numbers Using Recursion	"def recur_sum(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return n + recur_sum(n - 1)
"
53  write a python program to permutations of a given string in python and print the result	"from itertools import permutations
import string
s = ""GEEK""
a = string.ascii_letters
p = permutations(s)


d = []
for i in list(p):
<TAB>if (i not in d):
        d.append(i)
        print(''.join(i))
"
Write a python program to swap first and last element of a list . Print the final list	"
def swapList(newList):
<TAB>size = len(newList)

<TAB>
<TAB>temp = newList[0]
<TAB>newList[0] = newList[size - 1]
<TAB>newList[size - 1] = temp

<TAB>return newList


newList = [12, 35, 9, 56, 24]

print(swapList(newList))
"
Write a function to return the time taken by a given of moving object based of distance travelled in given time	"def cal_time(distance: float, speed: float) -> float:
<TAB>return distance / speed
"
Please generate a random float where the value is between 10 and 100 using Python math module.	"import random
print(random.random() * 100)
"
25. Python Program to Convert Decimal to Binary	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
"
write a Python program to demonstrate working of Extract Unique values dictionary values	"

test_dict = {'gfg': [5, 6, 7, 8],
             'is': [10, 11, 7, 5],
             'best': [6, 12, 10, 8],
             'for': [1, 2, 5]}


print(f""The original dictionary is : {test_dict}"")


res = sorted({ele for val in test_dict.values() for ele in val})


print(f""The unique values list is : {res}"")
"
Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included).	"def printTuple():
<TAB>li = list()
<TAB>for i in range(1, 21):
        li.append(i**2)
<TAB>print(tuple(li))
"
75 write a program to find the power of a number	"
a = 10
b = 3
result = a**b
print(a, "" to the power of "", b, "" is = "", result)
"
write a python function to split word into chars	"def split(word):
<TAB>return [char for char in word]
"
write python program that would merge two dictionaries by adding the second one into the first	"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)
"
write a python program that takes input a list and square root every term using list comprehension	"

s1 = eval(input(""Enter list ""))
print([i**0.5 for i in s1])
"
Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.	"def print_dict_keys_val_3():
<TAB>d = dict()
<TAB>for i in range(1, 21):
        d[i] = i**2
<TAB>for (k, v) in d.items():
        print(v)
"
write a python function that returns the square of a given input number	"def square(x):
<TAB>return x**2
"
Write a function to implement Pigeonhole Sort */	"def pigeonhole_sort(a):
<TAB>my_min = min(a)
<TAB>my_max = max(a)
<TAB>size = my_max - my_min + 1
<TAB>holes = [0] * size
<TAB>for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
<TAB>i = 0
<TAB>for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
<TAB>print(a[i], end="" "")
"
write a python program to print the ascii value of a string	"print([ord(ch) for ch in 'abc'])
"
write a python class called Person that has a name property	"class Person:
<TAB>def __init__(self, name):
        self.name = name
"
Write a program to calculate and print the volume of a cylinder	"r = 3
h = 5
pi = 3.14
volume = pi * (r**2) * h
print(volume)
"
Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0	"def root_type(a: float, b: float, c: float):
<TAB>if b**2 - 4 * a * c >= 0:
        return 'real'
<TAB>else:
        return 'imaginary'
"
Write a program to swap two variables inplace	"a, b = b, a
"
write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key	"square_dict = {}
for i in range(1, 11):
<TAB>square_dict[i] = i * i
"
a simple data-set	"sample = [1, 2, 3, 4, 5]
print(""variance of the sample is: "", variance(sample))
"
write Python program to demonstrate working of Cummulative Records Product	"

def prod(val):
<TAB>res = 1
<TAB>for ele in val:
        res *= ele
<TAB>return res


test_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]


print(""The original list : "" + str(test_list))
res = prod(int(j) for i in test_list for j in i)


print(""The Cummulative product of list is : "" + str(res))
"
11 print how many keys are in a dictionary python	"a = {'foo': 42, 'bar': 69}
print(len(a))
"
Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.	"first_array = [1, 2, 3, 4, 5, 6, 7]
second_array = [3, 7, 2, 1, 4, 6]


def finder(first_array, second_array):
<TAB>return(sum(first_array) - sum(second_array))


missing_number = finder(first_array, second_array)


print(missing_number)
"
Write a function to return the volume of a sphere	"def cal_sphere_volume(radius: float) -> float:
<TAB>pi = 3.14
<TAB>return (4 / 3) * pi * (radius**3)
"
48 function to show documentation	"def doc_func(*args, **kwargs):

<TAB>pass
"
23 write a function that returns the square root of the third power of every number in a list	"

def comp_power(lst):
<TAB>return list(map(lambda x: x ** 1.5, lst))
"
51 write a python program to check whether the values of a dictionary are in same order as in a list	"

test_dict = {""gfg"": 4, ""is"": 10, ""best"": 11, ""for"": 19, ""geeks"": 1}
sub_list = [4, 10, 11, 19, 1]

l = list(test_dict.values())

if l == sub_list:
<TAB>print(True)
else:
<TAB>print(False)
"
Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a	"def cal_displacement(initial_velocity: float, accelration: float, time: float) -> float:
<TAB>return initial_velocity * time + .5 * accelration * (time)**2
"
write a python program to use f string	"var1 = 'python language'
print(f'f-string is an good feature in {var1}')
"
removes leading characters	"word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")
"
write a python function to generate cryptographically strong pseudo-random data	"import secrets


def get_cryptographically_secure_data(n=101):
<TAB>return secrets.token_bytes(n), secrets.token_hex(n)
"
Write a function to return the lateral surface area of a cone	"def cal_cone_lateral_surf_area(height, radius):
<TAB>pi = 3.14
<TAB>return pi * radius * (((height**2) + (radius**2))**(1 / 2))
"
Write a python program to Check and print if string is palindrome using Stack	"

class Stack:
<TAB>def __init__(self):
        self.items = []

<TAB>def is_empty(self):
        return self.items == []

<TAB>def push(self, data):
        self.items.append(data)

<TAB>def pop(self):
        return self.items.pop()


s = Stack()
text = ""ABA""

for character in text:
<TAB>s.push(character)

reversed_text = ''
while not s.is_empty():
<TAB>reversed_text = reversed_text + s.pop()

if text == reversed_text:
<TAB>print('The string is a palindrome.')
else:
<TAB>print('The string is not a palindrome.')
"
Write Python Program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
      (celsius, fahrenheit))
"
write a python function to convert hours to seconds	"

def convert_to_seconds(num_hours):
<TAB>minutes = num_hours * 60
<TAB>seconds = minutes * 60
<TAB>return seconds
"
write a Python function to Find the Intersection of Two Lists	"def intersection(a, b):
<TAB>return list(set(a) & set(b))
"
Write a function to return the perimeter of a square	"def cal_perimeter_square(side):
<TAB>return 4 * side
"
Write a python function to remove an item from list	"def deleteelement(list, item):
<TAB>list.remove(item)
<TAB>return list
"
Define a function that can accept two strings as input and concatenate them and then print it in console.	"def add(s1, s2):
<TAB>print(s1 + s2)
"
Write a Python program to typecast given input to float	"num = float(input(""Input a value: ""))
print(num)
"
"write Python3 code to demonstrate working of Concatenating tuples to nested tuples using + operator + "", "" operator during initialization"	"
test_tup1 = (3, 4),
test_tup2 = (5, 6),

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
res = test_tup1 + test_tup2
print(""Tuples after Concatenating : "" + str(res))
"
write a python program to merge two dictionary	"

x = {'a': 1, 'b': 2}
y = {'c': 3, 'd': 4}


z = {**x, **y}
print(z)
"
write a python program to print bitwise XOR operation	"a = 60
b = 13
a_xor_b = a ^ b
print(a_xor_b)
"
31 get the most common number in python	"from statistics import mode
mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))
"
56 function to all implementation	"def all_imp(a):
<TAB>return all(a)
"
write a python function to return words in a sentence in sorted order	"def get_sorted_words(sentence):
<TAB>words = [word for word in sentence.split()]
<TAB>words.sort()
<TAB>return words
"
49 Write a generator that returns True / False randomly	"

import random


def generate_tf():
<TAB>rand = random.random()
<TAB>if rand > 0.5:
        yield True
<TAB>else:
        yield False
"
Convert decimal number to octal	"print('%o,' % (8))
"
Write a python function to Copy the Contents of One File into Another	"

def copy(from_file, to_file):
<TAB>with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)
"
write a Python function to check if a string is binary or not	"

def check2(string):

<TAB>t = '01'

<TAB>count = 0
<TAB>for char in string:

        if char not in t:
            count = 1
            break
        else:
            pass
<TAB>if count:
        print(""No, string is not binary"")
<TAB>else:
        print(""Yes, string is binary"")


string = ""001021010001010""


check2(string)
"
Write a Python function to calculate dot product of two given sequence	"

def dot_product(a, b):
<TAB>return sum(e[0] * e[1] for e in zip(a, b))
"
write a python function to return union of two sets	"def union_set(set1, set2):
<TAB>return set1 | set2
"
write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random
print(random.sample([i for i in range(1, 1001) if i %
                     5 == 0 and i % 7 == 0], 5))
"
write Python3 code to demonstrate Combining tuples in list of tuples Using list comprehension	"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]
print(""The original list : "" + str(test_list))
res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]
print(""The list tuple combination : "" + str(res))
"
Write a Python Program to Print the Pascal’s triangle for n number of rows given by the user	"

n = 10
a = []
for i in range(n):
<TAB>a.append([])
<TAB>a[i].append(1)
<TAB>for j in range(1, i):
        a[i].append(a[i - 1][j - 1] + a[i - 1][j])
<TAB>if(n != 0):
        a[i].append(1)
for i in range(n):
<TAB>print(""   "" * (n - i), end="" "", sep="" "")
<TAB>for j in range(0, i + 1):
        print('{0:6}'.format(a[i][j]), end="" "", sep="" "")
<TAB>print()
"
26. Python Program to Convert Decimal to Octal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")
"
write a python function that takes two strings as a parameter and prints the shorter one	"def print_shorter(str1, str2):
<TAB>if (len(str1) > len(str2)):
        print(str2)
<TAB>else:
        print(str1)
"
Write a program to print a given string, replacing all the vowels with '_'	"st = ""Where is this going? Could you please help me understand!""
vowels = ""AEIOUaeiou""


for v in vowels:
<TAB>st = st.replace(v, '_')


print(st)
"
write a python function to Calculate the date of n days from the given date.	"

from datetime import datetime, timedelta


def add_days(n, d=datetime.today()):
<TAB>return d + timedelta(n)
"
Write a Python function that calculate interior angle of a equilateral polygon	"

def interior_angle(no_of_sides):
<TAB>return (no_of_sides - 2) * 180 / no_of_sides
"
write a python program to extract the file name and extension of a file	"import os
filename, extension = os.path.splitext('/path/to/some/file.ext')
"
Write a python function to count the number of Words in a Text File	"def check_words():
<TAB>fname = input(""file name: "")
<TAB>num_words = 0
<TAB>with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
<TAB>print(""Number of words = "", num_words)
"
Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).	"def printList():
<TAB>li = list()
<TAB>for i in range(1, 21):
        li.append(i**2)
<TAB>print(li)
"
write a python program to remove words less than a specified length from a sentence	"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]
"
write a python program to print all integers that aren’t divisible by either 2 or 3 and lies between 1 and 50.	"for i in range(0, 50):
<TAB>if((i % 2 != 0) & (i % 3 != 0)):
        print(i)
"
Counting total Digits in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
<TAB>char = str1[i]
<TAB>if(char.isdigit()):
        digitCount += 1
print('Number of digits: ', digitCount)
"
Write a Python Program to Search the Number of Times a Particular Number Occurs in a List	"a = [2, 3, 2, 3, 4, 4, 5, 5, 6, 6, 6]
k = 0
num = 6
for j in a:
<TAB>if(j == num):
        k = k + 1
print(""Number of times"", num, ""appears is"", k)
"
write Python Program to print the Union of two Lists	"l1 = [11, 22, 33, 44]
l2 = [55, 66, 77, 88]
union = list(set().union(l1, l2))
print('The Union of two lists is:', union)
"
write Python function to Clear the Rightmost Set Bit of a Number	"def clear_rightmost_set_bit(n):
<TAB>return n & (n - 1)
"
34. Python Program to Map two lists into a Dictionary	"

keys = ['name', 'age', 'job']
values = ['John', 25, 'Developer']


myDict = {k: v for k, v in zip(keys, values)}
print(""Dictionary Items  :  "", myDict)
"
Write a program to to print the contents of a given file	"file_name = 'temp.txt'
with open(file_name, 'r') as f:
<TAB>print(f.read())
"
write a python function to convert a given string into a list of words.	"

import re


def words(s, pattern='[a-zA-Z-]+'):
<TAB>return re.findall(pattern, s)
"
write a program to add two matrix	"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
<TAB>raise ArithmeticError('Matrices are NOT the same size.')


C = []
while len(C) < rowsA:
<TAB>C.append([])
<TAB>while len(C[-1]) < colsB:
        C[-1].append(0.0)


for i in range(rowsA):
<TAB>for j in range(colsB):
        C[i][j] = A[i][j] + B[i][j]


print(""Added Array"")
for i in range(rowsA):
<TAB>row = '|'
<TAB>for b in range(colsA):
        row = row + ' ' + str(C[i][b])
<TAB>print(row + ' ' + '|')
"
Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case.	"

class IOString(object):
<TAB>def __init__(self):
        self.s = """"

<TAB>def getString(self):
        self.s = input()

<TAB>def printString(self):
        print(self.s.upper())


strObj = IOString()
strObj.getString()
strObj.printString()
"
write a program to calculate and print number of letters and digits in a string	"

str1 = ""python1234""

total_digits = 0
total_letters = 0

for s in str1:

<TAB>if s.isnumeric():
        total_digits += 1
<TAB>else:
        total_letters += 1

print(""Total letters found : "", total_letters)
print(""Total digits found : "", total_digits)
"
write a python function that chunks a list into smaller lists of a specified size	"

from math import ceil


def chunk(lst, size):
<TAB>return list(
        map(lambda x: lst[x * size:x * size + size],
            list(range(ceil(len(lst) / size)))))
"
Write a Python function that returns True if a string is empty and False otherwise.	"def is_empty(s):
<TAB>if s == """":
        return True
<TAB>else:
        return False
"
92 write a python program to sort list under tuples and print it	"

test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])
print(""The original tuple is : "" + str(test_tup))
s = tuple(sorted([j for j in i], reverse=False) for i in test_tup)
print(f'the sorted list inside tuple is {s}')
"
write a program for floating pointwrite a program	"print(f""Round off value : {round(51.6)}"")
"
write a python function to get the type of a variable	"def get_type(var):
<TAB>return(type(var))
"
write a python function that takes two lists and append second list after the first list	"lst1 = eval(input(""Enter list : ""))
lst2 = eval(input(""Enter list : ""))
print(lst1 + lst2)
"
Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.	"a = input()
n1 = int(""%s"" % a)
n2 = int(""%s%s"" % (a, a))
n3 = int(""%s%s%s"" % (a, a, a))
n4 = int(""%s%s%s%s"" % (a, a, a, a))
print(n1 + n2 + n3 + n4)
"
write program to convert string to lower case	"st = ""AMMAR ADIL""


lower_st = st.lower()
print(""Lower Case"", lower_st)
"
Write a Python function that returns the ASCII value of the passed in character.	"def ascii_value_of_character(char):
<TAB>return ord(char)
"
write a python function to convert byte to UTF-8	"def byte_to_utf8(data):
<TAB>return data.decode(""utf-8"")


print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))


def hanoi(disks, source, auxiliary, target):
<TAB>if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return

<TAB>hanoi(disks - 1, source, target, auxiliary)
<TAB>print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
<TAB>hanoi(disks - 1, auxiliary, source, target)
"
write a python class to instantiate an object with two string attributes and write a function to return the list of attributes	"class Myclass:
<TAB>def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2

<TAB>def get_attributes_list(self):
        return [self.attr1, self.attr2]


dress = Myclass(""pant"", ""shirt"")
dress.get_attributes_list()
"
write a python program to print current datetime	"from datetime import datetime


now = datetime.now()
print(now)
"
write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary	"def invert_dict_non_unique(my_dict):
<TAB>my_inverted_dict = dict()
<TAB>for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
<TAB>return my_inverted_dict
"
45 logging message	"def logging(msg, *, dt=datetime.utcnow()):
<TAB>print(f'message at {dt} was {msg}')
"
write a program to remove odd numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_odd_nums = [i for i in nums if i % 2 == 0]
"
43 write a program to convert kilometers to miles	"

kilometers = float(input('How many kilometers?: '))
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.3f kilometers is equal to %0.3f miles' % (kilometers, miles))
"
write a program to concat two list	"l1 = [1, 2, 3]
l2 = [4, 5, 6]


print(f'sum : {l1 + l2}')
"
Counting total lower Case in a string	"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0, len(str1)):
<TAB>char = str1[i]
<TAB>if(char.lower()):
        digitCount += 1
print('Number total lower Case: ', digitCount)
"
Returns the number of times the specified element appears in the list	"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)
"
Write a Python program that determines whether or not the following two sets have any elements in common. If yes display the common elements	"set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
if set1.isdisjoint(set2):
<TAB>print(""Two sets have no items in common"")
else:
<TAB>print(""Two sets have items in common"")
<TAB>print(set1.intersection(set2))
"
write a python function to reverse a user provided list or string	"

def reverse(itr):
<TAB>return itr[::-1]
"
write a program to sort a nested dictionary by a key and print the sorted dictionary	"test_dict = {'Nikhil': {'roll': 24, 'marks': 17},
             'Akshat': {'roll': 54, 'marks': 12},
             'Akash': {'roll': 12, 'marks': 15}}
sort_key = 'marks'
res = sorted(test_dict.items(), key=lambda x: x[1][sort_key])
print(""The sorted dictionary by marks is : "" + str(res))
"
Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.	"s = input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))
"
Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.	"value = []
items = [x for x in input().split(',')]
for p in items:
<TAB>intp = int(p, 2)
<TAB>if not intp % 5:
        value.append(p)


print(','.join(value))
"
write a program to terminate the program execution	"

import sys
sys.exit()
"
By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
write a python program to multiply two matrices	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]
for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
for r in result:
<TAB>print(r)
"
Write a function to calculate the total capacitance of capacitors in parallel in a given list	"def cal_total_cap_in_parallel(cap_list: list) -> float:
<TAB>return sum(cap_list)
"
write a python program to print a matrix as output	"

matrix = [[1, 2, 3, 4],
          [4, 5, 6, 7],
          [8, 9, 10, 11],
          [12, 13, 14, 15]]

for i in range(0, 4):
<TAB>print(matrix[i][1], end="" "")
"
write a python program to print names of the entries in the directory given by path	"path = '/home'
import os
print(os.listdir(path))
"
Write a Python function that returns biggest character in a string	"

from functools import reduce


def biggest_char(string):

<TAB>def biggest_chr(x, y): return x if ord(x) > ord(y) else y
<TAB>return reduce(biggest_chr, string)
"
write a python program to print binary left shift on a variable	"a = 60
binary_left_shift = a << 2
print(binary_left_shift)
"
equality operator works this way	"print('256 is 257-1', 256 is 257 - 1)
print('257 is 258-1', 257 is 258 - 1)
print('-5 is -6+1', -5 is -6 + 1)
print('-7 is -6-1', -7 is -6 - 1)
"
Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).	"squaredNumbers = map(lambda x: x**2, range(1, 21))
print(squaredNumbers)
"
write a function to check if a list is empty or not	"def list_is_empty(a_list):
<TAB>if not a_list:
        return True
<TAB>else:
        return False
"
Write a python function to Check whether triangle is valid or not if sides are given	"def checkValidity(a, b, c):
<TAB>if (a + b <= c) or (a + c <= b) or (b + c <= a):
        return False
<TAB>else:
        return True
"
14. python function to create adders	"def create_adders():
<TAB>adders = []
<TAB>for n in range(1, 4):
        adders.append(lambda x, y=n: x + y)
<TAB>return adders


adders = create_adders()
"
Write a function to return the volume of a cube	"def cal_cube_volume(side: float) -> float:
<TAB>return side**3
"
Write a function to calculate simple interest, given p, r, t	"

def simp_int(p, r, t):
<TAB>interest = (p * r * t) / 100
<TAB>return interest
"
Write a program that will determine the object type	"

def typeIdentifier(object):
<TAB>return f'object type : {type(object)}'
"
write a python function to find the area of a circle using the user provided circumference	"

def area_of_circle(circumference):
<TAB>circumference = float(circumference)
<TAB>PI = 3.14
<TAB>area = (circumference * circumference) / (4 * PI)
<TAB>print(f'Area Of a Circle {area}')
"
Calculate the length of dictionary	"thisdict = {
<TAB>""brand"": ""Ford"",
<TAB>""model"": ""Mustang"",
<TAB>""year"": 1964
}


print(f""Length of Dictionary:{len(thisdict)}"")
"
write a function to convert weight from kgs to pounds	"

def kgs_to_pounds(weight_kg):
<TAB>return weight_kg * 2.2
"
write a function which rearranges the elements such that all the negative elements appear on the left and positive elements appear at the right of the list. Note that it is not necessary to maintain the sorted order of the input list.	"def rearrange(lst):
<TAB>leftMostPosEle = 0
<TAB>
<TAB>for curr in range(len(lst)):
        
        if (lst[curr] < 0):
            
            if (curr is not leftMostPosEle):
                
                lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]
            
            leftMostPosEle += 1
<TAB>return lst
"
write a python function to determing the volume of a cube whose space diagonal measure is given	"
def CubeVolume(d):
<TAB>Volume = (1.73205 * pow(d, 3)) / 9
<TAB>return Volume
"
Write a Python function to return the second smallest number in a list and print it.Example:# input# second_smallest([1, 2, -8, -2, 0])# output# -2	"

def second_smallest(numbers):
<TAB>a1, a2 = float('inf'), float('inf')
<TAB>for x in numbers:
        if x <= a1:
            a1, a2 = x, a1
        elif x < a2:
            a2 = x
<TAB>return a2


print(second_smallest([1, 2, -8, -2, 0]))
"
Please generate a random float where the value is between 5 and 95 using Python math module.	"import random
print(random.random() * 100 - 5)
"
write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list	"def make_all_negative(nums):
<TAB>return [num if num < 0 else -num for num in nums]
"
Write a python program print all the integers that aren’t divisible by either 2 or 3 and lies between 1 and 25.	"for i in range(0, 25):
<TAB>if(i % 2 != 0 and i % 3 != 0):
        print(i)
"
write a python program to print week number from a date	"import datetime
print(datetime.date(2015, 6, 16).isocalendar()[1])


from datetime import date, timedelta


def all_sundays(year):
<TAB>dt = date(year, 1, 1)
<TAB>dt += timedelta(days=6 - dt.weekday())
<TAB>while dt.year == year:
        yield dt
        dt += timedelta(days=7)


for s in all_sundays(2020):
<TAB>print(s)
"
Calculate the sum of three given numbers, if the values are equal then return thrice of their sum	"def sum_thrice(x, y, z):
<TAB>sum1 = x + y + z
<TAB>if x == y == z:
        sum1 = sum1 * 3
<TAB>return sum1


print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))
"
write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module	"class Secure:
<TAB>def __init__(self):
        
        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)

<TAB>@ staticmethod
<TAB>def load_key():
        
        return open(""secret.key"", ""rb"").read()

<TAB>def encrypt_message(self, message):
        
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message

<TAB>def decrypt_message(self, encrypted_message):
        
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)
"
Write a Python function to return woodall numbers	"def woodall_number(n):
<TAB>if n >= 0:
        return n * 2 ** n - 1
"
write a function to execute a string containing Python code	"def execute_python_code(a_string):
<TAB>return exec(a_string)
"
Write a python program to print all the keys in a dictionary.	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(d.keys())
"
write a python program that prints the area of a rectangle	"length = 10
width = 5
print(f'Area: {length * width}')
"
37. Python Program to Make a Simple Calculator	"

def add(x, y):
<TAB>return x + y


def subtract(x, y):
<TAB>return x - y


def multiply(x, y):
<TAB>return x * y


def divide(x, y):
<TAB>return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")


while True:
<TAB>choice = input(""Enter choice(1/2/3/4): "")

<TAB>if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
<TAB>else:
        print(""Invalid Input"")
"
write a python program to print squares of numbers until 20	"for i in range(20):
<TAB>print(i * i)
"
Find the day of week of a given date?	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
write a python program to convert a set to a list	"myset = {1, 2, 4, 7}
mylist = list(myset)
"
Write a python program to Implement Counting sort and print the sorted list for the below list	"

def counting_sort(alist, largest):
<TAB>c = [0] * (largest + 1)
<TAB>for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1

<TAB>c[0] = c[0] - 1
<TAB>for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

<TAB>result = [None] * len(alist)

<TAB>for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1

<TAB>return result


alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)
"
48. Python Program to Illustrate Different Set Operations	"E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Union of E and N is"", E | N)
print(""Intersection of E and N is"", E & N)
print(""Difference of E and N is"", E - N)
print(""Symmetric difference of E and N is"", E ^ N)
"
Write a program to print the unique elements in a list	"my_list = [1, 2, 4, 5, 2, 3, 1, 5, 4, 7, 8, 2, 4, 5, 2, 7, 3]


print(set(my_list))
"
Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10).	"tp = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
li = list()
for i in tp:
<TAB>if tp[i] % 2 == 0:
        li.append(tp[i])
tp2 = tuple(li)
print(tp2)
"
write a function to find the sum of Sine series	"

import math


def sin(x, n):
<TAB>sine = 0
<TAB>for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
<TAB>return sine
"
write a python program to accept username and print hello along with the username	"

name = input()
print('Hello ' + name)
"
Write a lambda function to multiply two numbers	"

def multiply(a, b): return a * b
"
write a python function to random select from itertools.combinations(iterable, r)	"def random_combination(iterable, r):
<TAB>import random
<TAB>pool = tuple(iterable)
<TAB>n = len(pool)
<TAB>indices = sorted(random.sample(range(n), r))
<TAB>return tuple(pool[i] for i in indices)
"
Create and print a dictionary	"thisdict = {
<TAB>""brand"": ""Ford"",
<TAB>""model"": ""Mustang"",
<TAB>""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")
"
Write a Python function that takes the age and return the age in days.	"def calc_age(age):
<TAB>calculation = age * 365
<TAB>return calculation
"
Write a Python program to find the available built-in modules using sys and textwrap modules	"import sys
import textwrap
module_name = ', '.join(sorted(sys.builtin_module_names))
print(textwrap.fill(module_name, width=70))
"
Write a python function to simulate an exception and log the error using logger provided by the user.	"def exception_simulator(logger):
<TAB>try:
        raise ValueError
<TAB>except ValueError:
        logger.exception(""ValueError occured in the function"")
"
"84 Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class."	"class Person(object):
<TAB>def getGender(self):
        return ""Unknown""


class Male(Person):
<TAB>def getGender(self):
        return ""Male""


class Female(Person):
<TAB>def getGender(self):
        return ""Female""


aMale = Male()
aFemale = Female()
print(aMale.getGender())
print(aFemale.getGender())
"
write a python program which takes list as an input and calculate mean of given list of numbers	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
<TAB>sum = sum + i
mean = sum / len(lst)
print("" The mean of given list is :"", mean)
"
write a python function which takes length , breadth as user input and returns the area of rectangle.	"def rectangle_area(length, breadth):
<TAB>area = length * breadth
<TAB>return area
"
Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.	"def print_dict_keys_val_2():
<TAB>d = dict()
<TAB>for i in range(1, 21):
        d[i] = i**2
<TAB>print(d)
"
Write a function to return the median of numbers in a list	"def cal_median(num_list: list) -> float:
<TAB>if num_list:
        if len(num_list) % 2 != 0:
            return sorted(num_list)[int(len(num_list) / 2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list) / 2) - 1] + sorted(num_list)[int(len(num_list) / 2)]) / 2
<TAB>else:
        return None
"
write a python program to make use of enumerate method	"

for count, value in enumerate(obj):
<TAB>print(count, value)
"
11 write a program to rotate string left and right by d length	"def rotate(input, d):

<TAB>Lfirst = input[0: d]
<TAB>Lsecond = input[d:]
<TAB>Rfirst = input[0: len(input) - d]
<TAB>Rsecond = input[len(input) - d:]

<TAB>print(""Left Rotation : "", (Lsecond + Lfirst))
<TAB>print(""Right Rotation : "", (Rsecond + Rfirst))


if __name__ == ""__main__"":
<TAB>input = 'helloworld'
<TAB>d = 2
<TAB>rotate(input, d)
"
Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.	"import re
s = raw_input()
print(re.findall(""\d+"", s))
"
write a Python function to find sum of all items in a Dictionary	"

def returnSum(dict):

<TAB>sum = 0
<TAB>for i in dict.values():
        sum = sum + i

<TAB>return sum


dict = {'a': 100, 'b': 200, 'c': 300}
print(""Sum :"", returnSum(dict))
"
Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.	"values = []
for i in range(1000, 3001):
<TAB>s = str(i)
<TAB>if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
print("","".join(values))
"
Write a lambda function to convert centimeters to inches	"

def cm_to_inch(x): return x / 2.54
"
Write a program to accept a number and print inverted star pattern	"

n = int(input(""Enter number of rows: ""))
for i in range(n, 0, -1):
<TAB>print((n - i) * ' ' + i * '*')
"
write a program to generate a list with 5 random numbers between 100 and 200 inclusive.	"import random
print(random.sample(range(100), 5))
"
write a Python function to count the number of occurrences in list	"def countX(lst, x):
<TAB>return lst.count(x)


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
"Write a python function to find out the occurence of ""i"" element before first ""j"" in the list"	"

def firstOccurence(arr, i, j):
<TAB>res = 0
<TAB>for k in arr:
        if k == j:
            break
        if k == i:
            res += 1
<TAB>return res
"
write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using all() + list comprehension + isdigit()	"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")]
print(""The original list is : "" + str(test_list))
res = [sub for sub in test_list if all(ele.isdigit() for ele in sub)]
print(""Filtered Tuples : "" + str(res))
"
check if all char are alphanumeric	"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")
"
With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.	"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)
"
write a python function to calculate the age with the user provided date of birth	"

from datetime import date


def calculate_age(dtob):
<TAB>today = date.today()
<TAB>return today.year - dtob.year - ((today.month, today.day) < (dtob.month, dtob.day))
"
write a program to randomly print a integer number between 7 and 15 inclusive.	"import random
print(random.randrange(7, 16))
"
6. Write a python program to swap two variables, Using a temporary variable	"

x = 5
y = 10


temp = x
x = y
y = temp


print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
"Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class."	"class Person(object):
<TAB>def getGender(self):
        return ""Unknown""


class Male(Person):
<TAB>def getGender(self):
        return ""Male""


class Female(Person):
<TAB>def getGender(self):
        return ""Female""


aMale = Male()
aFemale = Female()
print(aMale.getGender())
print(aFemale.getGender())
"
write a python function that returns a list of elements that exist in both user provided lists.	"

def similarity(a, b):
<TAB>return [item for item in a if item in b]
"
Write a python program to print the uncommon elements in List	"

test_list1 = [[1, 2], [3, 4], [5, 6]]
test_list2 = [[3, 4], [5, 7], [1, 2]]

res_list = []
for i in test_list1:
<TAB>if i not in test_list2:
        res_list.append(i)
for i in test_list2:
<TAB>if i not in test_list1:
        res_list.append(i)

print(""The uncommon of two lists is : "" + str(res_list))
"
Write a python Program to Flatten and print a List	"

a = [[1, [[2]], [[[3]]]], [[4], 5]]
def flatten(l): return sum(map(flatten, l), []) if isinstance(l, list) else [l]


print(flatten(a))
"
50. python function for finding the derivative of logarithmic value of a number	"def dlog(x):

<TAB>return 1 / x
"
Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.	"lines = []
while True:
<TAB>s = raw_input()
<TAB>if s:
        lines.append(s.upper())
<TAB>else:
        break
for sentence in lines:
<TAB>print(sentence)
"
70 write a python program to extract Numerical Dictionary values and print it	"

test_dict = {""Gfg"": [""34"", ""45"", 'geeks'], 'is': [
<TAB>""875"", None, ""15""], 'best': [""98"", 'abc', '12k']}

res = []
for a, b, c in zip(*test_dict.values()):

<TAB>if a.isdigit():
        res.append((a, b, c))

print(""The Numerical values : "" + str(res))
"
Write a lambda function to find the union of two lists	"

def union(a, b): return list(set(a) | set(b))
"
Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.	"num = [10, 20, 30, 40, 50, 60, 70, 80, 90]
len_list = len(num)
position = 3 - 1
idx = 0
while len_list > 0:
<TAB>idx = (idx + position) % len_list
<TAB>print(num.pop(idx))
<TAB>len_list -= 1
"
write a python program to calculate the sum of numbers using reduce and print it	"from functools import reduce
nums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
total_sum = reduce(lambda a, b: a + b, nums)
print(f'Sum: {total_sum}')
"
write a python program to get indexes for each element in a list using enumerate	"
l1 = [""eat"", ""sleep"", ""repeat""]
for ele in enumerate(l1):
<TAB>print(ele)
"
write a function to accept a simple iterable and print the elements	"

def print_iter(iter):
<TAB>for item in iter:
        print(item)
"
modify the 1st element of the 2nd sublist	"my_list2[1][0] = 'a'
print(""after my_list2[1][0] = 'a':  ---> "", my_list2)


for a, b in zip(my_list1, my_list2):
<TAB>print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))
"
Write a python program to print a new set with all items from both sets by removing duplicates	"

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}


print(set1.union(set2))
"
Define a class which has at least two methods:	"class InputOutString(object):
<TAB>def __init__(self):
        self.s = """"

<TAB>def getString(self):
        self.s = input()

<TAB>def printString(self):
        print(self.s.upper())


strObj = InputOutString()
strObj.getString()
strObj.printString()
"
write a python function to identify the total counts of chars, digits,and symbols for given input string	"

def findDigitsCharsSymbols(inputString):
<TAB>charCount = 0
<TAB>digitCount = 0
<TAB>symbolCount = 0
<TAB>for char in inputString:
        if char.islower() or char.isupper():
            charCount += 1
        elif char.isnumeric():
            digitCount += 1
        else:
            symbolCount += 1

<TAB>print(""Chars = "", charCount, ""Digits = "",
          digitCount, ""Symbol = "", symbolCount)


inputString = ""P@#yn26at^&i5ve""
print(""total counts of chars, digits,and symbols \n"")


findDigitsCharsSymbols(inputString)
"
Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.	"def printValue(s1, s2):
<TAB>len1 = len(s1)
<TAB>len2 = len(s2)
<TAB>if len1 > len2:
        print(s1)
<TAB>elif len2 > len1:
        print(s2)
<TAB>else:
        print(s1)
        print(s2)
"
write a python program to find N largest elements from a list	"l = [1000, 298, 3579, 100, 200, -45, 900]
n = 4
l.sort()
print(l[-n:])
"
write a python program to subtract two numbers and print it	"num1 = 1.5
num2 = 6.3
difference = num1 - num2
print(f'Difference: {difference}')
"
76 write a program to print the binary value of the numbers from 1 to N	"

n = int(input(""Enter the value of N: ""))


for i in range(1, n + 1):
<TAB>print(""Binary value of "", i, "" is: "", bin(i))
"
write a function to check weather a number is prime or not	"

def isprime(num):
<TAB>for i in range(2, num):
        if num % i == 0:
            return False
<TAB>return True
"
Write a Python function to return binary value of a given integer	"def int_to_bin(a):
<TAB>return bin(a)
"
write a python function which takes length of sides as user input to calculate and return the area of a triangle	"

def triangle_area(a, b, c):
<TAB>s = (a + b + c) / 2
<TAB>area = (s(s - a) * (s - b) * (s - c)) ** 0.5
<TAB>return(area)
"
write a python function to remove last element in the list	"def remove_last_element_list(list1):
<TAB>list1.pop()
<TAB>return list1
"
write a python program to convert paragraph string into sentense case	"

a = 'hello. i am a sentence.'
a = '. '.join(i.capitalize() for i in a.split('. '))
print(a)
"
Write a python function to get the volume of a cuboid with length, breadth & height as input	"def cuboid_volume(length, breadth, height):
<TAB>volume = length * breadth * height
<TAB>return volume
"
write a python function to accept user input to continue	"def get_userinput():
<TAB>while(1):
        do_continue = raw_input('Do you want to continue(y/n)?')
        if do_continue == 'y' or do_continue == 'n':
            return do_continue
"
write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.	"test_list = [{'tsai': [1, 5, 6, 7], 'good': [9, 6, 2, 10], 'CS': [4, 5, 6]},
             {'tsai': [5, 6, 7, 8], 'CS': [5, 7, 10]},
             {'tsai': [7, 5], 'best': [5, 7]}]
res = dict()
for inner_dict in test_list:
<TAB>for inner_list in inner_dict:
        if inner_list in res:
            res[inner_list] += (inner_dict[inner_list])
        else:
            res[inner_list] = inner_dict[inner_list]
print(""The concatenated dictionary : "" + str(res))
"
write a program to calculate exponents of an input	"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')
"
We would think that identity would always imply equality, but this is not always true, as we can see in the next example:	"a = float('nan')
print('a is a,', a is a)
print('a == a,', a == a)
"
30. Write a python function to find HCf or GCD and return the value	"def compute_hcf(x, y):
<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf
"
30. Write a python function to find HCf or GCD and return the value	"def compute_hcf(x, y):

<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf
"
write a python function to return a set of all punctuation used in a string	"def get_punctuations(sentence):
<TAB>punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
<TAB>used_punctuation = set()
<TAB>for char in sentence:
        if char in punctuations:
            used_punctuation.add(char)
<TAB>return used_punctuation
"
"write a python function that finds square roots of a given number, if the square root is an integer, else returns the message ""Error - the square root is not an integer"""	"def find_integer_square_roots(num):
<TAB>found = False
<TAB>for k in range(1, (num // 2) + 1):
        if ((k**2) == num):
            found = True
            break
<TAB>if not found:
        return ""Error - the square root is not an integer""
<TAB>return -k, k
"
27 write a function to convert any number to its equivalent fractions.	"def no_to_fraction(no_):
<TAB>from fractions import Fractions
<TAB>return Fractions(no_)
"
Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken	"def cal_angular_velocity(angular_dist: float, time: float) -> float:
<TAB>return angular_dist / time
"
69 write a python program for printing custom order dictionary	"test_dict = {'is': 2, 'for': 4, 'gfg': 1, 'best': 3, 'geeks': 5}
ord_list = ['gfg', 'is', 'best', 'for', 'geeks']

c = {}
for i in ord_list:
<TAB>if i in test_dict:
        c.update({i: test_dict[i]})
print(c)
"
access Last characters in a string	"word = ""Hello World""
letter = word[-1]
print(f""First Charecter in String:{letter}"")
"
Split Strings	"word = ""Hello World""
ksplit = word.split(' ')
print(f""Splited Strings: {ksplit}"")
"
write a python program to swap two numbers and print it	"num1 = 5
num2 = 10
temp = num1
num1 = num2
num2 = temp
print(""The value of num1 after swapping: {}"".format(num1))
print(""The value of num2 after swapping: {}"".format(num2))
"
65 write a python program to extract item with Maximum Tuple Value	"

test_dict = {'gfg': (4, 6),
             'is': (7, 8),
             'best': (8, 2)}


tup_idx = 1

res = max(test_dict.items(), key=lambda ele: ele[1][tup_idx])
print(""The extracted maximum element item : "" + str(res))
"
write a Python program to print odd Numbers in a List	"
list1 = [10, 21, 4, 45, 66, 93]
only_odd = [num for num in list1 if num % 2 == 1]
print(""Odd numbers in the list: "", only_odd)
"
removes trailing characters	"word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")
"
84 Write a Python program to find maximum length of consecutive 0’s in a given binary string.	"def max_consecutive_0(input_str):
<TAB>return max(map(len, input_str.split('1')))


str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")
"
Please write a program which accepts basic mathematic expression from console and print the evaluation result.	"expression = input()
print(eval(expression))
"
Convert two lists into a dictionary	"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)
"
Write a Python function to Count and print the Number of Vowels Present in a String using Sets	"

def count_vowels(s):
<TAB>count = 0
<TAB>vowels = set(""aeiou"")
<TAB>for letter in s:
        if letter in vowels:
            count += 1
<TAB>return count
"
write a python program to return the biggest character in a string (printable ascii characters)	"from functools import reduce


input_str = 'tsai'
res = reduce(lambda x, y: x if ord(x) > ord(y) else y, input_str)
print(f""{res}"")
"
write a python function to remove duplicate items from the list	"def remove_duplicatesinlist(lst):
<TAB>return len(lst) == len(set(lst))
"
3. write a python Program to calculate the square root	"num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = filter(lambda x: x % 2 == 0, li)
print(evenNumbers)
"
write Python3 code to demonstrate working of Merge List value Keys to Matrix Using loop + pop()	"

test_dict = {'gfg': [4, 5, 6],
             'is': [8, 8, 9],
             'CS': [1, 3, 8],
             'Maths': [1, 2]}

print(""The original dictionary : "" + str(test_dict))


que_list = ['gfg', 'CS', 'Maths']


new_data = [test_dict.pop(ele) for ele in que_list]
test_dict[""merge_key""] = new_data

print(""The dictionary after merging : "" + str(test_dict))
"
Given an integer, , and  space-separated integers as input, create a tuple, , of those  integers. Then compute and print the result of .	"def hashing(num):
<TAB>T = tuple([int(i) for i in num.split()])
<TAB>return hash(T)


print(hashing(23456))
"
Define a class named American which has a static method called printNationality.	"class American(object):
<TAB>@ staticmethod
<TAB>def printNationality():
        print(""America"")


anAmerican = American()
anAmerican.printNationality()
American.printNationality()
"
Write a Python program to remove spaces from a given string using set	"def remove_duplicate(str1):
<TAB>list_str = str1.split()
<TAB>return """".join(set(list_str))
"
write a program to increment number which is at end of string	"

import re

str1 = 'count001'


res = re.sub(r'[0-9]+$',
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",
             str1)

print(""Incremented numeric String : "" + str(res))
"
write a program which prints all permutations of [1,2,3]	"import itertools
print(list(itertools.permutations([1, 2, 3])))
"
write python code to merge two dictionaries	"def merge_dict(dict1, dict2):
<TAB>return(dict2.update(dict1))


dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
merge_dict(dict1, dict2)
print(dict2)
"
write a function to convert tuple to list	"def convert_tuple2list(t):
<TAB>return list(t)
"
Write a function to get the Cumulative sum of a list	"
def Cumulative(lists):
<TAB>cu_list = []
<TAB>length = len(lists)
<TAB>cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
<TAB>return cu_list[1:]
"
Program to cyclically rotate an array by one	"

def cyclicRotate(input):
<TAB>print([input[-1]] + input[0:-1])
"
write a python function that returns the input list sorted in ascending order	"def sort_ascending(list_to_be_sorted):
<TAB>return sorted(list_to_be_sorted)
"
Write a Python function to Print an Identity Matrix	"

def print_identity_matrix(n):
<TAB>for i in range(0, n):
        for j in range(0, n):
            if(i == j):
                print(""1"", sep="" "", end="" "")
            else:
                print(""0"", sep="" "", end="" "")
        print()
"
write a program to print sum of all even numbers in a list	"

ls = [1, 2, 3, 4, 5, 6, 7, 8, 10, 22]
sum = 0
for i in ls:
<TAB>if i % 2 == 0:
        sum += i
print(sum)
"
Write a Program to implement validation of a Password	"class Password:
<TAB>def __init__(self, password):
        self.password = password

<TAB>def validate(self):
        vals = {
            'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),
            'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),
            'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),
            'Password must be at least 8 characters.': lambda s: len(s) >= 8,
            'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)
        }
        valid = True
        for n, val in vals.items():
            if not val(self.password):
                valid = False
                return n
        return valid


input_password = ""Ishwar@12Su@ 1'""
p = Password(input_password)
if p.validate() is True:
<TAB>print('Password Valid')
else:
<TAB>print(p.validate())
"
Write a python function to check if user provided year is a leap year or not	"

def is_leap(year):
<TAB>if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                print(f""{year} is a leap year"")
            else:
                print(f""{year} is not a leap year"")
        else:
            print(f""{year} is a leap year"")
<TAB>else:
        print(f""{year} is not a leap year"")
"
Create a Generator	"def generator(n=100000):
<TAB>my_gen = (i for i in range(n) if i % 5 == 0)
<TAB>return my_gen
"
Write a python function to join directory names to create a path	"def join_filename(base_dir, *args):
<TAB>file_path_args = [base_dir, *args]
<TAB>for file_name in file_path_args:
        if(isinstance(file_name, str) == False):
            raise TypeError
<TAB>return ""/"".join(file_path_args)
"
Write a Python Program to Check if a Number is a Prime Number	"

def prime_no_check(a):
<TAB>k = 0
<TAB>for i in range(2, a // 2 + 1):
        if(a % i == 0):
            k = k + 1
<TAB>if(k <= 0):
        return True
<TAB>else:
        return False
"
write a program to multiply two Matrix	"
X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]

Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):

<TAB>for j in range(len(Y[0])):

        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
write a program to find and print the smallest among three numbers	"
num1 = 10
num2 = 12
num3 = 14
if (num1 <= num2) and (num1 <= num3):
<TAB>smallest = num1
elif (num2 <= num1) and (num2 <= num3):
<TAB>smallest = num2
else:
<TAB>smallest = num3
print(f'smallest:{smallest}')
"
logical or logical and	"result = (2 or 3) * (5 and 7)
print('2 * 7 =', result)
"
Python program to compute sum of digits in number	"def sumDigits(no):
<TAB>return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))


n = 1234511
print(sumDigits(n))
"
write a python program to merge two dictionaries	"

dict_1 = {'apple': 9, 'banana': 6}
dict_2 = {'banana': 4, 'orange': 8}
combined_dict = {**dict_1, **dict_2}
print(combined_dict)
"
write a python program to find the smallest multiple of the first n numbers.	"

def smallest_multiple(n):
<TAB>if (n <= 2):
        return n
<TAB>i = n * 2
<TAB>factors = [number for number in range(n, 1, -1) if number * 2 > n]
<TAB>print(factors)
<TAB>while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
"
write a python program to get index values for a list in the form of key:value pair using enumerate	"

my_list = ['a', 'b', 'c', 'd', 'e']
for index, value in enumerate(my_list):
<TAB>print('{0}: {1}'.format(index, value))
"
Write a Python Program to Sort the List According to the Second Element in Sublist	"

a = [['A', 34], ['B', 21], ['C', 26]]
for i in range(0, len(a)):
<TAB>for j in range(0, len(a) - i - 1):
        if(a[j][1] > a[j + 1][1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
write a Python code demonstrate the working of sorted() with lambda	"

lis = [{""name"": ""Nandini"", ""age"": 20},
       {""name"": ""Manjeet"", ""age"": 20},
       {""name"": ""Nikhil"", ""age"": 19}]


print(""The list printed sorting by age: "")
print(sorted(lis, key=lambda i: i['age']))
print(""\r"")
"
write a python program to count the len of unique elements	"

nums = set([1, 1, 2, 3, 3, 3, 4, 4])
print(len(nums))
"
write a python program to print the factors of a number	"num = 320
for i in range(1, num + 1):
<TAB>if num % i == 0:
        print(i)
"
write a python program to remove duplicates from the list and print the result	"l = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 7, 8, 8, 0]
result = set(l)
print(""Result : "", result)
"
write a program to find sum of elements in list	"total = 0
print(f'sum: {sum([total + x for x in [1, 2, 3, 4, 5]])}')
"
86 Write a Python program to find the second smallest number in a list.	"def second_smallest(numbers):
<TAB>if (len(numbers) < 2):
        return
<TAB>if ((len(numbers) == 2) and (numbers[0] == numbers[1])):
        return
<TAB>dup_items = set()
<TAB>uniq_items = []
<TAB>for x in numbers:
        if x not in dup_items:
            uniq_items.append(x)
            dup_items.add(x)
<TAB>uniq_items.sort()
<TAB>return uniq_items[1]
"
Write a python function to generate a random password	"

import random


LOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z') + 1)))
UPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z') + 1)))
DIGITS = tuple(map(str, range(0, 10)))
SPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')


SEQUENCE = (LOWERCASE_CHARS,
            UPPERCASE_CHARS,
            DIGITS,
            SPECIALS,
            )


def generate_random_password(total, sequences):
<TAB>r = _generate_random_number_for_each_sequence(total, len(sequences))

<TAB>password = []
<TAB>for (population, k) in zip(sequences, r):
        n = 0
        while n < k:
            position = random.randint(0, len(population) - 1)
            password += population[position]
            n += 1
<TAB>random.shuffle(password)

<TAB>while _is_repeating(password):
        random.shuffle(password)

<TAB>return ''.join(password)


def _generate_random_number_for_each_sequence(total, sequence_number):
<TAB>
<TAB>current_total = 0
<TAB>r = []
<TAB>for n in range(sequence_number - 1, 0, -1):
        current = random.randint(1, total - current_total - n)
        current_total += current
        r.append(current)
<TAB>r.append(total - sum(r))
<TAB>random.shuffle(r)

<TAB>return r


def _is_repeating(password):
<TAB>
<TAB>n = 1
<TAB>while n < len(password):
        if password[n] == password[n - 1]:
            return True
        n += 1
<TAB>return False


if __name__ == '__main__':
<TAB>print(generate_random_password(random.randint(6, 30), SEQUENCE))
"
Given a Python list, remove all occurrence of a given number from the list	"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
<TAB>return [value for value in sampleList if value != val]


resList = removeValue(list1, num1)
print(resList)
"
Write a python program to return dict with {student:highest score} USING MAP+LAMBDA	"midterms = [80, 91, 78]
finals = [98, 89, 53]
students = ['dan', 'ang', 'kate']
final_grades = dict(
<TAB>zip(students, map(lambda pair: max(pair), zip(midterms, finals))))
"
write a python function to find leftmost item greater than or equal to x	"def find_ge(a, x):
<TAB>from bisect import bisect_left
<TAB>i = bisect_left(a, x)
<TAB>if i != len(a):
        return a[i]
<TAB>raise ValueError
"
73 write a python program to Convert Frequency dictionary to list and print it	"
test_dict = {'gfg': 4, 'is': 2, 'best': 5}

print(""The original dictionary : "" + str(test_dict))
s = []
for key, value in test_dict.items():
<TAB>for i in range(0, value):
        s.append(key)
print(s)
"
write a python program to deep flattens a nested list	"L = [1, 2, [3, 4], [5, 6, [7]]]


def flatten(L):
<TAB>for item in L:
        if isinstance(item, list):
            yield from flatten(item)
        else:
            yield item


print(list(flatten(L)))
"
Write a program to generate the Fibonacci sequence up to n-th term	"

nterms = int(10000)


n1, n2 = 0, 1
count = 0
fab_list = []
if nterms <= 0:
<TAB>print(""Please enter a positive integer"")
elif nterms == 1:
<TAB>print(""Fibonacci sequence upto"", nterms, "":"")
<TAB>print(n1)
else:
<TAB>while count < nterms:
        fab_list.append(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1


def fn(x): return ""FIBONACCI"" if x in fab_list else ""NOT_FIBONACCI""


print(""Given number is"", fn(20))
"
write a python program to get all possible permutations of size of the string in lexicographic sorted order.	"def get_ordered_permutations(word, k):
<TAB>[print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]
"
write a program to find factorinal of a number	"import math


number = 8
fa = math.factorial(number)
print('Factorial', fa)
"
Write a Python program to sort a list of tuples by second Item	"def Sort_Tuple(tup):

<TAB>return(sorted(tup, key=lambda x: x[1]))


tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]


print(Sort_Tuple(tup))
"
"Define a function that can accept an integer number as input and print the ""It is an even number"" if the number is even, otherwise print ""It is an odd number""."	"def even_or_odd_num(n):
<TAB>if n % 2 == 0:
        print(""It is an even number"")
<TAB>else:
        print(""It is an odd number"")
"
write a python program to print the ascii value of a character	"str1 = 'a'
print(ord(str1))
"
Write a Python program that removes items from set1 that are not common to both set1 and set2	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)
"
Write a python function to remove all non-alphabets except space from a given string using re library	"import re


def extract_not_alpha(my_string):
<TAB>return re.sub('[^a-zA-Z\s]+', """", my_string)
<TAB>
"
write a Python program to Break a list into chunks of size N in Python	"

l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = 4
x = [l[i:i + n] for i in range(0, len(l), n)]
print(x)
"
Write a Python function to return Pell's Sequence	"def pell_seq(n):
<TAB>if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * pell_seq(n - 1) + pell_seq(n - 2)
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"

def count_blank_space(fname):
<TAB>k = 0
<TAB>with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isspace):
                        k = k + 1
<TAB>return k
"
Check if there is a value for a key in JSON	"import json


studentJson = """"""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
<TAB>print(""value is present for given JSON key"")
<TAB>print(student.get('email'))
else:
<TAB>print(""value is not present for given JSON key"")
"
write Python program to demonstrate ternary operator using tuples, Dictionary and lambda	"a, b = 10, 20
print((b, a)[a < b])
print({True: a, False: b}[a < b])
print((lambda: b, lambda: a)[a < b]())
"
Write a python program to swap cases in a string and print. In other words, convert all lowercase letters to uppercase letters and vice versa and print the result #Example:input:InDiAaa #Output: iNdIaAA	"

s = input()
print(s.swapcase())
"
55 Write a python program that pads a given python list to a given length at the start and prints the modified list	"

def pad_arr_start(arr, pad_len):
<TAB>pad_arr = [0] * (pad_len - len(arr))
<TAB>pad_arr.extend(arr)
<TAB>return pad_arr


tmp = [1, 2, 3, 4, 5]
x = pad_arr_start(tmp, 10)
print(x)
"
Write a Python program to find the first repeated word in a given string.	"def first_repeated_word(str1):
<TAB>temp = set()
<TAB>for word in str1.split():
        if word in temp:
            return word
        else:
            temp.add(word)
<TAB>return 'None'
"
Write a python function that Print all the Numbers Present in the Text File	"

def print_number(fname):
<TAB>with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)
"
write a Python function to find the volume of Icosahedron	"

def findVolume(a):

<TAB>volume = ((5 / 12)
             * (3 + 5 ** 0.5)
              * a * a * a)
<TAB>return volume


a = 5


print(""Volume: "", findVolume(a))
"
Write a python function that takes a small character string and shifts all characters by 5	"

def shift_n_letters(letter, n):
<TAB>return chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter) >= 97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)


name = ""hello""


res = """".join([shift_n_letters(x, 5) for x in name])


print('Resulting string', res)
"
Write a Python program to Multiply two list and print the resultant list	"test_list1 = [1, 3, 4, 6, 8]
test_list2 = [4, 5, 6, 2, 10]
res_list = []
for i in range(0, len(test_list1)):
<TAB>res_list.append(test_list1[i] * test_list2[i])
print(""Resultant list is : "" + str(res_list))
"
write Python Program to Read the Contents of a File in Reverse Order	"filename = input(""Enter file name: "")
for line in reversed(list(open(filename))):
<TAB>print(line.rstrip())
"
9 sort a dictionary	"mydictionary: {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())
"
write a python function to sort list using heapq	"def heapsort(iterable):
<TAB>from heapq import heappush, heappop
<TAB>h = []
<TAB>for value in iterable:
        heappush(h, value)
<TAB>return [heappop(h) for i in range(len(h))]
"
write a python program that would swap variable values	"a = 10
b = 15
a, b = b, a
"
Write a Python program to create one-hot encodings of a categorical variable	"import pandas as pd
import numpy as np
df = pd.DataFrame(np.arange(25).reshape(5, -1), columns=list('abcde'))
df_onehot = pd.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)
print(df_onehot)
"
write a python program to add two matrices	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]
result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]
for i in range(len(X)):
<TAB>for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]
for r in result:
<TAB>print(r)
"
Write a python function to break a list into chunks of size N use generator	"my_list = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']


def divide_chunks(l, n):
<TAB>for i in range(0, len(l), n):
        yield l[i:i + n]
"
Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them	"def cal_gforce(mass1: float, mass2: float, distance: float) -> float:
<TAB>g = 6.674 * (10)**(-11)
<TAB>return (g * mass1 * mass2) / (distance**2)
"
Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.	"class Shape(object):
<TAB>def __init__(self):
        pass

<TAB>def area(self):
        return 0


class Square(Shape):
<TAB>def __init__(self, l):
        Shape.__init__(self)
        self.length = l

<TAB>def area(self):
        return self.length * self.length


aSquare = Square(3)
print(aSquare.area())
"
Write a function that returns a dictionary sorted ascending by its values	"def ascending_dict_valuesort(d: dict):
<TAB>return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[1])}
"
write a program to remove duplicate elements in a list and print the list	"

test_list = [1, 3, 5, 6, 3, 5, 6, 1]
print(""The original list is : "" + str(test_list))

res = []
for i in test_list:
<TAB>if i not in res:
        res.append(i)

print(""The list after removing duplicates : "" + str(res))
"
Python 3 program to find time for a given angle.	"

def calcAngle(hh, mm):
<TAB>hour_angle = 0.5 * (hh * 60 + mm)
<TAB>minute_angle = 6 * mm
<TAB>angle = abs(hour_angle - minute_angle)
<TAB>angle = min(360 - angle, angle)
<TAB>return angle
"
write a function which takes in a list and a number as an input and returns a list with each list element raised to power of that number	"def powered_list(a_list, a_number):
<TAB>a_list = [math.pow(a_number) for i in a_list]
<TAB>return a_list
"
write a Python Recursive function to solve the tower of hanoi	"
def TowerOfHanoi(n, source, destination, auxiliary):
<TAB>if n == 1:
        print(""Move disk 1 from source"", source, ""to destination"", destination)
        return
<TAB>TowerOfHanoi(n - 1, source, auxiliary, destination)
<TAB>print(""Move disk"", n, ""from source"", source, ""to destination"", destination)
<TAB>TowerOfHanoi(n - 1, auxiliary, destination, source)


n = 4
TowerOfHanoi(n, 'A', 'B', 'C')
"
write a python function to generate SHA256 for given text	"def get_sha256(text):
<TAB>import hashlib
<TAB>return hashlib.sha256(text).hexdigest()
"
write a function to return the square of first N numbers	"def get_squares(n):
<TAB>return [i * i for i in range(n)]
"
write a python program to check a num is less than 1000	"

def near_thousand(n):
<TAB>return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))


print('near to 1000', near_thousand(1000))
print('near to 1300', near_thousand(1300))
"
73 function to store the data of IPL match in Namedtuple	"def store_ipl_date(tuple1):
<TAB>from collections import namedtuple
<TAB>IplData = namedtuple(
        'IplData', 'match toss choice session1 session2 winner')
<TAB>return IplData(*tuple1)
"
write a python function to check user provided number is prime or not and print the result	"def primeornot(num):
<TAB>if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                print(num, ""is not a prime number"")
                break
        else:
            print(num, ""is a prime number"")
<TAB>else:
        print(num, ""is not a prime number"")


primeornot(7)
"
21 write a function that removes all the punctuations from a string	"

import string


def remove_punct(s):
<TAB>return """".join(ch for ch in s if ch not in set(string.punctuation))
"
write a Python function to convert Fraction to Mixed Number	"

def reduce_frac(n, d):
<TAB>for i in range(min(n, d), 0, -1):
        if not n % i and not d % i:
            return '{}/{}'.format(n // i, d // i)


def mixed_number(frac):
<TAB>n, d = map(int, frac.lstrip('-').split('/'))
<TAB>sign = '-' if frac.startswith('-') else ''

<TAB>if not n % d:
        return sign + str(n // d)
<TAB>n, r = divmod(n, d)
<TAB>return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')


print(mixed_number(""5/4""))
"
write a python program which takes a list and swaps the first and last value of the list.	"a = []
n = int(input(""Enter the number of elements in list:""))
for x in range(0, n):
<TAB>element = int(input(""Enter element"" + str(x + 1) + "":""))
<TAB>a.append(element)
temp = a[0]
a[0] = a[n - 1]
a[n - 1] = temp
print(""New list is:"")
print(a)
"
write a program to convert a list of dictionary to list of tuples and print it.	"ini_list = [{'a': [1, 2, 3], 'b':[4, 5, 6]},
            {'c': [7, 8, 9], 'd':[10, 11, 12]}]
temp_dict = {}
result = []
for ini_dict in ini_list:
<TAB>for key in ini_dict.keys():
        if key in temp_dict:
            temp_dict[key] += ini_dict[key]
        else:
            temp_dict[key] = ini_dict[key]
for key in temp_dict.keys():
<TAB>result.append(tuple([key] + temp_dict[key]))
print(""Resultant list of tuples: {}"".format(result))
"
Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.	"values = raw_input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
Write a python Class to calculate Perimeter of a circle and print the vale for a radius	"

class CirclePerimeter():
<TAB>def __init__(self, radius):
        self.radius = radius

<TAB>def perimeter(self):
        return 2 * 3.14 * self.radius


a = 6
obj = CirclePerimeter(a)
print(""Perimeter of rectangle:"", obj.perimeter())
"
write Python3 code to demonstrate Remove Rear K characters from String List using list comprehension + list slicing	"

test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils']


print(""The original list : "" + str(test_list))


K = 4


res = [sub[: len(sub) - K] for sub in test_list]


print(""The list after removing last characters : "" + str(res))
"
write a program to find exponential of a number	"import math


number = 3


print('Exponential', math.exp(number))
"
Write a Python function to count number of lists in a list of lists	"def countList(lst):
<TAB>count = 0
<TAB>for el in lst:
        if type(el) == type([]):
            count += 1
<TAB>return count
"
write a python program that takes input number of lines and finds the possible number of intersection	"def countMaxIntersect(n):
<TAB>return int(n * (n - 1) / 2)
"
Write a Python function to find the BMI for given weight and height of a person	"def bmi_calculator(height, weight):
<TAB>bmi = weight / (height**2)
<TAB>return bmi
"
write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.	"def EvenGenerator(n):
<TAB>i = 0
<TAB>while i <= n:
        if i % 2 == 0:
            yield i
        i += 1


n = int(raw_input())
values = []
for i in EvenGenerator(n):
<TAB>values.append(str(i))
print("","".join(values))
"
write a python function to subtract two user provided numbers and return the result	"def sub_two_numbers(num1, num2):
<TAB>sub = num1 - num2
<TAB>return sub
"
write a python function that accepts a list of dictionaries and sorts it by a specified key	"def sort_dict_list(dict_list, sort_key):
<TAB>dict_list.sort(key=lambda item: item.get(sort_key))
"
44 write a python program to  rotate dictionary by K	"
test_dict = {1: 6, 8: 1, 9: 3, 10: 8, 12: 6, 4: 9}

K = 2
test_dict = list(test_dict.items())
res = [test_dict[(i - K) % len(test_dict)]
       for i, x in enumerate(test_dict)]

res = {sub[0]: sub[1] for sub in res}
print(""The required result : "" + str(res))
"
write a python program that iterates over a dictionary and prints its keys and values	"a = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4}
for k, v in a.items():
<TAB>print(k, v)
"
46. Python Program to Remove Punctuations From a String	"

punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
<TAB>if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)
"
Write a python program to generate a random number between 1 and 9 (including 1 and 9) and Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.	"import random
import math


x = math.floor((random.random() * 10) + 1)
guess = 0
while guess != x:
<TAB>guess = int(input(""Guess a number: ""))
<TAB>if(guess == x):
        print(""you got It!"")
        print(""Number is "", x)
        break
<TAB>elif(guess > x):
        print(""You Guesses too high!"")
<TAB>else:
        print(""You guessed too low!"")
"
write a python function to return the sum of first n numbers	"def sum_of_nums(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return n + sum_of_nums(n - 1)
"
Write a Python function to Find the Power of a Number Using Recursion	"

def power(base, exp):
<TAB>if(exp == 1):
        return(base)
<TAB>if(exp != 1):
        return(base * power(base, exp - 1))
"
write a python program for basic HTML parser	"from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
<TAB>def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])


parser = MyHTMLParser()


for i in range(int(input())):
<TAB>parser.feed(input())
"
20 how to check if a list is a subset of another list	"if(all(x in test_list for x in sub_list)):
<TAB>flag = True
"
write a python program which prints a random number	"import random
n = random.random()
print(n)
"
write a python program to do lstrip on string	"

print('xyyzxxyxyy'.lstrip('xyy'))
"
Write a program to get a list of locally installed Python modules	"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
                                  for i in installed_packages])
for m in installed_packages_list:
<TAB>print(m)
"
Write a function that returns sum of all odd elements in the list	"def sum_even_elements(l: list):
<TAB>return sum([i for i in l if i % 2 == 0])
"
write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.	"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)]
res = {}
for i, j in test_list:
<TAB>res.setdefault(j, []).append(i)
print(""The dictionary converted from tuple list : "" + str(res))
"
Write a Python Program to print all the Divisors of an Integer	"

n = 60
print(""The divisors of the number are:"")
for i in range(1, n + 1):
<TAB>if(n % i == 0):
        print(i)
"
write a python function which takes two list of same length as input and return a dictionary with one as keys and other as values.	"

keys = eval(input(""Enter key list : ""))
values = eval(input(""Enter value list : ""))


def fn(keys, values):
<TAB>return {keys[i]: values[i] for i in range(len(keys))}
"
10 write a python function to return the median of a list	"

def calc_median(arr):
<TAB>arr = sorted(arr)
<TAB>if len(arr) / 2 == 0:
        return arr[len(arr) / 2]
<TAB>else:
        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2
"
26 write a program to calculate the root of a nonlinear equation using Newton's method	"

class NewtonRaphsonSolver:
<TAB>def __init__(self, f, x, dfdx, min_tol=1e-3):
        self.func = f
        self.x = x
        self.derivative = dfdx
        self.min_tol = min_tol

<TAB>def calculate(self):
        func_val = self.func(self.x)
        iterations = 0
        while abs(func_val) > self.min_tol and iterations < 100:
            self.x = self.x - float(func_val) / self.derivative(self.x)
            func_val = self.func(self.x)
            iterations += 1

        if iterations <= 100:
            return self.x
        else:
            return None


def f(x):

<TAB>return x ** 4 - 16


def dfdx(x):
<TAB>return 4 * x ** 3


nrs = NewtonRaphsonSolver(f, 10, dfdx)
print(nrs.calculate())
"
15 write a function to implement a binary tree	"

class BinTree:
<TAB>def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
"
Write a Python program to sort a tuple by its float element.	"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print(sorted(price, key=lambda x: float(x[1]), reverse=True))
"
Write a program to print bit wise AND of two numbers	"a = 60            
b = 13            


c = a & b        
print(""AND"", c)
"
Write a function to return the perimeter of a isoscales triangle	"def cal_perimeter_iso_triangle(s1, s2):
<TAB>return 2 * s1 + s2
"
2. write a python program to subtract two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')
"
write Python3 code to demonstrate conversion of list of tuple to list of list using list comprehension + join()	"

test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'),
             ('G', 'E', 'E', 'K', 'S')]
print(""The original list is : "" + str(test_list))
res = [''.join(i) for i in test_list]
print(""The list after conversion to list of string : "" + str(res))
"
Global Scope Representation	"x = 0


def in_func1():
<TAB>x = 1
<TAB>print('in_func1:', x)


print('global:', x)
"
write a python program to find index of max element	"

lst = [40, 10, 20, 30]


def maxIndex(lst):
<TAB>return max(range(len(lst)), key=lst.__getitem__)


print(maxIndex(lst))
"
write a python program to print a dictionary where the keys are numbers between 1 and 10 (both included) and the values are square of keys.	"

d = dict()
for x in range(1, 11):
<TAB>d[x] = x**2
print(d)
"
Write a function to find power of number using recursion	"def power(N, P):
<TAB>if (P == 0 or P == 1):
        return N
<TAB>else:
        return (N * power(N, P - 1))


print(power(5, 2))
"
write a python program that prints the circumference of a circle	"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')
"
Please write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
Write a function to convert Miles to Kilometers	"def Miles_to_Kilometers(m):
<TAB>conv_fac = 0.621371
<TAB>kilometers = m / conv_fac
<TAB>return kilometers
"
write a python function which takes input a string and returns whether is is a palindrome or not	"

def isPalindrome(s):
<TAB>return s == s[::-1]
"
75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.	"n = 0
for i in range(1, 500):
<TAB>if not i % 5 or not i % 3:
        n = n + i
print(n)
"
Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits	"

a = 2
b = 9
c = 5
d = []
d.append(a)
d.append(b)
d.append(c)
for i in range(0, 3):
<TAB>for j in range(0, 3):
        for k in range(0, 3):
            if(i != j & j != k & k != i):
                print(d[i], d[j], d[k])
"
write a python program to Print Quotient and Remainder of two numbers	"a = 15
b = 4
quotient = a // b
remainder = a % b
print(""Quotient is:"", quotient)
print(""Remainder is:"", remainder)
"
Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat	"

a = ['the', 'tsai', 'python', 'a', 'the', 'a']
c = []
count = 0
b = 'a'
n = 3
for i in a:
<TAB>if(i == b):
        count = count + 1
        if(count != n):
            c.append(i)
<TAB>else:
        c.append(i)
if(count == 0):
<TAB>print(""Item not found "")
else:
<TAB>print(""The number of repetitions is: "", count)
<TAB>print(""Updated list is: "", c)
<TAB>print(""The distinct elements are: "", set(a))
"
write Python program to illustrate enumerate function	"l1 = [""eat"", ""sleep"", ""repeat""]
s1 = ""geek""


obj1 = enumerate(l1)
obj2 = enumerate(s1)


print(""Return type:"", type(obj1))
print(list(enumerate(l1)))


print(list(enumerate(s1, 2)))
"
Write a python function to generate random number between 2 integers	"def random_number(a, b):
<TAB>import random
<TAB>return random.randint(a, b)
"
write a Python program to reverse a linked list	"

class Node:

<TAB>def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:

<TAB>def __init__(self):
        self.head = None

<TAB>def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev

<TAB>def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

<TAB>def printList(self):
        temp = self.head
        while(temp):
            print(temp.data)
            temp = temp.next


llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)


print(""Given Linked List"")
llist.printList()
llist.reverse()
print(""\nReversed Linked List"")
llist.printList()
"
write a program to reverse the list elemnets	"

list_ = [40, 0, 1, 29, 3]
rev_list = list_[::-1]
print(f'reversed list: {rev_list}')
"
60 function to use global varibale implementation	"def gloabl_use(n):
<TAB>global val
<TAB>return val * n
"
Write a function to find the area of square	"

def square_area(a):
<TAB>return a * a
"
write a python function to find rightmost value less than or equal to x	"def find_le(a, x):
<TAB>from bisect import bisect_right
<TAB>i = bisect_right(a, x)
<TAB>if i:
        return a[i - 1]
<TAB>raise ValueError
"
write a python program to print all prime numbers in a given interval	"lower = 900
upper = 1000
for num in range(lower, upper + 1):
<TAB>if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
write a program to find sin of a number	"import math


num = 45
print(""Sin"", math.sin(num))
"
Write a Python function that shifts the character of strings	"

def char_shift(string, shift_count):
<TAB>
<TAB>return """".join([chr(ord(x) + shift_count) if (ord(x) + shift_count) <= 122 else chr(96 + (ord(x) + shift_count) - 122) for x in string])
"
write a python function to compute minimum number of rotations required to get the same string	"def findRotations(str):
<TAB>tmp = str + str
<TAB>n = len(str)
<TAB>for i in range(1, n + 1):
        substring = tmp[i: i + n]
        if (str == substring):
            return i
<TAB>return n
"
write a python program to print 5 random integers between 10 and 20	"import random
print(random.sample(range(10, 20), 5))
"
write a python funtion that takes input principle, rate, time and calculate compound intrest	"

def compound_interest(principle, rate, time):

<TAB>Amount = principle * (pow((1 + rate / 100), time))
<TAB>CI = Amount - principle
<TAB>print(""Compound interest is"", CI)
"
Sort the string list alphabetically	"

thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")


set1 = {""a"", ""b"", ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")


x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")


x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
Write a Python Program to print the Number of Times a Particular Number Occurs in a List	"

a = [2, 3, 8, 9, 2, 4, 6]
k = 0
num = int(input(""Enter the number to be counted:""))
for j in a:
<TAB>if(j == num):
        k = k + 1
print(""Number of times"", num, ""appears is"", k)
"
write a python function to return an iterator over the last n items	"def tail(n, iterable):
<TAB>from collections import deque
<TAB>return iter(deque(iterable, maxlen=n))
"
write a Python function to return the volume of the rectangular right wedge	"def volumeRec(a, b, e, h):
<TAB>return (((b * h) / 6) * (2 * a + e))


a = 2
b = 5
e = 5
h = 6
print(""Volume = "", volumeRec(a, b, e, h))
"
52 zip two tuple	"def zip_to_tuple(tup1, tup2):
<TAB>return zip(tup1, tup2)
"
write Python code to remove all strings from a list of tuples	"listOfTuples = [('string', 'Geeks'), (2, 225),
                (3, '111'), (4, 'Cyware'), (5, 'Noida')]
output = [tuple(j for j in i if not isinstance(j, str)) for i in listOfTuples]


print(output)
"
Write a function to return the nth prime number	"def nth_prime_number(n):
<TAB>prime_list = [2]
<TAB>num = 3
<TAB>while len(prime_list) < n:
        for p in prime_list:
            if num % p == 0:
                break
        else:
            prime_list.append(num)
            num += 2
<TAB>return prime_list[-1]
"
write a python function that returns biggest character in a string	"from functools import reduce


def biggest_char(string):
<TAB>if not isinstance(string, str):
        raise TypeError
<TAB>return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)
"
write a python function to return the number of whitespace separated tokens	"

def tokenise(string):
<TAB>return len(string.split())
"
Write a python function to get the volume of a cylinder with radius & height as input	"def cylinder_volume(radius, height):
<TAB>volume = 3.14 * (radius ** 2) * height
<TAB>return volume
"
By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
write a python function to compute the HCF of two numbers	"def hcf(x, y):

<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf
"
write a function to remove i-th indexed character in a given string	"

def remove_char(string, i):

<TAB>str1 = string[: i]

<TAB>str2 = string[i + 1:]

<TAB>return str1 + str2
"
write a Python program to print all the prime numbers within an interval	"lower = 900
upper = 1000
print(""Prime numbers between"", lower, ""and"", upper, ""are:"")
for num in range(lower, upper + 1):
<TAB>if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
Write a Python program to append a list to the second list.	"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
"
Write a Python program to print the calendar of any given year	"import calendar
year = 2020
print(calendar.calendar(year))
"
write a python program for implementation of selection sort of list	"A = [64, 25, 12, 22, 11]


for i in range(len(A)):

<TAB>min_idx = i
<TAB>for j in range(i + 1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j

<TAB>A[i], A[min_idx] = A[min_idx], A[i]


print(f""Sorted array {A}"")
"
Write a function to return the perimeter of a rectangle	"def cal_perimeter_rect(length, bredth):
<TAB>return 2 * (length + bredth)
"
Write a Python function to calculate factorial of a given no using class	"

class Fact:
<TAB>def __init__(self):
        self.cache = {0: 1, 1: 1}

<TAB>def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n - 1) * n
        return self.cache[n]
"
Write a python program that maps list of words into a list of integers representing the lengths of the corresponding words	"

lst = [""ab"", ""cde"", ""erty""]
length_list = list(map((lambda element: len(element)), lst))
print(str(length_list))
"
write a python program to print only dictionary keys as list	"

d = {""john"": 40, ""peter"": 45}
print(list(d.keys()))
"
Python program to make a chain of function decorators (bold, italic, underline etc.	"

def make_bold(fn):
<TAB>def wrapped():
        return ""<b>"" + fn() + ""</b>""

<TAB>return wrapped


def make_italic(fn):
<TAB>def wrapped():
        return ""<i>"" + fn() + ""</i>""

<TAB>return wrapped


def make_underline(fn):
<TAB>def wrapped():
        return ""<u>"" + fn() + ""</u>""

<TAB>return wrapped


@ make_bold
@ make_italic
@ make_underline
def hello():
<TAB>return ""hello world""


print(hello())
"
25 print binary of a decimal number	"a = 6
print(bin(a))
"
7. Write a python program to swap two variables, Without Using Temporary Variable	"

x = 5
y = 10


x, y = y, x
print(""x ="", x)
print(""y ="", y)
"
Don't use mutable objects as default arguments for functions!	"def append_to_list(value, def_list=[]):
<TAB>def_list.append(value)
<TAB>return def_list


my_list = append_to_list(1)
print(my_list)


my_other_list = append_to_list(2)
print(my_other_list)
"
write a Python function to find all string which are greater than given length k	"

def string_k(k, str):

<TAB>string = []

<TAB>text = str.split("" "")

<TAB>for x in text:

        if len(x) > k:

            string.append(x)

<TAB>return string


k = 3
str1 = ""geek for geeks""
print(string_k(k, str1))
"
write a python function to calculate simple Interest	"def simple_interest(p, t, r):

<TAB>si = (p * t * r) / 100
<TAB>return si
"
Write python function to convert a given string to either lower, upper and capitalize	"

def string_opertaion(st, conversion):
<TAB>if(conversion == 'lower'):
        return(st.lower())
<TAB>elif(conversion == 'upper'):
        return(st.upper())
<TAB>else:
        return(st.capitalize())


string_opertaion('AwesOME', None)
"
63 Write a python function which returns true if all the numbers in a list negative, else return False	"

def are_all_negative(arr):
<TAB>filt_arr = list(filter(lambda x: x < 0, arr))
<TAB>if len(filt_arr) == len(arr):
        return True
<TAB>else:
        return False
"
Write a function to return the cartisian distance of a point from origin	"def cal_dist_from_orign(x: float, y: float) -> float:
<TAB>return (x**2 + y**2)**(1 / 2)
"
Write a python function to extract URLs from a sentence	"

import re


def FindUrls(string):
<TAB>regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
<TAB>url = re.findall(regex, string)
<TAB>return [x[0] for x in url]
"
79 write a program to add an element at specified index in a list	"

list = [10, 20, 30]
print(list)
list.insert(1, ""ABC"")
print(list)
list.insert(3, ""PQR"")
print(list)
"
Write a program to read an ASCII string and to convert it to a unicode string encoded by utf-8.	"s = input()
u = unicode(s, ""utf-8"")
print(u)
"
Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
write a python program to convert a list of values in kilometers to feet	"kilometer = [39.2, 36.5, 37.3, 37.8]
feet = map(lambda x: float(3280.8399) * x, kilometer)
print(list(feet))
"
Write a python program to print Words lengths in String	"test_string = ""India is my country""
res = list(map(len, test_string.split()))
print(""The list of words lengths is : "" + str(res))
"
Write a Python program to add member(s) in a set	"color_set = set()
color_set.add(""Red"")
color_set.update([""Blue"", ""Green""])
print(color_set)
"
write a program to strips every vowel from a string provided	"

vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""awesome""
.join([x for x in input_string.lower() if x not in vowels])
"
write a python function to reverse user provided list and return the result	"def reverselist(inlist):
<TAB>inlist = inlist[::-1]
<TAB>return inlist


result = reverselist([1, 2])
"
Write a function to return the area of a right angle triangle	"

def cal_rt_triangle_area(base: float, height: float) -> float:
<TAB>if base and height:
        return (base * height) / 2
<TAB>else:
        return None
"
Write a python program to Implement Merge sort and print the sorted list for the below list	"

def merge_sort(alist, start, end):
<TAB>
<TAB>if end - start > 1:
        mid = (start + end) // 2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)


def merge_list(alist, start, mid, end):
<TAB>left = alist[start:mid]
<TAB>right = alist[mid:end]
<TAB>k = start
<TAB>i = 0
<TAB>j = 0
<TAB>while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
<TAB>if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
<TAB>else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1


alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)
"
Write a program to filter the numbers in a list which are divisible by a given number	"my_list = [11, 45, 74, 89, 132, 239, 721, 21]


num = 3
result = list(filter(lambda x: (x % num == 0), my_list))


print(f""Numbers divisible by {num} are {result}"")
"
Write a python program to print all the values in a dictionary.	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(d.values())
"
write a python program uses else with for loop	"seq = ""abcde""
for k in seq:
<TAB>if k == ""f"":
        break
else:
<TAB>print(""f Not Found!"")
"
Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2	"def appendMiddle(s1, s2):
<TAB>middleIndex = int(len(s1) / 2)
<TAB>middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
<TAB>print(""After appending new string in middle"", middleThree)


appendMiddle(""Ault"", ""Kelly"")
"
write a python function which is decorated on another function	"def myDecorator(func):
<TAB>def new_func(n):
        return '$' + func(n)
<TAB>return new_func


@ myDecorator
def myFunction(a):
<TAB>return(a)


print(myFunction('100'))
"
Write a function to return reverse of a list	"def reverse_list(l1: list) -> list:
<TAB>return l1[::-1]
"
write a python program to delete an element from a list	"

list = ['a', 'bc', 'd', 'e']
element = 'bc'
list.remove(element)
"
53 write a python function which checks if a number is a perfect square	"import math


def is_perfect_square(num):
<TAB>sq_root = round(math.sqrt(num))
<TAB>if num == sq_root ** 2:
        return True
<TAB>else:
        return False
"
Write a program to take an average of given scores	"s1 = 50
s2 = 77
s3 = 87


print('Avg score is', (s1 + s2 + s3) / 3)
"
91 write a program to check eligibility for voting	"

age = int(input(""Enter Age : ""))


if age >= 18:
<TAB>status = ""Eligible""
else:
<TAB>status = ""Not Eligible""


print(""You are "", status, "" for Vote."")
"
Write a function to calculate the moment of inertia of a sphere of mass M and radius R	"def cal_mi_sphere(mass: float, radius: float) -> float:
<TAB>return (7 / 5) * mass * (radius**2)
"
write a function to find length of list	"def tuple_lenght(t):
<TAB>return len(t)
"
write a program for round for integers	"integer = 18
print(f""Round off value : {round(integer , -1)}"")
"
write a python function to add user provided list and return the result	"def addlist(list1, list2):
<TAB>result = list1 + list2
<TAB>return result


answer = addlist(['cat', 'dog'], ['samsung', 'oneplus'])
"
49. python function for finding the logarithmic value of a number	"def log(x):
<TAB>

<TAB>return math.log(x)
"
Write a function to adds two lists element wise only if numbers are even	"def adds_listevenelements(l1: list, l2: list):
<TAB>return [i + j for i, j in zip(l1, l2) if i * j % 2 == 0]
"
Write a Python Program to Count Number of Lowercase Characters in a String and print the result	"string = ""SriNAtH""
count = 0
for i in string:
<TAB>if(i.islower()):
        count = count + 1
print(""The number of lowercase characters is:"")
print(count)
"
Convert Decimal to Binary, Octal and Hexadecimal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
print(oct(dec), ""in octal."")
print(hex(dec), ""in hexadecimal."")
"
write a python program to convert raw string integer inputs to integers	"

str_input = ""1 2 3 4 5 6""


int_input = map(int, str_input.split())


print(list(int_input))
"
Write a Python program to check whether a list contains a sublist and print True or False.	"

def is_Sublist(l, s):
<TAB>sub_set = False
<TAB>if s == []:
        sub_set = True
<TAB>elif s == l:
        sub_set = True
<TAB>elif len(s) > len(l):
        sub_set = False

<TAB>else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i + n] == s[n]):
                    n += 1

                if n == len(s):
                    sub_set = True

<TAB>return sub_set


a = [2, 4, 3, 5, 7]
b = [4, 3]
c = [3, 7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))
"
Write a python program to print dimension in centimeter to feet	"cm = 50
feet = 0.0328 * cm
print(""The dimension in feet "", round(feet, 2))
"
Write a python program using list comprehension to produce and print the list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]	"

start_num = 2
repeat_count = 3
max_offset = 3
list4 = [[start_num + i + j]
         for j in range(max_offset) for i in range(repeat_count)]
print(list4)
"
58 write a python program to extract Kth index elements from Dictionary Value list and print it	"

test_dict = {""Gfg"": [4, 7, 5], ""Best"": [8, 6, 7], ""is"": [9, 3, 8]}
print(""The original dictionary is : "" + str(test_dict))
K = 1


s = []
for key, value in test_dict.items():
<TAB>s.append(value[K])
print(s)
"
Write a Python function that shifts the character of strings	"

def char_shift(string, shift_count):

<TAB>return """".join([chr(ord(x) + shift_count) if (ord(x) + shift_count) <= 122 else chr(96 + (ord(x) + shift_count) - 122) for x in string])
"
write a Python program to find the minute at which the minute hand and hour hand coincide	"

def find_time(h1):

<TAB>theta = 30 * h1
<TAB>print(""("", end="""")
<TAB>print((theta * 2), ""/ 11) minutes"")


h1 = 3
find_time(h1)
"
Concatenation of two List	"my_list1 = [4, 3, 2, 9, 10, 44, 1]
my_list2 = [5, 6, 2, 8, 15, 14, 12]
print(f""Sum of two list:,{my_list1+my_list2}"")
"
write a program that prints dictionaries having key of the first dictionary and value of the second dictionary	"test_dict1 = {""tsai"": 20, ""is"": 36, ""best"": 100}
test_dict2 = {""tsai2"": 26, ""is2"": 19, ""best2"": 70}
keys1 = list(test_dict1.keys())
vals2 = list(test_dict2.values())
res = dict()
for idx in range(len(keys1)):
<TAB>res[keys1[idx]] = vals2[idx]
print(""Mapped dictionary : "" + str(res))
"
Write a Python function to calculate factorial of a given no using closer	"

def fact():
<TAB>cache = {0: 1, 1: 1}

<TAB>def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
<TAB>return calc_fib
"
write a Python program to print even Numbers in a List	"

list1 = [10, 21, 4, 45, 66, 93]
even_nos = [num for num in list1 if num % 2 == 0]
print(""Even numbers in the list: "", even_nos)
"
write a program for  Extending a sublist	"

a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a[0].extend([12, 14, 16, 18])
print(a)
"
Write a python function to convert a list of strings to equivalent character array using itertools	"import itertools


def extract_characters(input_list):
<TAB>return [char_val for char_val in itertools.chain.from_iterable(input_list)]
"
Python program to get the third side of right angled triangle from two given sides.	"def pythagoras(opposite_side, adjacent_side, hypotenuse):
<TAB>if opposite_side == str(""x""):
        return ""Opposite = "" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)
<TAB>elif adjacent_side == str(""x""):
        return ""Adjacent = "" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)
<TAB>elif hypotenuse == str(""x""):
        return ""Hypotenuse = "" + str(((opposite_side ** 2) + (adjacent_side ** 2)) ** 0.5)
<TAB>else:
        return ""You know the answer!""


print(pythagoras(3, 4, 'x'))
print(pythagoras(3, 'x', 5))
print(pythagoras('x', 4, 5))
print(pythagoras(3, 4, 5))
"
write a python program to replace blank space to 1	"a = '1 0 0 1'
print(a.replace(' ', '1'))
"
write a python function to return count of number of vowels in a sentence	"def count_vowels(sentence):
<TAB>count = 0
<TAB>for letter in sentence:
        if letter in ""aeiouAEIOU"":
            count += 1
<TAB>return count
"
12. python function to return the cubes of a list of numbers	"def cube(n):
<TAB>return [i * i * i for i in range(n)]
"
write a python function which takes sentence as input and remove vowels from a sentence	"

sentence = input(""Enter a sentence : "")


def fn(sentence):
<TAB>vowels = 'aeiou'
<TAB>return ''.join([l for l in sentence if l not in vowels])
"
47 write a python function that accepts a valid path and changes the current working directory	"import os


def change_dir(path):
<TAB>return os.chdir(path)
"
Write a function to calculate the kinetic energy of an object of mass m and velocity v	"def cal_ke(mass: float, velocity: float) -> float:
<TAB>return (mass * (velocity)**2) / 2
"
Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is	"

date = ""20/04/2021""
dd, mm, yy = date.split('/')
dd = int(dd)
mm = int(mm)
yy = int(yy)
if(mm == 1 or mm == 3 or mm == 5 or mm == 7 or mm == 8 or mm == 10 or mm == 12):
<TAB>max1 = 31
elif(mm == 4 or mm == 6 or mm == 9 or mm == 11):
<TAB>max1 = 30
elif(yy % 4 == 0 and yy % 100 != 0 or yy % 400 == 0):
<TAB>max1 = 29
else:
<TAB>max1 = 28
if(mm < 1 or mm > 12):
<TAB>print(""Date is invalid."")
elif(dd < 1 or dd > max1):
<TAB>print(""Date is invalid."")
elif(dd == max1 and mm != 12):
<TAB>dd = 1
<TAB>mm = mm + 1
<TAB>print(""The incremented date is: "", dd, mm, yy)
elif(dd == 31 and mm == 12):
<TAB>dd = 1
<TAB>mm = 1
<TAB>yy = yy + 1
<TAB>print(""The incremented date is: "", dd, mm, yy)
else:
<TAB>dd = dd + 1
<TAB>print(""The incremented date is: "", dd, mm, yy)
"
Write a python program to Read and print the Contents of a File	"

a = str(input(""Enter file name .txt extension:""))
file2 = open(a, 'r')
line = file2.readline()
while(line != """"):
<TAB>print(line)
<TAB>line = file2.readline()
file2.close()
"
"Define a function that can accept an integer number as input and print the ""It is an even number"" if the number is even, otherwise print ""It is an odd number""."	"def checkValue(n):
<TAB>if n % 2 == 0:
        print(""It is an even number"")
<TAB>else:
        print(""It is an odd number"")
"
Write a python function to find the area of a circle, whose radius is given	"

def findArea(r):
<TAB>PI = 3.142
<TAB>return PI * (r * r)
"
Write a program to compute the number of digits in multiplication of two given integers	"a, b = 312, 410
print(len(str(a * b)))
"
Choose given number of elements from the list with different probability	"import random
num1 = 5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))
"
make sure all of dict's values are unique	"assert len(_dict) == len(set(_dict.values()))
reversed_dict = {v: k for k, v in _dict.items()}
print(reversed_dict)
"
Write a program to find the median among three given number	"x = 10
y = 20
z = 30
if y < x and x < z:
<TAB>print(x)
elif z < x and x < y:
<TAB>print(x)
elif z < y and y < x:
<TAB>print(y)
elif x < y and y < z:
<TAB>print(y)
elif y < z and z < x:
<TAB>print(z)
elif x < z and z < y:
<TAB>print(z)
"
write Python code to convert string to list	"

def Convert_1(string):
<TAB>li = list(string.split("" ""))
<TAB>return li


str1 = ""Geeks for Geeks""
print(Convert(str1))
"
28 write a program that return the first n numbers from a list	"

def sub_list(lst, ind):
<TAB>return lst[:ind]


print(sub_list([1, 2, 3, 4, 5, 56], 3))
"
write a program function to check if given words appear together in a list of sentence	"

def check(sentence, words):
<TAB>res = [all([k in s for k in words]) for s in sentence]
<TAB>return [sentence[i] for i in range(0, len(res)) if res[i]]
"
Write a function to calculate the total resistance of resistances in parallel in a given list	"def cal_total_res_in_parallel(res_list: list) -> float:
<TAB>return sum([1 / r for r in res_list])
"
Define a custom exception class which takes a string message as attribute.	"class MyError(Exception):
<TAB>def __init__(self, msg):
        self.msg = msg


error = MyError(""something wrong"")
"
write Python3 code to demonstrate Kth Non-None String from Rear using next() + list comprehension	"

test_list = ["""", """", ""Akshat"", ""Nikhil""]


print(""The original list : "" + str(test_list))
K = 2
test_list.reverse()
test_list = iter(test_list)
for idx in range(0, K):
<TAB>res = next(sub for sub in test_list if sub)


print(""The Kth non empty string from rear is : "" + str(res))
"
36 Write a  python function that returns the Highest Common Factor of two given numbers	"def calculate_hcf(x1, x2):
<TAB>if x1 == 0:
        return x2
<TAB>else:
        return hcf(x2 % x1, x1)
"
write a python program to replace blank space to 1	"def f12(x):
<TAB>yield x + 1
<TAB>print(""test"")
<TAB>yield x + 2


g = f12(9)
print(next(g))
"
write a python program that converts a octal number to octal and prints it	"octal_num = '17'
decimal_num = int(octal_num, 8)
print(decimal_num)
"
98 Write a Python program to multiply two integers without using the '*' operator in python.	"def multiply(x, y):
<TAB>if y < 0:
        return -multiply(x, -y)
<TAB>elif y == 0:
        return 0
<TAB>elif y == 1:
        return x
<TAB>else:
        return x + multiply(x, y - 1)
"
write a python program to multiply two list with list comprehensive	"l1 = [1, 2, 3]
l2 = [4, 5, 6]
print([x * y for x in l1 for y in l2])
"
generating a reliable secure random number	"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)
"
Python program to check for palindrom	"def isPalindrome(string):
<TAB>left_pos = 0
<TAB>right_pos = len(string) - 1

<TAB>while right_pos >= left_pos:
        if not string[left_pos] == string[right_pos]:
            return False
        left_pos += 1
        right_pos -= 1
<TAB>return True


print(isPalindrome('aza'))
"
write a python program to shuffle the items in a list and print it	"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)
"
18. python program to compare strings	"def compare_using_equals(n):
<TAB>a = 'a long string that is not intered' * 200
<TAB>b = 'a long string that is not intered' * 200
<TAB>for i in range(n):
        if a == b:
            pass
"
write a program to print the current date and time	"from datetime import datetime
now = datetime.now()
print(now)
"
Write a Python program that Given two Python sets, update first set with items that exist only in the first set and not in the second set	"set1 = {10, 20, 30}
set2 = {20, 40, 50}
print(set1.difference_update(set2))
"
write a python function to generate 6 digit OTP	"

import math
import random


def generateOTP():
<TAB>digits = ""0123456789""
<TAB>OTP = """"
<TAB>for i in range(6):
        OTP += digits[math.floor(random.random() * 10)]
<TAB>return OTP
"
Write a Python function to capitalizes the first letter of each word in a string	"def capitalize(text):
<TAB>return text.title()
"
write a program to sort the list in desending order	"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []


while data_list:
<TAB>minimum = data_list[0]  
<TAB>for x in data_list:
        if x > minimum:
            minimum = x
<TAB>new_list.append(minimum)
<TAB>data_list.remove(minimum)


print(f'decending_order_list: {new_list}')
"
write a python function to count 'a's in the repetition of a given string 'n' times.	"def repeated_string(s, n):
<TAB>return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')
"
write a program to split a string into a list where each line is a list item	"txt = ""Thank you for the music\nWelcome to the jungle""
x = txt.splitlines()
print(x)
"
Write a function to return the curved surface area of a cone	"def cal_cone_curved_surf_area(slant_height, radius):
<TAB>pi = 3.14
<TAB>return pi * radius * slant_height
"
write a recursive python function to calculate sum of natural numbers upto n, where n is an argument	"def recursive_sum(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return n + recursive_sum(n - 1)
"
write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)	"def random_combination_with_replacement(iterable, r):
<TAB>import random
<TAB>pool = tuple(iterable)
<TAB>n = len(pool)
<TAB>indices = sorted(random.choices(range(n), k=r))
<TAB>return tuple(pool[i] for i in indices)
"
write a python function to find the factorial of the user provided number and print the result	"def findfactorial(num):
<TAB>factorial = 1
<TAB>if num < 0:
        print(""Sorry, factorial does not exist for negative numbers"")
<TAB>elif num == 0:
        print(""The factorial of 0 is 1"")
<TAB>else:
        for i in range(1, num + 1):
            factorial = factorial * i
        print(""The factorial of"", num, ""is"", factorial)


findfactorial(3)
"
Python3 code to demonstrate working of Extract String till Numeric Using isdigit() + index() + loop	"test_str = ""geeks4geeks is best""
print(""The original string is : "" + str(test_str))
temp = 0
for chr in test_str:
<TAB>if chr.isdigit():
        temp = test_str.index(chr)
print(""Extracted String : "" + str(test_str[0: temp]))
"
write a python function to swap first and last element of a list	"
def swapList(newList):
<TAB>newList[0], newList[-1] = newList[-1], newList[0]
<TAB>return newList


newList = [12, 35, 9, 56, 24]
print(swapList(newList))
"
32. Python Program to Convert String to Uppercase	"
string = input(""Please Enter your Own String : "")


string1 = string.upper()

print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)
"
write a python function for binary search	"

def binary_search(arr, low, high, x):
<TAB>if high >= low:

        mid = (high + low) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] > x:
            return binary_search(arr, low, mid - 1, x)

        else:
            return binary_search(arr, mid + 1, high, x)
<TAB>else:
        return -1
"
Write a python program which accepts users first name and last name and print in reverse order with a space	"

first_name = input(""Enter your first name: "")
last_name = input(""Enter your last name: "")
print(last_name.strip() + "" "" + first_name.strip())
"
write Python3 code to demonstrate convert list of strings to list of tuples Using map() + eval	"

test_list = ['4, 1', '3, 2', '5, 3']
print(""The original list : "" + str(test_list))
res = list(map(eval, test_list))
print(""The list after conversion to tuple list : "" + str(res))
"
write a Python program to print positive numbers in a list	"list1 = [11, -21, 0, 45, 66, -93]
for num in list1:
<TAB>if num >= 0:
        print(num, end="" "")
"
write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list	"def divisible_sum_pairs(arr, k):
<TAB>count = 0
<TAB>n = len(arr)
<TAB>for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
<TAB>return count


import math
"
Write a function to calculate the total resistance of resistances in series in a given list	"def cal_total_res_in_series(res_list: list) -> float:
<TAB>return sum(res_list)
"
69 write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random


print(random.sample([i for i in range(1, 1001) if i %
                     5 == 0 and i % 7 == 0], 5))
"
Please write assert statements to verify that every number in the list [2,4,6,8] is even.	"li = [2, 4, 6, 8]
for i in li:
<TAB>assert i % 2 == 0
"
51 function to print the source code of a function	"def print_so(f: ""Function name/class name/module""):
<TAB>from inspect import getsource
<TAB>print(getsource(f))
"
"72 write a program to print the running time of execution of ""1+1"" for 100 times."	"from timeit import Timer


t = Timer(""for i in range(100):1+1"")
print(t.timeit())
"
write a python function to find the average of two or more numbers and return the average	"

def average(*args):
<TAB>return sum(args, 0.0) / len(args)
"
write a list comprehension for number and its cube	"

l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x**3 for x in l])
"
Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.	"a = raw_input()
n1 = int(""%s"" % a)
n2 = int(""%s%s"" % (a, a))
n3 = int(""%s%s%s"" % (a, a, a))
n4 = int(""%s%s%s%s"" % (a, a, a, a))
print(n1 + n2 + n3 + n4)
"
Write a Python program to find the repeated items of a tuple	"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7
count = tuplex.count(4)
print(count)
"
Write a function which can compute the factorial of a given numbers.	"def fact(x):
<TAB>if x == 0:
        return 1
<TAB>return x * fact(x - 1)


x = int(input())
print(fact(x))
"
write a python function to check if a string is palindrome or not and print the result	"def isPalindrome(s):
<TAB>if (s == s[::-1]):
        print(""Given string is palindrome"")
<TAB>else:
        print(""Given string is not palindrome"")


s = ""malayalam""
isPalindrome(s)
"
write a python function to calculate weighted average of two or more numbers	"

def weighted_average(nums, weights):
<TAB>return sum(x * y for x, y in zip(nums, weights)) / sum(weights)
"
write a python program to tokenise a string into words and print them	"

string = 'the sun is shining'


words = string.split()
print(words)
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"def count_blank_space():
<TAB>fname = input(""file name:"")
<TAB>count = 0
<TAB>with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
<TAB>return count
"
write a python function to check if a key exists in a dictionary	"

d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}


def is_key_present(x):
<TAB>if x in d:
        print('Key is present in the dictionary')
<TAB>else:
        print('Key is not present in the dictionary')
"
19 function to print ascii value of a character.	"def show_ascii(a: str):
<TAB>print(ord(a))
"
write a python program that prints every third character in a sentence	"sentence = 'the quick brown fox'
print(sentence[::3])
"
Write a function to remove a given date type elements from a list.	"

def removeDataType(li, dType):
<TAB>res = []
<TAB>for i in li:
        if not isinstance(i, dType):
            res.append(i)
<TAB>return res
"
write a python function to return the largest and smallest numbers in the given list and return None if the list is empty	"def largest_and_smallest(list_of_nums):
<TAB>if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
<TAB>else:
        return
"
42. python function for finding the derivative of cosine angle	"def dcosine(angle):
<TAB>

<TAB>return -math.sin(angle)
"
usage of dictionary	"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print(""dict['Name']: "", dict['Name'])
print(""dict['Age']: "", dict['Age'])
"
Write a function to return the area of a rhombus	"def area(d1, a):
<TAB>d2 = (4 * (a**2) - d1**2)**0.5
<TAB>area = 0.5 * d1 * d2
<TAB>return(area)
"
write a python program to print the table of input integer	"

num = int(input(""Please enter a number ""))
for a in range(1, 11):
<TAB>print(num, 'x', a, '=', num * a)
"
80 By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
Please write a program to print Python built-in functions document of input()	"print(input.__doc__)
"
write a python program to print prime factors of user provided number	"

import math


def primeFactors(n):
<TAB>while n % 2 == 0:
        print(2),
        n = n / 2
<TAB>for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            print(i),
            n = n / i
<TAB>if n > 2:
        print(n)
"
Write a function to merge dictionaries	"def merge1():
<TAB>test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
<TAB>test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
<TAB>print(""The original list 1 is : "" + str(test_list1))
<TAB>print(""The original list 2 is : "" + str(test_list2))
<TAB>for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

<TAB>print(""The Merged Dictionary list : "" + str(test_list1))
"
55 string to tuple	"def sen_to_tuple(sen):
<TAB>return tuple(sen)
"
write a program Creating a Dictionary	"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}


print(""Accessing a element using get:"")
print(Dict.get(3))
"
using cmath.polar() method	"num = cmath.polar(1)
print(num)
"
write a python list comprehension to print numbers in a given string	"string = ""Hello 12345 World""
numbers = [x for x in string if x.isdigit()]
print(numbers)
"
write a python program to check is an num/int	"print('11'.isnumeric())
"
write a python program to print the least frequent character in a string	"test_str = ""this is test string""
all_freq = {}
for i in test_str:
<TAB>if i in all_freq:
        all_freq[i] += 1
<TAB>else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)
print(res)
"
write a python program to print two sets intersection using operations like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}


print(""Intersection of E and N is"", E & N)
"
write a program to print difference in between today and given date	"

import datetime
dd = int(input(""date: ""))
mm = int(input(""month: ""))
yy = int(input(""year: ""))
a = datetime.date(yy, mm, dd)
x = date.today()
print(x - a)
"
Write a Python Program to Convert Binary to Gray Code	"

def binary_to_gray(n):

<TAB>n = int(n, 2)
<TAB>n ^= (n >> 1)

<TAB>return bin(n)[2:]
"
write a python program that prints the sum of natural numbers up to a given number	"num = 16
sum = 0
while (num > 0):
<TAB>sum += num
<TAB>num -= 1
print(f'The sum is {sum}')
"
60 Write a function to return the the unique tokens from a string	"

def unique_tokens(st):
<TAB>return set(st)
"
41. python function for finding cosine angle	"def cosine(angle):
<TAB>

<TAB>return math.cos(angle)
"
write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses	"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
<TAB>guess2 = input(""Is it <= 2? enter y/n \n"")
<TAB>if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
<TAB>else:
        print(""Yay! found the number, its 3"")
else:
<TAB>guess2 = input(""Is it 4? enter y/n \n"")
<TAB>if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
<TAB>else:
        print(""Yay! found the number, its 5"")
"
write a program to accept the strings which contains all vowels	"

str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou"")) >= 5:
<TAB>print('accepted')
else:
<TAB>print(""not accepted"")
"
write a program to print words frequncy in a given string	"

test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency: "" + str(res))
"
53 write a python program that displays the key of list value with maximum range and print it	"

test_dict = {""Gfg"": [6, 2, 4, 1], ""is"": [4, 7, 3, 3, 8], ""Best"": [1, 0, 9, 3]}

max_res = 0
for sub, vals in test_dict.items():

<TAB>max_res = max(max_res, max(vals) - min(vals))
<TAB>if max_res == max(vals) - min(vals):
        res = sub
print(""The maximum element key : "" + str(res))
"
write a python program to print a random number between 0 and 1	"import random
print(random.uniform(0, 1))
"
Write a function to calculate volume of Square Pyramid	"def volumeSquare(b, h):
<TAB>return (0.33) * b * b * h
"
write a program to write a string in a file	"

filename = 'file1.txt'
string = ""programming in \n python""
f1 = open(filename, 'w')
f1.write(string)
f1.close()
"
Write a program to extract and print digits of a number in reverse order. The number is input from the user.	"

num = int(input(""Enter a number with multiple digit: ""))
n = 0
while num > 0:
<TAB>a = num % 10
<TAB>num = num - a
<TAB>num = num / 10
<TAB>print(int(a), end="""")
<TAB>n = n + 1
"
write a generator function in python to generate infinite square of numbers using yield	"def nextSquare():
<TAB>i = 1
<TAB>
<TAB>while True:
        yield i * i
        i += 1
"
Write a function to count the number of carry operations for each of a set of addition problems	"def carry_number(x, y):
<TAB>ctr = 0
<TAB>if(x == 0 and y == 0):
        return 0
<TAB>z = 0
<TAB>for i in reversed(range(10)):
        z = x % 10 + y % 10 + z
        if z > 9:
            z = 1
        else:
            z = 0
        ctr += z
        x //= 10
        y //= 10
<TAB>if ctr == 0:
        return ""No carry operation.""
<TAB>elif ctr == 1:
        return ctr
<TAB>else:
        return ctr
"
47. Python Program to Sort Words in Alphabetic Order	"
my_str = ""Hello this Is an Example With cased letters""
words = [word.lower() for word in my_str.split()]
words.sort()

print(""The sorted words are:"")
for word in words:
<TAB>print(word)
"
Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10] and print it	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x % 2 == 0, li))
print(evenNumbers)
"
Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given	"def find_pressure_of_ideal_gas(volume: float, temp: float, n: float) -> float:
<TAB>r = 8.3145
<TAB>return (n * r * temp) / volume
"
Write a Python function to print the GSD of Two Numbers	"

def gcd(a, b):
<TAB>if(b == 0):
        return a
<TAB>else:
        return gcd(b, a % b)
"
5. python function to strip vowels from a string	"def strip_vowel_str(str):
<TAB>vowels = ['a', 'e', 'i', 'o', 'u']
<TAB>return """".join([x for x in str if x not in vowels])
"
write a Python function to Find HCF of two numbers	"def hcf(x, y):
<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf
"
write a python program which takes input a string and print reverse string	"name = input(""Enter String"")
print(name[::-1])
"
14 write a function to perform insertion sort on an arary	"

def sort_insertion(arr):
<TAB>for i in range(1, len(arr)):
        tmp = arr[i]

        j = i
        while (j > 0) & (tmp < arr[j - 1]):
            arr[j] = arr[j - 1]
            j = j - 1
        arr[j] = tmp
<TAB>return arr
"
write a program that adds corresponding elements in two lists and prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a + b for (a, b) in zip(list1, list2)]
print(sum_list)
"
Write a python program to Convert a list of characters into a string and print it : Example : # Input ['a', 'b', 'c', 'd']# Output abcd	"

s = ['a', 'b', 'c', 'd']
x = """".join(s)
print(x)
"
write a python program to print the minimum integer in a list of integers	"lst = [23, 10, 55, 43]
lst.sort()
min = lst[0]
"
43 write a python program to filter dictionaries with ordered values	"

test_list = [{'gfg': 2, 'is': 8, 'good': 10},
             {'gfg': 1, 'for': 10, 'geeks': 9},
             {'love': 3, 'gfg': 4}]

res = [sub for sub in test_list if sorted(
<TAB>list(sub.values())) == list(sub.values())]

print(""The filtered Dictionaries : "" + str(res))
"
write a python function to calculate the least common multiple (LCM) of two user provided positive integers.	"

def lcm(num1, num2):
<TAB>if num1 > num2:
        z = num1
<TAB>else:
        z = num2
<TAB>while(True):
        if((z % num1 == 0) and (z % num2 == 0)):
            lcm = z
            break
        z += 1
<TAB>return lcm
"
41 write a python function that takes in a string and returns it in uppercase	"

def to_upper(s):
<TAB>return s.upper()
"
Please write a program to print Python built-in functions document of abs()	"print(abs.__doc__)
"
31. Python Program to find Diameter, Circumference, and Area Of a Circle	"import math


def find_Diameter(radius):
<TAB>return 2 * radius


def find_Circumference(radius):
<TAB>return 2 * math.pi * radius


def find_Area(radius):
<TAB>return math.pi * radius * radius


r = float(input(' Please Enter the radius of a circle: '))


diameter = find_Diameter(r)
circumference = find_Circumference(r)
area = find_Area(r)


print(""\n Diameter Of a Circle = %.2f"" % diameter)
print("" Circumference Of a Circle = %.2f"" % circumference)
print("" Area Of a Circle = %.2f"" % area)
"
python program to detect number of local variables defined in a program	"def abc():
<TAB>x = 1
<TAB>y = 2
<TAB>str1 = ""w3resource""
<TAB>print(""Python Exercises"")


print(abc.__code__.co_nlocals)
"
"write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + ""+"" operator"	"test_list = [(5, 6), (2, 4), (5, 7), (2, 5)]
print(""The original list is : "" + str(test_list))
sub_list = [7, 2, 4, 6]
res = [sub + tuple(sub_list) for sub in test_list]
print(""The modified list : "" + str(res))
"
write a program to find cosine of a number	"import math


num = 45
print(""Cosine"", math.cos(num))
"
write a program to multiply two Matrix	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
write a program to multiply two Matrix	"
X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
write a python program to print reverse list	"

print(f'reverse the given list elements:{list1[::-1]}')
"
write a python function to call a function repeatedly until an exception is raised.	"def iter_except(func, exception, first=None):
<TAB>
<TAB>try:
        if first is not None:
            yield first()            
        while True:
            yield func()
<TAB>except exception:
        pass
"
write a python function to return the number of lines in a file	"def count_lines(filename):
<TAB>with open(filename, 'r') as f:
        contents = f.read().split('\n')
        return len(contents)
"
Please write a function using generator to print the even numbers between 0 and n in comma separated form while n is input by console.	"def EvenGenerator(n):
<TAB>i = 0
<TAB>while i <= n:
        if i % 2 == 0:
            yield i
        i += 1
"
Write a program which will achieve given a Python list, remove all occurrence of an input from the list	"list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
<TAB>return [value for value in sampleList if value != val]


resList = removeValue(list1, 20)
print(resList)
"
Write a Python Program to Check if a Number is a Strong Number	"

def strong_no_check(num):
<TAB>sum1 = 0
<TAB>temp = num
<TAB>while(num):
        i = 1
        f = 1
        r = num % 10
        while(i <= r):
            f = f * i
            i = i + 1
        sum1 = sum1 + f
        num = num // 10
<TAB>if(sum1 == temp):
        return True
<TAB>else:
        return False
"
write a python function that converts a user provided string to snake case	"

from re import sub


def snake(s):
<TAB>return '_'.join(
        sub('([A-Z][a-z]+)', r' \1',
            sub('([A-Z]+)', r' \1',
                s.replace('-', ' '))).split()).lower()
"
write Python3 code to demonstrate to create a substring from a string	"

ini_string = 'xbzefdgstb'


print(""initial_strings : "", ini_string)


sstring_strt = ini_string[:2]
sstring_end = ini_string[3:]


print(""print resultant substring from start"", sstring_strt)
print(""print resultant substring from end"", sstring_end)
"
write a python function for Caesar Cipher, with given shift value and return the modified text	"def caesar_cipher(text, shift=1):
<TAB>alphabet = string.ascii_lowercase
<TAB>shifted_alphabet = alphabet[shift:] + alphabet[:shift]
<TAB>table = str.maketrans(alphabet, shifted_alphabet)
<TAB>return text.translate(table)
"
write a program to remove spaces at the beginning and at the end of the string	"txt = ""     banana     ""
x = txt.strip()
print(""of all fruits"", x, ""is my favorite"")
"
32 print current version of python	"import sys
print(sys.version)
"
write a python program to print two sets symmetric differences using operations like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Symmetric difference of E and N is"", E ^ N)
"
Write a function that will convert a string into camelCase	"

from re import sub


def camelCase(string):
<TAB>string = sub(r""(_|-)+"", "" "", string).title().replace("" "", """")
<TAB>return string[0].lower() + string[1:]
"
write a program which accepts basic mathematic expression from console and print the evaluation result.	"expression = raw_input()
print(eval(expression))
"
write a python program to calculate factorial sum using list comprehensive	"import functools
n = 5
print(functools.reduce(lambda x, y: x * y, range(1, n + 1)))
"
Check if the key exists or not in JSON	"import json


studentJson = """"""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""


print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
<TAB>print(""Key exist in JSON data"")
<TAB>print(student[""name""], ""marks is: "", student[""percentage""])
else:
<TAB>print(""Key doesn't exist in JSON data"")
"
Write a function to calculate the compound interest for principal p, rate r and time in years y	"def get_ci(p: float, r: float, t: float, n: float) -> float:
<TAB>return round(p * ((1 + (r / (n * 100)))**(n * t)) - p, 2)
"
92 write a program to print the version information	"

import sys


print(""Python version: "", sys.version)
print(""Python version info: "", sys.version_info)
"
write a program to find absoluute number of a given number	"import math


number = 34.564
fa = math.fabs(number)
print('Fabs', fa)
"
2 write a program to find sum of elements in list	"list1 = [11, 5, 17, 18, 23]
total = sum(list1)
print(""Sum of all elements in given list: "", total)
"
Write a function to identify to count no of instances of a value  inside a dictionary	"def count_value(d: dict, value) -> bool:
<TAB>return list(v == value for v in dict.values()).count(True)
"
45. Python Program to Check Whether a String is Palindrome or Not	"

my_str = 'aIbohPhoBiA'
my_str = my_str.casefold()
rev_str = reversed(my_str)

if list(my_str) == list(rev_str):
<TAB>print(""The string is a palindrome."")
else:
<TAB>print(""The string is not a palindrome."")
"
33 function insert at the begining of dictionary	"def dict_in_at_begin(orgin: dict, new_: dict):
<TAB>final = {**new_, **origin}
<TAB>return final
"
Generate random Universally unique IDs	"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)
"
write a function to calculate BMI given height in meters and weights in kgs	"

def bmi(height, weight):
<TAB>return weight / (height * height)
"
37 function to add two tuple	"def add_tuple(tup1, tup2):
<TAB>return tup1 + tup2
"
write a Python3 code to demonstrate working of Extract dictionaries with values sum greater than K	"

test_list = [{""Gfg"": 4, ""is"": 8, ""best"": 9},
             {""Gfg"": 5, ""is"": 8, ""best"": 1},
             {""Gfg"": 3, ""is"": 7, ""best"": 6},
             {""Gfg"": 3, ""is"": 7, ""best"": 5}]


print(""The original list : "" + str(test_list))


K = 15


res = []
for sub in test_list:
<TAB>sum = 0
<TAB>for key in sub:
        sum += sub[key]
<TAB>if sum > K:
        res.append(sub)


print(""Dictionaries with summation greater than K : "" + str(res))
"
write a Python program to calculate volume of Torus	"

r = 3
R = 7


pi = 3.14159
Volume = (float)(2 * pi * pi * R * r * r)
print(""Volume: "", Volume)
"
Write a python program for print all elements with digit 7.	"
test_list = [56, 72, 875, 9, 173]

K = 7

res = [ele for ele in test_list if str(K) in str(ele)]

print(""Elements with digit K : "" + str(res))
"
Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.	"items = [x for x in input().split(',')]
items.sort()
print(','.join(items))
"
write a python function to linearly search an array for a given number and return its index else return -1	"

def search(arr, n, x):
<TAB>for i in range(0, n):
        if (arr[i] == x):
            return i
<TAB>return -1
"
write a python program to check is all are alphanumeric	"print('ab'.isalpha())
"
30 write a python program  to extract domain name from Email address and print it	"

test_str = 'md.shakiluzzaman@gmail.com'

print(""The original string is : "" + str(test_str))
s = test_str.split('@')
print(s[1])
"
write a python function to sort the dictionary by values	"

def sort_dict_by_value(d, reverse=False):
<TAB>return dict(sorted(d.items(), key=lambda x: x[1], reverse=reverse))
"
Write a python program to remove 11 and 18 from a list. Print the final list.	"
list1 = [11, 5, 17, 18, 23, 50]

unwanted_num = {11, 18}

list1 = [ele for ele in list1 if ele not in unwanted_num]

print(""New list after removing unwanted numbers: "", list1)
"
Write a python program to Implement Bucket sort and print the sorted list for the below list	"

def bucket_sort(alist):
<TAB>largest = max(alist)
<TAB>length = len(alist)
<TAB>size = largest / length

<TAB>buckets = [[] for _ in range(length)]
<TAB>for i in range(length):
        j = int(alist[i] / size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])

<TAB>for i in range(length):
        insertion_sort(buckets[i])

<TAB>result = []
<TAB>for i in range(length):
        result = result + buckets[i]

<TAB>return result


def insertion_sort(alist):
<TAB>for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
Write a Python program to print out the number of CPUs working behind the scenes using multiprocessing library	"import multiprocessing
print(multiprocessing.cpu_count())
"
write a program Creating a Dictionary  with dict() method	"Dict = dict({1: 'Geeks', 2: 'For', 3: 'Geeks'})
print(""\nDictionary with the use of dict(): "")
print(Dict)
"
Write a function that returns list of elements with n power to elements of list	"def n_power(l1: list, power: int) -> list:
<TAB>return [i**power for i in l1]
"
write a python function to get stock prices for a company from 2015 to 2020-12	"def get_stock_prices(tickerSymbol='TSLA'):
<TAB>import yfinance as yf

<TAB>
<TAB>tickerData = yf.Ticker(tickerSymbol)

<TAB>
<TAB>tickerDf = tickerData.history(
        period='1d', start='2015-1-1', end='2020-12-20')

<TAB>
<TAB>print(tickerDf)
"
write python code to print temperature in celsius to fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
      (celsius, fahrenheit))
"
write a program to print the longest key in a dictioinary	"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key = ''
for key in dict_1:
<TAB>if len(key) > len(max_key):
        max_key = key
print(max_key)
"
write a Python Program to Read a File and Capitalize the First Letter of Every Word in the File	"fname = input(""Enter file name: "")
with open(fname, 'r') as f:
<TAB>for line in f:
        l = line.title()
        print(l)
"
Write a python function to raise error when an input is not a string type	"def check_string(new_str):
<TAB>return isinstance(new_str, str)
"
write a python function shifts and scales all numbers in the given list by the given mean and standard deviation	"def shift_and_scale(list_of_nums, mean, std):
<TAB>return [(x - mean) / std for x in list_of_nums]
"
write a python function that takes an integer as input and returns the factorial of that number	"

def factorial(n):

<TAB>return 1 if (n == 1 or n == 0) else n * factorial(n - 1)
"
write a python program to print a random vowel	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))
"
write a python function to do bitwise multiplication on a given bin number by given shifts	"def bit_mul(n, shift):
<TAB>return n << shift
"
53. python function for finding the derivative of hyperbolic tangent value of a number	"def dtanh(x):
<TAB>

<TAB>return 1 - (math.tanh(x)**2)
"
Write a python program to Implement Radix sort and print the sorted list for the below list	"

def radix_sort(alist, base=10):
<TAB>if alist == []:
        return

<TAB>def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index] // (base**digit)) % base)
        return key
<TAB>largest = max(alist)
<TAB>exp = 0
<TAB>while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
<TAB>return alist


def counting_sort(alist, largest, key):
<TAB>c = [0] * (largest + 1)
<TAB>for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1

<TAB>c[0] = c[0] - 1
<TAB>for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

<TAB>result = [None] * len(alist)
<TAB>for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1

<TAB>return result


alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
27 write a function to generate and print a random number between 0 and 22	"import random
n = random.randint(0, 22)
print(n)
"
write a python function to create multiplication table from the user provided number	"

def multiplication_table(n):
<TAB>for i in range(1, 11):
        print(n, 'x', i, '=', n * i)
"
59 write a program to make a simple calculator	"
def add(x, y):

<TAB>return x + y


def subtract(x, y):

<TAB>return x - y


def multiply(x, y):

<TAB>return x * y


def divide(x, y):

<TAB>return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

choice = input(""Enter choice(1/2/3/4):"")

num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

if choice == '1':
<TAB>print(num1, ""+"", num2, ""="", add(num1, num2))

elif choice == '2':
<TAB>print(num1, ""-"", num2, ""="", subtract(num1, num2))

elif choice == '3':
<TAB>print(num1, ""*"", num2, ""="", multiply(num1, num2))
elif choice == '4':
<TAB>print(num1, ""/"", num2, ""="", divide(num1, num2))
else:
<TAB>print(""Invalid input"")
"
Write a function that returns sum of all elements in the list	"def sum_elements(l: list):
<TAB>return sum(l)
"
Write a Python program to convert a tuple to a string.	"tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
str = ''.join(tup)
print(str)
"
Write a Python Program to Swap the First and Last Value of a List	"

a = [2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp = a[0]
a[0] = a[n - 1]
a[n - 1] = temp
print(""New list is:"")
print(a)
"
write a python function to generate wordcloud on given text or file	"import os


def get_word(data):
<TAB>if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError(""Text must be string or a File object."")
<TAB>from wordcloud import WordCloud, STOPWORDS
<TAB>import matplotlib.pyplot as plt
<TAB>stopwords = set(STOPWORDS)
<TAB>if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

<TAB>data = ' '.join(data.lower().split(' '))
<TAB>wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)

<TAB>
<TAB>plt.figure(figsize=(8, 8), facecolor=None)
<TAB>plt.imshow(wordcloud)
<TAB>plt.axis(""off"")
<TAB>plt.tight_layout(pad=0)

<TAB>plt.show()
"
Write a Python Program to Transpose a Matrix  and print result.	"X = [[1, 2],
     [4, 5],
     [7, 8]]

Result = [[0, 0, 0],
          [0, 0, 0]]

for i in range(len(X)):
<TAB>for j in range(len(X[0])):
        result[j][i] = X[i][j]

for r in result:
<TAB>print(r)
"
Write a python function to remove spaces from a given string	"def remove_spaces_from_string(string):
<TAB>return string.replace(' ', '')
"
write a program to print the nth fibonacci number	"n1 = 1
n2 = 1
n = 5
for _ in range(n):
<TAB>n1, n2 = n2, n1 + n2
print(n2)
"
37. Python Program to Display Fibonacci Sequence Using Recursion	"def recur_fibo(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return(recur_fibo(n - 1) + recur_fibo(n - 2))


nterms = 10


if nterms <= 0:
<TAB>print(""Plese enter a positive integer"")
else:
<TAB>print(""Fibonacci sequence:"")
<TAB>for i in range(nterms):
        print(recur_fibo(i))
"
96 write a python program to convert  list of tuples into digits and print it	"
lst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]
a = ''
for i in lst:
<TAB>for j in i:
        a += str(j)
print(list(set(a)))
"
Write a function to find acceleration, given u, v and t	"

def acc(u, v, t):
<TAB>return (v - u) / t
"
Write a function to remove and print every third number from a list of numbers until the list becomes empty	"def remove_nums(int_list):
<TAB>position = 3 - 1
<TAB>idx = 0
<TAB>len_list = (len(int_list))
<TAB>while len_list > 0:
        idx = (position + idx) % len_list
        print(int_list.pop(idx))
        len_list -= 1
"
write a python function that takes in a list and returns a list containing the squares of the elements of the input list	"def square_list_elements(list_to_be_squared):
<TAB>return list(map(lambda x: x**2, list_to_be_squared))
"
write a python function to convert byte to UTF-8	"def byte_to_utf8(data):
<TAB>return data.decode(""utf-8"")


print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))
"
Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged	"

def change(string):
<TAB>return string[-1:] + string[1:-1] + string[:1]
"
Write a program to find common divisors between two numbers in a given pair	"def ngcd(x, y):
<TAB>i = 1
<TAB>while(i <= x and i <= y):
        if(x % i == 0 and y % i == 0):
            gcd = i
        i += 1
<TAB>return gcd


def num_comm_div(x, y):
<TAB>n = ngcd(x, y)
<TAB>result = 0
<TAB>z = int(n**0.5)
<TAB>i = 1
<TAB>while(i <= z):
        if(n % i == 0):
            result += 2
            if(i == n / i):
                result -= 1
        i += 1
<TAB>return result
"
Write a python Class to calculate area of a rectangle and print the area	"

class rectangle():
<TAB>def __init__(self, breadth, length):
        self.breadth = breadth
        self.length = length

<TAB>def area(self):
        return self.breadth * self.length


a = 6
b = 4
obj = rectangle(a, b)
print(""Area of rectangle:"", obj.area())
"
write a python function to calculate a sigmoid value for any user provided real numbers	"

def sigmoid(x):
<TAB>return 1 / (1 + math.exp(-x))
"
write a python program to pop element form dictionary	"squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
print(squares.pop(4))
"
61 Write a Python function to reverse the bits of an integer (32 bits unsigned).	"def reverse_Bits(n):
<TAB>result = 0
<TAB>for i in range(32):
        result <<= 1
        result |= n & 1
        n >>= 1
<TAB>return result
"
Set the values in the new list to upper case	"list = ""AMITKAYAL""
newlist = [x.upper() for x in list]
print(f""New list to upper case:{newlist}"")
"
write a python function that removes element from a list using a user provided number	"

def drop(a, n=1):
<TAB>return a[n:]
"
write Python Program to Count the Number of Words in a Text File	"fname = input(""Enter file name: "")
num_words = 0
with open(fname, 'r') as f:
<TAB>for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)
"
13. python function to find the average of given numbers	"def average():
<TAB>numbers = []

<TAB>def add(number):
        numbers.append(number)
        total = sum(numbers)
        count = len(numbers)
        return total / count
<TAB>return add


a = average()
a(10)
a(20)
a(45)
"
Write a program to convert dictionary into JSON	"import json
data = {""key1"": ""value1"", ""key2"": ""value2""}
jsonData = json.dumps(data)
print(jsonData)
"
write a Python function that finds a root of a polynomial curve using the Newton-Raphson method.	"def newton_raphson(c, x=0):
<TAB>for _ in range(20):
        polynomial = c[0] * x**3 + c[1] * x**2 + c[2] * x + c[3]
        derivative = 3 * c[0] * x**2 + 2 * c[1] * x + c[2]
        x -= polynomial / derivative
<TAB>return round(x, 3)


print(newton_raphson([-0.1, 0.4, 0.1, -0.8]))
"
write Python3 code to demonstrate to create a substring from string	"ini_string = 'xbzefdgstb'
print(""initial_strings : "", ini_string)
sstring_alt = ini_string[::2]
sstring_gap2 = ini_string[::3]


print(""print resultant substring from start"", sstring_alt)
print(""print resultant substring from end"", sstring_gap2)
"
write a program to check if a substring is present in a given string	"

string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1):
<TAB>print(""NO"")
else:
<TAB>print(""YES"")
"
45 write a python program to Count if dictionary position equals key or value and print it	"
test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5}

res = 0
test_dict = list(test_dict.items())
for idx in range(0, len(test_dict)):
<TAB>if idx == test_dict[idx][0] or idx == test_dict[idx][1]:
        res += 1

print(""The required frequency : "" + str(res))
"
args and sleep	"import time


def report_arg(my_default=time.time()):
<TAB>print(my_default)


report_arg()
time.sleep(5)
report_arg()
"
44 universal function	"def universal_func(*args, **kwargs):
<TAB>print(args)
<TAB>print(**kwargs)
"
Write a python program to check if a number is positive or negative	"num = 15
if num > 0:
<TAB>print(f""Positive number"")
elif num == 0:
<TAB>print(f""Zero"")
else:
<TAB>print(f""Negative number"")
"
write a python function that would return the sum of first n natural numbers, where n is the input	"def sum_first_n(n):
<TAB>return (n * (n + 1)) // 2
"
Write a  program to split strings using split function.	"string = ""India is my country.""
string_list = string.split(' ')
print(string_list)
"
write a python program to check is an title	"print('HelloWorld'.istitle())
"
Write a function that returns a dictionary sorted descending by its values	"def descending_dict_valuesort(d: dict):
<TAB>return {key: val for key, val in sorted(d.items(), reverse=True, key=lambda ele: ele[1])}
"
Write a function to return the area of triangle by heros formula	"def cal_triangle_area(a: float, b: float, c: float) -> float:
<TAB>if a or b or c:
        s = (a + b + c) / 2
        if s > a and s > b and s > c:
            area = (s * (s - a) * (s - b) * (s - c))**(1 / 2)
            return round(area, 2)
        else:
            return None
<TAB>return None
"
Write a Python Program to Generate Gray Codes using Recursion	"

def get_gray_codes(n):
<TAB>
<TAB>if n == 0:
        return ['']
<TAB>first_half = get_gray_codes(n - 1)
<TAB>second_half = first_half.copy()

<TAB>first_half = ['0' + code for code in first_half]
<TAB>second_half = ['1' + code for code in reversed(second_half)]

<TAB>return first_half + second_half
"
write a python program that reverses an integer and prints it	"num = 12345
reversed = int(str(num)[::-1])
print(reversed)
"
Write a python function to read a user specified csv file and a delimiter and return the number of rows and number of columns in the first row.	"import csv


def read_csv_length(csv_file_name, delimiter_pattern):
<TAB>if(os.path.exists(csv_file_name) == False):
        print(""Destination File doesn't exist"")
        return
<TAB>with open(csv_file_name, newline='') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)
        csv_list = list(csv_reader)
        return len(csv_list), len(csv_list[0])
"
Write a Python program to check and print whether a triangle is valid or not	"

def triangle_check(l1, l2, l3):
<TAB>if (l1 > l2 + l3) or (l2 > l1 + l3) or (l3 > l1 + l2):
        print('No, the lengths wont form a triangle')
<TAB>elif (l1 == l2 + l3) or (l2 == l1 + l3) or (l3 == l1 + l2):
        print('yes, it can form a degenerated triangle')
<TAB>else:
        print('Yes, a triangle can be formed out of it')


length1 = int(input('enter side 1\n'))
length2 = int(input('enter side 2\n'))
length3 = int(input('enter side 3\n'))
triangle_check(length1, length2, length3)
"
write a python program that takes input a list and cube every term using list comprehension	"

s1 = eval(input(""Enter list ""))
print([i**3 for i in s1])
"
write a python program to add two octal numbers	"
a = ""123""
b = ""456""
sum = oct(int(a, 8) + int(b, 8))
print(sum[2:])
"
write Python code to demonstrate sort a list of dictionary where value date is in string	"ini_list = [{'name': 'akash', 'd.o.b': '1997-03-02'},
            {'name': 'manjeet', 'd.o.b': '1997-01-04'},
            {'name': 'nikhil', 'd.o.b': '1997-09-13'}]


print(""initial list : "", str(ini_list))


ini_list.sort(key=lambda x: x['d.o.b'])


print(""result"", str(ini_list))
"
Write a python program using lambda funtion to square a number	"def square2(num): return num * num
"
write a function to calculate the frequency of a number in a list	"

def frequency(list, num):
<TAB>count = 0
<TAB>for item in list:
        if item == num:
            count = count + 1
<TAB>return count
"
17. python function to modify a tuple	"def modify_tuple(t):
<TAB>print(f'Initial t mem-add = {id(t)}')
<TAB>t[0].append(100)
<TAB>print(f'Final t mem-add = {id(t)}')
"
Write a Python program to convert a string to datetime.	"from datetime import datetime
date_object = datetime.strptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')
print(date_object)
"
44 Define a python function that can read text file from a given URL	"import requests


def read_data(url):
<TAB>data = requests.get(url).text
<TAB>return data
"
write a python program that takes two sets as input and print the common elements	"s1 = eval(input(""Enter set 1 ""))
s2 = eval(input(""Enter set 2 ""))
print(s1.intersection(s2))
"
Replace punctuations with #	"replace_char = '#'


for char in punctuation:
<TAB>str1 = str1.replace(char, replace_char)


print(f""The strings after replacement : {str1}"")
"
86 Write a Python program to generate groups of five consecutive numbers in a list	"l = [[5 * i + j for j in range(1, 6)] for i in range(5)]
print(l)
"
write a python function to find H.C.F of two numbers	"def compute_hcf(x, y):
<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf
"
display the unpunctuated string	"print(no_punct)
"
27. Python Palindrome Program using Functions	"
reverse = 0


def integer_reverse(number):
<TAB>global reverse

<TAB>if(number > 0):
        Reminder = number % 10
        reverse = (reverse * 10) + Reminder
        integer_reverse(number // 10)
<TAB>return reverse


number = int(input(""Please Enter any Number: ""))


rev = integer_reverse(number)
print(""Reverse of a Given number is = %d"" % rev)


if(number == rev):
<TAB>print(""%d is a Palindrome Number"" % number)
else:
<TAB>print(""%d is not a Palindrome Number"" % number)
"
Write a python function to select files from a directory that have been modified in last x hours given by the user	"import glob
import os
import random
import datetime


def retrieve_last_files(src_dir_path, last_modified_hour):
<TAB>if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
<TAB>if(last_modified_hour < 0 or last_modified_hour > 24):
        print(""Invalid delta requested"")
        raise ValueError

<TAB>files_in_dir = glob.glob(src_dir_path + ""/*.*"")
<TAB>if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
<TAB>return [filename for filename in files_in_dir if (datetime.datetime.fromtimestamp(os.path.getmtime(filename)) < datetime.datetime.now() + datetime.timedelta(hours=last_modified_hour))]
"
Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given	"

def find_temp_of_ideal_gas(pressure: float, volume: float, n: float) -> float:
<TAB>r = 8.3145  
<TAB>return (pressure * volume) / n * r
"
write a python program to sort dictionary items	"

dict1 = {'car': [7, 6, 3],
         'bike': [2, 10, 3],
         'truck': [19, 4]}


print(f""The original dictionary is : {str(dict1)}"")


res = dict()
for key in sorted(dict1):
<TAB>res[key] = sorted(dict1[key])


print(f""The sorted dictionary : {str(res)}"")
"
Write Python Program to print the Length of a String Without Using a Library Function	"string = ""United States of America""
count = 0
for i in string:
<TAB>count = count + 1
print(""Length of the string is:"")
print(count)
"
Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string	"def removeChars(str, n):
<TAB>return str[n:]
"
52 write a program to check Armstrong number	"

num = int(input(""Enter a number: ""))
sum = 0
temp = num

while temp > 0:
<TAB>digit = temp % 10
<TAB>sum += digit ** 3
<TAB>temp //= 10

if num == sum:
<TAB>print(num, ""is an Armstrong number"")
else:
<TAB>print(num, ""is not an Armstrong number"")
"
write a python function to find the resolution on the user provided image	"

def jpeg_res(filename):
<TAB>with open(filename, 'rb') as img_file:
        img_file.seek(163)
        a = img_file.read(2)
        height = (a[0] << 8) + a[1]
        a = img_file.read(2)
        width = (a[0] << 8) + a[1]
<TAB>print(f""The resolution of the image is {width}x{height}"")
"
Write a Python program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 and print the result.	"

nl = []
for x in range(1500, 2700):
<TAB>if (x % 7 == 0) and (x % 5 == 0):
        nl.append(str(x))
print(""\n"".join(nl))
"
write a python function that returns True if the product of two provided numbers is even	"def is_prod_even(num1, num2):
<TAB>prod = num1 * num2
<TAB>return not prod % 2
"
write a python program to print unique numbers in a list	"numbers = [1, 2, 2, 3, 4, 4, 5, 6]
unique = set(numbers)
print(f'Unique numbers: {list(unique)}')
"
Given an input string, count occurrences of all characters within a string	"str1 = ""Apple""
countDict = dict()
for char in str1:
<TAB>count = str1.count(char)
<TAB>countDict[char] = count
print(countDict)
"
Write a Python function to Find Whether a Number is a Power of Two	"def is_power_of_two(n):
<TAB>if n <= 0:
        return False
<TAB>else:
        return n & (n - 1) == 0
"
write program to convert string to upper case	"st = ""ammar adil""


upper_st = st.upper()
print(""Upper Case"", upper_st)
"
write a program to check if year is a leap year or not	"

year = int(input(""Year: ""))


if (year % 4) == 0:
<TAB>if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
<TAB>else:
        print(""{0} is a leap year"".format(year))
else:
<TAB>print(""{0} is not a leap year"".format(year))
"
85 write a python program to print rear element extraction from list of tuples records	"

test_list = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]
print(""The original list is : "" + str(test_list))
s = []
for i in test_list:
<TAB>l = len(i)
<TAB>s.append(i[l - 1])
print(s)
"
generate a random float where the value is between 5 and 95 using Python math module.	"import random
print(random.random() * 100 - 5)
"
write a program which count and print the numbers of each character in a string input by console.	"dic = {}
s = raw_input()
for s in s:
<TAB>dic[s] = dic.get(s, 0) + 1
print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))
"
Write a function to return the surface area of a sphere	"def cal_area_sphere(radius):
<TAB>pi = 3.14
<TAB>return 4 * pi * (radius**2)
"
Assigning types to variables as values	"a_var = str
a_var(123)
"
write a python program to find the number of files in a directory	"

import os
dir = '.'
list = os.listdir(dir)
number_files = len(list)
print(f'There are {number_files} file in the directory')
"
write a python function to capitalize the first letter of a string	"

def capitalize(s, lower_rest=False):
<TAB>return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])
"
46. python function for finding the derivative of tangent angle	"def dtangent(angle):
<TAB>

<TAB>return 1 / (math.cos(angle)**2)
"
write a python function to sort the dictionary by key	"

def sort_dict_by_key(d, reverse=False):
<TAB>return dict(sorted(d.items(), reverse=reverse))
"
Write a function that strips every vowel from a string provided	"def strip_vowels(input_str: str) -> str:

<TAB>vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
<TAB>return ''.join(list(filter(lambda x: x not in vowels, input_str)))
"
11 access index of a character in a string python	"foo = 'Hello'
foo.find('lo')
"
Given a sorted integer array without duplicates, return the summary of its ranges.	"input_array = [0, 1, 2, 4, 5, 7]
start = 0
result = []
while start < len(input_array):
<TAB>end = start
<TAB>while end + 1 < len(input_array) and ((input_array[end + 1] - input_array[end]) == 1):
        end = end + 1
<TAB>if end != start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
<TAB>else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
<TAB>start = end + 1


print(result)
"
23 write a function to calculate the residual sum of squares between two lists of the same size	"

def rss(lst1, lst2):
<TAB>diff = [lst1[x] - lst2[x] for x in range(len(lst1))]
<TAB>return sum(list(map(lambda x: x ** 2, diff)))
"
write a python program to trim whitespace characters from a string and print it	"

string = ' asdga \t\r'
print(string.strip())
"
write a python function to flatten one level of nesting	"def flatten(list_of_lists):
<TAB>from itertools import chain
<TAB>return chain.from_iterable(list_of_lists)
"
Write a Python Program to print a list of fibonacci series for a given no using closer	"

def fib():
<TAB>cache = {1: 1, 2: 1}

<TAB>def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
<TAB>return calc_fib
"
Write a function that returns a dictionary sorted ascending by its keys	"def ascending_dict_keysort(d: dict):
<TAB>return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[0])}
"
write a python program to print python version using sys	"import sys


print(f""{sys.version}"")
"
57 Write a Python function to find the single number in a list that doesn't occur twice.	"def single_number(arr):
<TAB>result = 0
<TAB>for i in arr:
        result ^= i
<TAB>return result
"
write a Python Program to Add two binary numbers and print the sum	"num1 = '00001'
num2 = '10001'
sum = bin(int(num1, 2) + int(num2, 2))
print(sum)
"
write a Python function to clone or copy a list using the in-built function list()	"def Cloning(li1):
<TAB>li_copy = list(li1)
<TAB>return li_copy


li1 = [4, 8, 2, 10, 15, 18]
li2 = Cloning(li1)
print(""Original List:"", li1)
print(""After Cloning:"", li2)
"
write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) given the temperature value and its unit	"

def temp_converter(value, unit):
<TAB>if unit == 'F' and value in range(32, 212):
        converts = (value - 32) * 5.0 / 9.0
        return converts
<TAB>elif unit == 'C' and value in range(0, 100):
        converts = (9.0 / 5.0) * value + 32
        return converts
<TAB>else:
        raise ValueError
"
function to Convert Binary to Gray Code	"def binary_to_gray(n):
<TAB>n = int(n, 2)
<TAB>n ^= (n >> 1)
<TAB>return bin(n)[2:]
"
Create list of numbers using lambda function but not the right way	"my_list = [lambda: i for i in range(5)]
for l in my_list:
<TAB>print(l())
"
"write Python3 code to demonstrate Shift from Front to Rear in List using list slicing and ""+"" operator"	"test_list = [1, 4, 5, 6, 7, 8, 9, 12]
print(""The original list is : "" + str(test_list))
test_list = test_list[1:] + test_list[: 1]
print(""The list after shift is : "" + str(test_list))
"
77 show all local values while one function is running	"def show_local():
<TAB>import math
<TAB>a = 10
<TAB>b = 'Hello There'
<TAB>print(locals())
"
Write a function to identify if value is present inside a dictionary or not	"def check_value(d: dict, value) -> bool:
<TAB>return any(v == value for v in dict.values())
"
write a python function that squares every number in a list using a list comprehension and returns the result	"def square_numbers(nums):
<TAB>return [i * i for i in nums]
"
Write a Python program to print euclidean distance between two array/ vectors	"import numpy as np
a = np.array([78, 84, 87, 91, 76])
b = np.array([92, 83, 91, 79, 89])
dist = np.linalg.norm(a - b)
print('Differnce in performance between A and B : ', dist)
"
65 Write a Python function to check if a given string is an anagram of another given string.	"def is_anagram(str1, str2):
<TAB>list_str1 = list(str1)
<TAB>list_str1.sort()
<TAB>list_str2 = list(str2)
<TAB>list_str2.sort()

<TAB>return (list_str1 == list_str2)
"
Python program to count number 4 in the given list	"def list_count_4(nums):
<TAB>count = 0
<TAB>for num in nums:
        if num == 4:
            count = count + 1

<TAB>return count


print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))
"
write a python function to return the largest value in a dictionary	"

def dic_largest(dic):
<TAB>return max(dic.values())
"
52 callable_check	"def collable_check(x: ""Leterally can be anything""):
<TAB>return callable(x)
"
Write a python program to print only upto the letter 't' in a given string.	"

s = ""hi i love python""


i = 0
while s[i] != 't':
<TAB>print(s[i], end='')
<TAB>i += 1
"
Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output	"

test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]
print(""The original list is : "" + str(test_list))

res = []
for sub in test_list:
<TAB>if res and res[-1][0] == sub[0]:
        res[-1].extend(sub[1:])
<TAB>else:
        res.append([ele for ele in sub])
res = list(map(tuple, res))

print(""The extracted elements : "" + str(res))
"
Write a python function to extract only alphabets from a given string and also exclude spaces	"def extract_alpha(my_string):
<TAB>return """".join([c for c in my_string if c.isalpha()])
"
Write a Python program to select integers from a string and print those integers	"

s = input()
l = len(s)


i = 0
while i < l:
<TAB>num = ''
<TAB>symbol = s[i]
<TAB>while symbol.isdigit():
        num += symbol
        i += 1
        if i < l:
            symbol = s[i]
        else:
            break
<TAB>if num != '':
        print(num)
<TAB>i += 1
"
write Python program to demonstrate printing of complete multidimensional list row by row.	"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
for record in a:
<TAB>print(record)
"
write a python program to get positive elements from given list of lists	"Input = [[10, -11, 222], [42, -222, -412, 99, -87]]
temp = map(lambda elem: filter(lambda a: a > 0, elem), Input)
Output = [[a for a in elem if a > 0] for elem in temp]
"
write a python program to check two lists are equal or not	"

a = frozenset(set([5, 6, 7]))
print(a)
"
Write a function to reverse a string	"

def revStr(inp):
<TAB>inp = inp[::-1]
<TAB>return inp
"
44. python function for finding the derivative of sine angle	"def dsine(angle):
<TAB>

<TAB>return math.cos(angle)
"
Write a Python program to remove duplicates from a list.Example:# Input a = [10,20,30,20,10,50,60,40,80,50,40]# Output [10, 20, 30, 50, 60, 40, 80]	"

a = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]
dup_items = set()
uniq_items = []
for x in a:
<TAB>if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)
print(uniq_items)
"
97 write a python function that accepts a number, and returns the nearest square number	"import math


def nearest_square(n):
<TAB>upp = math.floor(math.sqrt(n))
<TAB>low = math.floor(math.sqrt(n))
<TAB>upp_diff = upp ** 2 - n
<TAB>low_diff = n - low ** 2

<TAB>if upp_diff > low_diff:
        return upp
<TAB>else:
        return low
"
write a program that uses delete function on  Dictionary	"Dict = {5: 'Welcome', 6: 'To', 7: 'Geeks',
        'A': {1: 'Geeks', 2: 'For', 3: 'Geeks'},
        'B': {1: 'Geeks', 2: 'Life'}}
print(""Initial Dictionary: "")
print(Dict)


del Dict[6]
print(""\nDeleting a specific key: "")
print(Dict)


del Dict['A'][2]
print(""\nDeleting a key from Nested Dictionary: "")
print(Dict)
"
write a python Program to find area of circle	"

PI = 3.14
radius = float(6)
area = PI * radius * radius
circumference = 2 * PI * radius
print(f'Area Of a Circle {area}')
print(f'Circumference Of a Circle {circumference}')
"
write Python3 code to demonstrate working of Check if tuple has any None value using not + all()	"test_tup = (10, 4, 5, 6, None)
print(""The original tuple : "" + str(test_tup))
res = not all(test_tup)
print(""Does tuple contain any None value ? : "" + str(res))
"
18. Python Program to Print the Fibonacci sequence	"

nterms = int(input(""How many terms? ""))


n1, n2 = 0, 1
count = 0


if nterms <= 0:
<TAB>print(""Please enter a positive integer"")
elif nterms == 1:
<TAB>print(""Fibonacci sequence upto"", nterms, "":"")
<TAB>print(n1)
else:
<TAB>print(""Fibonacci sequence:"")
<TAB>while count < nterms:
        print(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1
"
write a program to print binary of a decimal number n	"

binaryNum = [0] * n
i = 0
while (n > 0):
<TAB>binaryNum[i] = n % 2
<TAB>n = int(n / 2)
<TAB>i += 1


for j in range(i - 1, -1, -1):
<TAB>print(binaryNum[j], end="""")
"
write a python function that takes in two numbers and returns their HCF	"def hcf(num1, num2):
<TAB>smaller = num1 if num1 < num2 else num2
<TAB>for i in range(1, smaller + 1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
<TAB>return hcf
"
write a python function to remove vowels from a string	"def vowel_remover(text):
<TAB>string = """"
<TAB>for l in text:
        if l.lower() != ""a"" and l.lower() != ""e"" and l.lower() != ""i"" and l.lower() != ""o"" and l.lower() != ""u"":
            string += l
<TAB>return string
"
45 write a program to display the calender	"

import calendar
yy = int(input(""Enter year: ""))
mm = int(input(""Enter month: ""))

print(calendar.month(yy, mm))
"
Compute the product of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a * b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")
"
94 write a python function that takes in a decimal number and prints it's binary representation	"

def dec2bin(num):
<TAB>print(format(num, ""b""))
"
write a python program to print bitwise AND operation	"a = 60
b = 13
a_and_b = a & b
print(a_and_b)
"
Convert string into a datetime object	"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
Write a program to print the union of two sets	"

Set1 = {""1"", ""2"", ""3""}
Set2 = {""a"", ""b"", ""c""}
Set = Set1.union(Set2)


print(Set)
"
Write a Python program to Separate positive numbers from negative and print the positive numbers and negative numbers separately	"

from random import random


a = []
for i in range(7):
<TAB>n = int(random() * 20) - 10
<TAB>a.append(n)


print(a)


neg = []
pos = []
for i in a:
<TAB>if i < 0:
        neg.append(i)
<TAB>elif i > 0:
        pos.append(i)


print(neg)
print(pos)
"
"Assuming that we have some email addresses in the ""username@companyname.com"" format, write program to print the company name of a given email address. Both user names and company names are composed of letters only."	"import re
emailAddress = raw_input()
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2, emailAddress)
print(r2.group(2))
"
40. Python Program to Add Two Matrices	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]


for r in result:
<TAB>print(r)
"
96 write a python function that takes a number and returns an array of the number duplicated n times	"

def duplicate_array(num, n):
<TAB>num = [num] * n
<TAB>return num
"
"write a python program that would print ""Hello World"""	"print(""Hello World"")
"
Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
<TAB>totalMarks += mark


percentage = totalMarks / len(markList)
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)
"
write a python program to sort and print a list	"given_list -= [6, 0, 4, 1]
sorted_list = sorted(given_list)
print(f'sorted list is {sorted_list}')
"
"write a python function to list unique elements, preserving order remembering only the element just seen."""	"def unique_justseen(iterable, key=None):
<TAB>import operator
<TAB>from itertools import groupby
<TAB>
<TAB>
<TAB>return map(next, map(operator.itemgetter(1), groupby(iterable, key)))
"
write a python program that print today's date	"from datetime import date
print(date.today())
"
write a python program to print the factorial of a number	"num = 5
fact = 1
while num > 0:
<TAB>fact *= num
<TAB>num -= 1
print(fact)
"
19 Write a python function to remove i'th character from a string	"

def remove(string, i):
<TAB>a = string[: i]

<TAB>b = string[i + 1:]

<TAB>return a + b
"
Write Python Program to Find the Area of a Rectangle Using Classes	"class rectangle():
<TAB>def __init__(self, breadth, length):
        self.breadth = breadth
        self.length = length

<TAB>def area(self):
        return self.breadth * self.length


a = 15
b = 10
obj = rectangle(a, b)
print(""Area of rectangle:"", obj.area())
"
write a python function that returns the weighted average of numbers	"def get_weighted_average(numbers, weightage):
<TAB>return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)
"
Removes the item at the given index from the list and returns the removed item	"my_list1 = [4, 3, 2, 9, 10, 44, 1, 9, 12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")
"
write a python function to read a CSV file and print its content	"def read_csv(filename):
<TAB>import csv
<TAB>with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)
"
Function to rotate string left and right by d length	"

def rotate(input, d):

<TAB>Lfirst = input[0: d]
<TAB>Lsecond = input[d:]
<TAB>Rfirst = input[0: len(input) - d]
<TAB>Rsecond = input[len(input) - d:]

<TAB>print(""Left Rotation : "", (Lsecond + Lfirst))
<TAB>print(""Right Rotation : "", (Rsecond + Rfirst))


input = 'GeeksforGeeks'
d = 2
rotate(input, d)
"
Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.	"input_str = raw_input()
dimensions = [int(x) for x in input_str.split(',')]
rowNum = dimensions[0]
colNum = dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]
for row in range(rowNum):
<TAB>for col in range(colNum):
        multilist[row][col] = row * col
print(multilist)
"
38 how to read a specific line from a text file in python	"line = open(""file.txt"", ""r"").readlines()[7]
"
94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.	"from itertools import product


def all_repeat(str1, rno):
<TAB>chars = list(str1)
<TAB>results = []
<TAB>for c in product(chars, repeat=rno):
        results.append(c)
<TAB>return results


print(all_repeat('xyz', 3))
"
write a python function to check if an object is an instance of a given class	"def check_instance(derived_class, base_class):
<TAB>return(isinstance(derived_class, base_class))
"
write a function to calculate the area of polygon given the number of edges, circumradius	"import math


def area_of_polygon(number_of_edges, circumradius):
<TAB>return number_of_edges * 2 * circumradius * math.sin(180 / number_of_edges) * circumradius * math.cos(180 / number_of_edges) * 0.5
"
write a Python function to Remove all duplicates from a given string	"def removeDuplicate(str):
<TAB>s = set(str)
<TAB>s = """".join(s)
<TAB>print(""Without Order:"", s)
<TAB>t = """"
<TAB>for i in str:
        if(i in t):
            pass
        else:
            t = t + i
<TAB>print(""With Order:"", t)


str1 = ""geeksforgeeks""
removeDuplicate(str1)
"
write a python program to convert Kilometers to Miles	"kilometers = float(input(""Enter value in kilometers: ""))


conv_fac = 0.621371


miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
Write a python program to print a given string without spaces	"

s = ""I love India   now I will be printed without any space""
for i in s:
<TAB>if i == ' ':
        continue
<TAB>print(i, end='')
"
write a python program to explain python zip method	"

l1 = [2, 4, 6]
l2 = [-2, -4, -6]
for i in zip(l1, l2):
<TAB>print(i)
"
write a Python program for Handling missing keys in dictionaries	"

country_code = {'India': '0091',
                'Australia': '0025',
                'Nepal': '00977'}


print(country_code.get('India', 'Not Found'))
print(country_code.get('Japan', 'Not Found'))
"
Write a Python Program to Put Even and Odd elements in a List into Two Different Lists	"

a = [2, 3, 8, 9, 2, 4, 6]
even = []
odd = []
for j in a:
<TAB>if(j % 2 == 0):
        even.append(j)
<TAB>else:
        odd.append(j)
print(""The even list"", even)
print(""The odd list"", odd)
"
Generate a random date between given start and end dates	"import random
import time


def getRandomDate(startDate, endDate):
<TAB>print(""Printing random date between"", startDate, "" and "", endDate)
<TAB>randomGenerator = random.random()
<TAB>dateFormat = '%m/%d/%Y'

<TAB>startTime = time.mktime(time.strptime(startDate, dateFormat))
<TAB>endTime = time.mktime(time.strptime(endDate, dateFormat))

<TAB>randomTime = startTime + randomGenerator * (endTime - startTime)
<TAB>randomDate = time.strftime(dateFormat, time.localtime(randomTime))
<TAB>return randomDate


print(""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))
"
write a program to find log of a number	"import math


num = 5
base = 7


print(""Log_x_b"", math.log(num, base))
"
write a program to create a string variable and print the amount of memory it consumes	"import sys
string_var = 'string variable'
print(sys.getsizeof(string_var))
"
60 Write a function program to reverse the digits of an integer.	"def reverse_integer(x):
<TAB>sign = -1 if x < 0 else 1
<TAB>x *= sign

<TAB>while x:
        if x % 10 == 0:
            x /= 10
        else:
            break

<TAB>x = str(x)
<TAB>lst = list(x)  
<TAB>lst.reverse()
<TAB>x = """".join(lst)
<TAB>x = int(x)
<TAB>return sign * x
"
write a python program to print 5 random vowels	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print([random.choice(vowels) for _ in range(5)])
"
76 write a python program  to print Dictionary values String Length Summation	"

test_dict = {'gfg': '2345',
             'is': 'abcde',
             'best': 'qwerty'}
print(""The original dictionary is : "" + str(test_dict))
list1 = list(test_dict.values())
print(list1)
s = """".join(i for i in list1)
print(f'Summation of string values is {len(s)}')
"
Write a function to adds two lists element wise	"def adds_listelements(l1: list, l2: list):
<TAB>return [i + j for i, j in zip(l1, l2)]
"
write a program for Adding a sublist	"

a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a.append([5, 10, 15, 20, 25])
print(a)
"
"Please write a program to compress and decompress the string ""hello world!hello world!hello world!hello world!""."	"import zlib
s = b'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print(t)
print(zlib.decompress(t))
"
write s python program to print the symmetric difference of two sets	"
A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A ^ B)
"
Write a function to print all possible subarrays using recursion	"def printSubArrays(arr, start, end):
<TAB>if end == len(arr):
        return
<TAB>elif start > end:
        return printSubArrays(arr, 0, end + 1)
<TAB>else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)


arr = [1, 2, 3]
printSubArrays(arr, 0, 0)
"
"Write a program which accepts a string as input to print ""Yes"" if the string is ""yes"" or ""YES"" or ""Yes"", otherwise print ""No""."	"s = raw_input()
if s == ""yes"" or s == ""YES"" or s == ""Yes"":
<TAB>print(""Yes"")
else:
<TAB>print(""No"")
"
write a function to calculate the hypotenuse of a triangle give base and height	"

import math


def calc_hypotenuse(base, height):
<TAB>return math.sqrt(base * base + height * height)
"
write a python program to convert two lists into dictionary	"

column_names = ['id', 'color', 'style']
column_values = [1, 'red', 'bold']
name_to_value_dict = dict(zip(column_names, column_values))
name_to_value_dict = {key: value for key,
                      value in zip(column_names, column_values)}
name_value_tuples = zip(column_names, column_values)
name_to_value_dict = {}
for key, value in name_value_tuples:
<TAB>if key in name_to_value_dict:
        pass
<TAB>else:
        name_to_value_dict[key] = value
print(name_to_value_dict)
"
Write a program to merge two python dictionaries	"x = {'key1': 'val1', 'key2': 'val2'}
y = {'key3': 'val3', 'key4': 'val4'}
z = {**x, **y}
"
16 write a program to find Maximum and Minimum K elements in Tuple	"test_tup = (5, 20, 3, 7, 6, 8)
print(""The original tuple is : "" + str(test_tup))
K = 2
test_tup = list(test_tup)
temp = sorted(test_tup)
res = tuple(temp[:K] + temp[-K:])
print(""The extracted values : "" + str(res))
"
Sort the string list alphabetically	"

thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")


set1 = {""a"", ""b"", ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")
"
Write a function to return the perimeter of an equilateral triangle	"def cal_perimeter_eq_triangle(a):
<TAB>return 3 * a
"
Write a python program to Check and print if Expression is Correctly Parenthesized using Stack	"

class Stack:
<TAB>def __init__(self):
        self.items = []

<TAB>def is_empty(self):
        return self.items == []

<TAB>def push(self, data):
        self.items.append(data)

<TAB>def pop(self):
        return self.items.pop()


s = Stack()
exp = ""(x+y""

for c in exp:
<TAB>if c == '(':
        s.push(1)
<TAB>elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
<TAB>if s.is_empty():
        is_balanced = True
<TAB>else:
        is_balanced = False

if is_balanced:
<TAB>print('Expression is correctly parenthesized.')
else:
<TAB>print('Expression is not correctly parenthesized.')
"
Write a Python Program to test and print Collatz Conjecture for a Given Number	"

def collatz(n):
<TAB>while n > 1:
        print(n, end=' ')
        if (n % 2):
            
            n = 3 * n + 1
        else:
            
            n = n // 2
<TAB>print(1, end='')
"
1. python function to return the nth fibonacci number	"def fib(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return (fib(n - 1) + fib(n - 2))
"
Write a python program to Implement Linear Search and print the key element if found	"

def linear_search(alist, key):
<TAB>
<TAB>for i in range(len(alist)):
        if alist[i] == key:
            return i
<TAB>return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = linear_search(alist, key)
if index < 0:
<TAB>print(f'{key} was not found.')
else:
<TAB>print(f'{key} was found at index {index}.')
"
write a python program to replace each word in a sentence with the length of the word and print it	"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))
"
Write a lambda function that gives True if the input number is even otherwise False	"

def even(a): return True if a % 2 == 0 else False
"
83 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.	"def removeDuplicate(li):
<TAB>newli = []
<TAB>seen = set()
<TAB>for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)
<TAB>return newli


li = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]
print(removeDuplicate(li))
"
11 write a python function to return the length of an array plus 27	"

def return_length(arr):
<TAB>return len(arr) + 27
"
Write a python function to remove all the odd numbers from a list and return the remaining list	"

def remove_odd(my_list):
<TAB>result = list(filter(lambda x: (x % 2 == 0), my_list))
<TAB>return result
"
Generate  random String of length 5	"import random
import string


def randomString(stringLength):
<TAB>
<TAB>letters = string.ascii_letters
<TAB>return ''.join(random.choice(letters) for i in range(stringLength))


print(""Random String is "", randomString(5))
"
Add week (7 days) and 12 hours to a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)
"
Write a python program using list comprehension to produce and print the list [(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]	"

max_count = 3
list6 = [(j + 1, i + 1) for i in range(max_count) for j in range(max_count)]
print(list6)
"
Write a python program to convert complex number to polar coordinates	"

import cmath
"
78 write a program to find the difference between 2 lists	"

list1 = [10, 20, 30, 40, 50]
list2 = [10, 20, 30, 60, 70]


print(""list1:"", list1)
print(""list2:"", list2)


print(""Difference elements:"")
print(list(set(list1) - set(list2)))
"
Write a Python Program to print Prime Factors of an Integer	"

n = 24
print(""Factors are:"")
i = 1
while(i <= n):
<TAB>k = 0
<TAB>if(n % i == 0):
        j = 1
        while(j <= i):
            if(i % j == 0):
                k = k + 1
            j = j + 1
        if(k == 2):
            print(i)
<TAB>i = i + 1
"
38 write a python program which takes in a dictionary with unique values and converts keys into values and vice versa	"

def flip_dict(d):
<TAB>tmp_dict = {}
<TAB>for pair in d.items():
        tmp_dict[pair[1]] = pair[0]
<TAB>return tmp_dict


print(flip_dict({""a"": 10, ""b"": 20, ""c"": 15}))
"
write a python function to check whether the number is a lucky number	"

def isLucky(n):

<TAB>isLucky.counter = 2
<TAB>next_position = n
<TAB>if isLucky.counter > n:
        return 1
<TAB>if n % isLucky.counter == 0:
        return 0
<TAB>next_position = next_position - next_position / isLucky.counter
<TAB>isLucky.counter = isLucky.counter + 1
<TAB>return isLucky(next_position)
"
16 write a function to immplement insert in binary search tree	"

class BinaryTreeNode:
<TAB>def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key


class Tree:
<TAB>def insert(self, root, key):
        if root is None:
            return BinaryTreeNode(key)
        else:
            if root.val == key:
                return root
            elif root.val < key:
                root.right = self.insert(root.right, key)
            else:
                root.left = self.insert(root.left, key)

        return root
"
58 Write a python program that calculates and prints the area of an ellipse	"import math


class Ellipse:
<TAB>def __init__(self, a, b):
        self.major_axis = b
        self.minor_axis = a

<TAB>def area(self):
        return math.pi * self.major_axis * self.minor_axis


ellipse = Ellipse(2, 10)
print(ellipse.area())
"
Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.	"import random
print(random.sample(range(100), 5))
"
18. Python Program to Print the Fibonacci sequence	"

nterms = int(input(""How many terms? ""))
n1, n2 = 0, 1
count = 0


if nterms <= 0:
<TAB>print(""Please enter a positive integer"")
elif nterms == 1:
<TAB>print(""Fibonacci sequence upto"", nterms, "":"")
<TAB>print(n1)
else:
<TAB>print(""Fibonacci sequence:"")
<TAB>while count < nterms:
        print(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1
"
22 Write a python program to Concatenate all elements of a list into a string and print it	"

l = ['hello', 'guys', 'have',
     'a', 'nice', 'day']
l = ' '.join(l)
print(l)
"
Write a python function to concat the input strings and there's also a choice for separator	"

def con_str(*args, sep=' '):
<TAB>return sep.join(args)
"
Write a python program to print a list with all elements as 5 and of length 10	"

list1 = [5] * 10


print(list1)
"
36 write a program insert character after every character pair	"
test_str = ""HellowWorld""


print(""The original string is : "" + test_str)
res = ', '.join(test_str[i:i + 2] for i in range(0, len(test_str), 2))

print(""The string after inserting comma after every character pair : "" + res)
"
Write a python program to print the Sum of digits of a number	"n = 12345
q = 0
while(n > 0):
<TAB>r = n % 10
<TAB>q = q + r
<TAB>n = n // 10
print(""Sum of digits is: "" + str(q))
"
Unpacking of iterables	"val1, *vals = [1, 2, 3, 4, 5]
print('val1:', val1)
print('vals:', vals)
"
write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
write a Python Program to Replace all Occurrences of ‘a’ with $ in a String	"def replacestring(txt):
<TAB>return txt.replace('A', '$')
"
write a python program to print bitwise OR operation	"a = 60
b = 13
a_or_b = a | b
print(a_or_b)
"
38 function to create a list of tuples from a given list having number and its cube in each tuple	"def list_of_tuple(l: list):
<TAB>final = [(i, pow(i, 3)) for i in l]
<TAB>return final
"
Write a python program using list comprehension to produce and print the list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]	"

start_num = 2
repeat_count = 4
max_offset = 4
list5 = [[start_num + i + j for j in range(max_offset)]
         for i in range(repeat_count)]
print(list5)
"
Write a function to return the surface area of a hemi-sphere	"def cal_area_hemisphere(radius):
<TAB>pi = 3.14
<TAB>return 2 * pi * (radius**2)
"
Write a Python program to get the copyright information using sys module	"import sys
print(""\nPython Copyright Information"")
print(sys.copyright)
print()
"
Define a function which can compute the sum of two numbers.	"def sum_nums(number1, number2):
<TAB>return number1 + number2
"
Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)	"def lucas_numbers(n):
<TAB>first, second = 2, 1
<TAB>for _ in range(n):
        first, second = second, first + second
<TAB>return first
"
write a python program to Get the maximum and minimum value in a dictionary	"

my_dict = {'x': 500, 'y': 5874, 'z': 560}


key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))


print('Maximum Value in a dictionary: ', my_dict[key_max])
print('Minimum Value in a dictionary: ', my_dict[key_min])
"
25 write a funtion to print all the files in the current directory	"

import os


def list_files():
<TAB>return os.listdir()
"
write a program to join two lists	"

list1 = [""a"", ""b"", ""c""]
list2 = [1, 2, 3]


list3 = list1 + list2
print(list3)
"
write the program to remove empty tuples from a list	"def Remove(tuples):
<TAB>tuples = filter(None, tuples)
<TAB>return tuples
"
write a python function to use a predicate and return entries particition into false entries and true entries	"def partition(pred, iterable):
<TAB>from itertools import filterfalse, tee
<TAB>
<TAB>t1, t2 = tee(iterable)
<TAB>return filterfalse(pred, t1), filter(pred, t2)
"
88 Write a Python fuction to print the depth of a dictionary.	"def dict_depth(d):
<TAB>if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
<TAB>return 0


dic = {'a': 1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))
"
write Python program to convert temperature from Fahrenheit to Kelvin	"
def Fahrenheit_to_Kelvin(F):
<TAB>return 273.5 + ((F - 32.0) * (5.0 / 9.0))


F = 100
print(""Temperature in Kelvin ( K ) = {:.3f}""
      .format(Fahrenheit_to_Kelvin(F)))
"
45. python function for finding tangent angle	"def tangent(angle):
<TAB>

<TAB>return math.tan(angle)
"
Write a function that joins elements of list	"def join_elements(l: list) -> str:
<TAB>return (''.join(str(l)))
"
write a python function to find the largest element in an array and return the result	"def largest(arr):
<TAB>max = arr[0]
<TAB>n = len(arr)
<TAB>for i in range(1, n):
        if arr[i] > max:
            max = arr[i]
        return max


largest([1, 20, 3])
"
write a python function to get symmetric difference between two sets from user.	"def symmetric_diff_sets():
<TAB>M, m = input(), set(list(map(int, input().split())))
<TAB>N, n = input(), set(list(map(int, input().split())))
<TAB>s = sorted(list(m.difference(n)) + list(n.difference(m)))
<TAB>for i in s:
        print(i)
"
29. Python Program to Concatenate Strings	"

str1 = input(""Please Enter the First  String : "")
str2 = input(""Please Enter the Second String : "")


concat1 = str1 + str2
print(""The Final String After Python String Concatenation = "", concat1)


concat2 = str1 + ' ' + str2
print(""The Final After String Concatenation with Space = "", concat2)
"
write s python program to print the intersection of two sets	"
A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A & B)
"
write a python program to use extend in list/ append to a list	"a = [13, 56, 17]
a.append([87])
a.extend([45, 67])
print(a)
"
15.Python program to display all the prime numbers within an interval	"

lower = 900
upper = 1000


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
<TAB>
<TAB>if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
write a python program to add two lists using map and lambda	"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
result = map(lambda x, y: x + y, nums1, nums2)
print(list(result))
"
100 write a python program that checks if a string is a pallindrome	"

def is_palindrome(st):
<TAB>st = st.lower()
<TAB>rev_st = st[::-1]
<TAB>try:
        assert rev_st == st
        return True
<TAB>except AssertionError:
        return False


st = ""Nitin""
print(is_palindrome(st))
"
write a python program that takes input an integer and find sum of series with cubes of first n natural numbers using list comprehension which ta	"N = int(input(""Enter Integer ""))
lst = [i**3 for i in range(1, N + 1)]
print(sum(lst))
"
write a python program to iterate through a string using lambda and print the result	"letters = list(map(lambda x: x, 'human'))
print(letters)
"
Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.	"import itertools


def loan_schedule(principal, interest_rate, annual_payment, tenure):
<TAB>if(tenure <= 0):
        print(""Invalid tenure"", tenure)
        raise ValueError
<TAB>if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"", interest_rate,
              "" Expected between 0 and 1"")
        raise ValueError
<TAB>cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
<TAB>effective_interest_rate = 1 + interest_rate
<TAB>return [val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal * effective_interest_rate + pmt))) if val > 0]
"
write a python program to adds every 3rd number in a list	"from functools import reduce
input_list = [x for x in range(10)]
res = reduce(lambda x, y: x + y,
             [i for idx, i in enumerate(input_list) if (idx + 1) % 3 == 0])


print(f""{res}"")
"
write a program to find the last position of a given substring in a given string	"str1 = ""Emma is a data scientist who knows Python. Emma works at google.""
print(f""Original String is: {str1}"")


index = str1.rfind(""Emma"")
print(f""Last occurrence of Emma starts at {index}"")
"
Write a function to calculate the potential energy of an object of mass m at height h	"def cal_pe(mass: float, height: float) -> float:
<TAB>g = 9.8
<TAB>return (mass * g * height)
"
write a python program to handle exception when a given value is less than 10	"

def check(x):
<TAB>if x < 10:
        raise ValueError('x should not be less than 10!')
<TAB>else:
        return x


check(9)
"
9 write a program to find the frequency of words present in a string	"
test_str = 'times of india times new india express'
print(""The original string is : "" + str(test_str))


res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency : "" + str(res))
"
write a python program to use string replace	"

print('abcdef12'.replace('cd', '12'))
"
write a python program that converts a hexadecimal number to hexadecimal and prints it	"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)
"
12 write a program to convert key-values list to flat dictionary	"

from itertools import product
test_dict = {'month': [1, 2, 3],
             'name': ['Jan', 'Feb', 'March']}

print(""The original dictionary is : "" + str(test_dict))

res = dict(zip(test_dict['month'], test_dict['name']))
print(""Flattened dictionary : "" + str(res))
"
Write a python program for printing number of unique elements in a list	"input_list = [1, 2, 2, 5, 8, 4, 4, 8]

l1 = []

count = 0

for item in input_list:
<TAB>if item not in l1:
        count += 1
        l1.append(item)


print(""No of unique items are:"", count)
"
write a python program to check Armstrong number of n digits	"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
<TAB>digit = temp % 10
<TAB>sum += digit ** order
<TAB>temp //= 10
if num == sum:
<TAB>print(num, ""is an Armstrong number"")
else:
<TAB>print(num, ""is not an Armstrong number"")
"
write a Python Program to Find the Square Root	"

num = 8


num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
Write a Python program to sort (Descending) a dictionary by value.	"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}


print({k: v for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True)})
"
write a python list comprehension to transpose a 2D matrix (provided as list)	"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrixT = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
"
Please write a program which accepts a string from console and print it in reverse order.	"s = input()
s = s[::-1]
print(s)
"
write a python function to return the dot product of two vectors	"def dotproduct(vec1, vec2):
<TAB>return sum(map(operator.mul, vec1, vec2))
"
Write a method which can calculate square value of number	"def square(num):
<TAB>return num ** 2
"
Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.	"import logging


def create_logging_level(user_func, user_filename, user_loglevel):
<TAB>logger = logging.getLogger('simple_example')
<TAB>logger.setLevel(user_loglevel)
<TAB>ch = logging.FileHandler(user_filename)
<TAB>ch.setLevel(user_loglevel)
<TAB>logger.addHandler(ch)

<TAB>if callable(user_func):
        user_func(logger)
"
"write a program to compress and decompress the string ""hello world!hello world!hello world!hello world!""."	"import zlib
s = 'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print(t)
print(zlib.decompress(t))
"
Given an array of integers, return indices of the two numbers such that they add up to a specific target.	"input_array = [2, 7, 11, 15]
target = 26
result = []


for i, num in enumerate(input_array):
<TAB>for j in range(i + 1, len(input_array)):
        print(i, j)
"
Write a function to create all possible permutations from a given collection of distinct numbers	"def permute(nums):
<TAB>result_perms = [[]]
<TAB>for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
<TAB>return result_perms
"
18 write a function to create a linked list with given length and print the list after	"

class Node:
<TAB>def __init__(self, val):
        self.val = val
        self.next = None


class LList:
<TAB>def __init__(self):
        self.head = None


def create_linked_list(*args):
<TAB>linked_list = LList()
<TAB>linked_list.head = Node(args[0])
<TAB>prev = linked_list.head

<TAB>for i in range(1, len(args)):
        entry = Node(args[i])
        prev.next = entry
        prev = entry
<TAB>return
"
check if all char in the string are alphabetic	"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")
"
Write a Python program to convert a list of multiple integers into a single integer	"L = [11, 33, 50]
x = int("""".join(map(str, L)))
print(""Single Integer: "", x)
"
Write a python Class to print All Possible Subsets from a Set of Distinct Integers	"

class sub:
<TAB>def f1(self, s1):
        return self.f2([], sorted(s1))

<TAB>def f2(self, curr, s1):
        if s1:
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])
        return [curr]


a = [2, 3, 5, 6, 4, 5]


print(""Subsets: "")
print(sub().f1(a))
"
Write a python function to find all files with a given pattern in a source directory to a different destination directory	"import glob
import os


def find_move_files(src_dir_path, dst_dir_path, file_pattern):
<TAB>if(os.path.exists(dst_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
<TAB>all_png_files = glob.glob(src_dir_path + ""/*"" + file_pattern)
<TAB>if (len(all_png_files) > 0):
        for file_name in all_png_files:
            base_file_name = os.path.basename(file_name)
            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))
        return
<TAB>else:
        print(""No files with matching pattern found"")
        return
"
83 write a program to Capitalizes the first letter of each word in a string	"

def capitalize(text):
<TAB>return text.title()


str1 = ""Hello world!""
str2 = ""hello world!""
str3 = ""HELLO WORLD!""
str4 = ""includehelp.com is a tutorials site""


print(""str1: "", str1)
print(""str2: "", str2)
print(""str3: "", str3)
print(""str4: "", str4)
print()
"
write a python program that prints the area of a square	"side = 5
print(f'Area: {side * side}')
"
3. Write a program to reverse dictionary key order	"

sample_dict = {1: 'Hi', 2: 'Hello', 3: 'Hey'}


print(""The original dictionary : "" + str(sample_dict))


res = dict(reversed(list(sample_dict.items())))


print(""The reversed order dictionary : "" + str(res))
"
24 how to convert fahrenheit to celsius in python	"Celsius = (Fahrenheit - 32) * 5.0 / 9.0
"
program Creating a Dictionary with Mixed keys	"Dict = {'Name': 'Geeks', 1: [1, 2, 3, 4]}
print(""\nDictionary with the use of Mixed Keys: "")
print(Dict)
"
write a python program which takes input a list and prints the standard deviation of elements within the list	"mean = sum(s1) / len(s1)
variance = sum([((x - mean) ** 2) for x in s1]) / len(s1)
res = variance ** 0.5
print(""Standard deviation of sample is : "" + str(res))
"
Write a python function to identify type of given data structure	"

def ds_type(ds):
<TAB>return(type(ds))


l = [1, 2, 3, 4]
ds_type(l)
"
6. Write a program to strips every vowel from a string provided	"

vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""hello""


print('Vowel in a string', ' '.join(
<TAB>[x for x in input_string.lower() if x not in vowels]))
"
Write a python function to Check whether triangle is valid or not if three points are given	"def checkTriangle(x1, y1, x2, y2, x3, y3):
<TAB>a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))
<TAB>if a == 0:
        return False
<TAB>else:
        return True
"
Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.	"def max_len_str(s1, s2):
<TAB>len1 = len(s1)
<TAB>len2 = len(s2)
<TAB>if len1 > len2:
        print(s1)
<TAB>elif len2 > len1:
        print(s2)
<TAB>else:
        print(s1)
        print(s2)
"
Write a python program to implement bubble sort and print the result	"from random import randint


N = 7
a = []


for i in range(N):
<TAB>a.append(randint(1, 20))
print(a)


for i in range(N - 1):
<TAB>for j in range(N - i - 1):
        if a[j] > a[j + 1]:
            b = a[j]
            a[j] = a[j + 1]
            a[j + 1] = b


print(a)
"
Write a Python function to return Tribonacci's Sequence	"def tribonacci_seq(n):
<TAB>if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        elif n == 2:
            return 1
        else:
            return tribonacci_seq(n - 1) + tribonacci_seq(n - 2) + tribonacci_seq(n - 3)
"
Write Python Program to print Common Letters in Two Input Strings	"s1 = ""Trump was the American President""
s2 = ""Who is the American President now?""
a = list(set(s1) & set(s2))
print(""The common letters are:"")
for i in a:
<TAB>print(i)
"
50 write a python function to find the median on an array of numbers	"def median(arr):

<TAB>if len(arr) == 1:
        return arr[0]

<TAB>else:
        arr = sorted(arr)
        a = arr[0:round(len(arr) / 2)]
        b = arr[len(a):len(arr)]
        if len(arr) % 2 == 0:
            return (a[len(a) - 1] + b[0]) / 2
        else:
            return a[len(a) - 1]
"
test if string contains digits	"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")
"
write a function to rotate string right by a given length	"

def rotate_right(input, d):

<TAB>Rfirst = input[0: len(input) - d]
<TAB>Rsecond = input[len(input) - d:]
<TAB>return (Rsecond + Rfirst)
"
Write a function that returns Gets the derivative of exponential of x	"def derivative_exp(x: float) -> float:
<TAB>import math
<TAB>return math.exp(x)
"
44. Python Program to Multiply Two Matrices using Nested Loop	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]

for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]

for r in result:
<TAB>print(r)
"
Write a program to convert kilometers per hour to mile per hour	"

kmh = 16
mph = 0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")
"
write a Python function to Determine all Pythagorean Triplets in the Range	"def findpythagoreantriplets(limit):
<TAB>c = 0
<TAB>m = 2
<TAB>while(c < limit):
        for n in range(1, m + 1):
            a = m * m - n * n
            b = 2 * m * n
            c = m * m + n * n
            if(c > limit):
                break
            if(a == 0 or b == 0 or c == 0):
                break
            print(a, b, c)
        m = m + 1
"
83 Write a Python program to move all spaces to the front of a given string in single traversal.	"def moveSpaces(str1):
<TAB>no_spaces = [char for char in str1 if char != ' ']
<TAB>space = len(str1) - len(no_spaces)
<TAB>result = ' ' * space
<TAB>return result + ''.join(no_spaces)
"
write a python program to multiple two list values	"

l1 = [1, 2, 3]
l2 = [4, 5, 6]
print('multiply two list values:', [x * y for x in l1 for y in l2])
"
66 Write a Python function to push all zeros to the end of a list.	"def move_zero(num_list):
<TAB>a = [0 for i in range(num_list.count(0))]
<TAB>x = [i for i in num_list if i != 0]
<TAB>x.extend(a)
<TAB>return(x)
"
write a python program to loop over dictionaries that share (some) keys and values	"

dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}


for item in dctA.items() & dctB.items():
<TAB>print(item)
"
write a python program to print unique words in a sentence	"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)
"
write a python program to add two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
Write a python program to uppercase strings using lambda and map	"people = [""Darcy"", ""Christina"", ""Diana""]
peeps = list(map(lambda name: name.upper(), people))
print(peeps)
"
6 write a function to print merger of two dictionary	"def merge_dict(dict1: dict, dict2: dict):

<TAB>final_dict = {**dict1, **dict2}
<TAB>print(final_dict)
"
Python code to Get Kth Column of Matrix	"

def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]], k=2):

<TAB>print(""The original list is : "" + str(test_list))
<TAB>K = k
<TAB>res = list(zip(*test_list)[K])
<TAB>print(""The Kth column of matrix is : "" + str(res))
"
47 write a program to  sort Dictionary by key-value Summation and print it	"

test_dict = {3: 5, 1: 3, 4: 6, 2: 7, 8: 1}
res = sorted(test_dict.items(), key=lambda sub: sub[0] + sub[1])
res = {sub[0]: sub[1] for sub in res}
print(""The sorted result : "" + str(res))
"
81 Write a Python program to convert a given Bytearray to Hexadecimal string.	"def bytearray_to_hexadecimal(list_val):
<TAB>result = ''.join('{:02x}'.format(x) for x in list_val)
<TAB>return(result)
"
write a program to compute the count of each word in a sentence and print it	"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
<TAB>word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)
"
Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area.	"class Circle(object):
<TAB>def __init__(self, r):
        self.radius = r

<TAB>def area(self):
        return self.radius**2 * 3.14
"
write a python program to call different functions based on condition with same arguments	"def product(a, b):
<TAB>return a * b


def subtract(a, b):
<TAB>return a - b


b = True
print((product if b else subtract)(1, 1))
"
write a python program to Remove the Given Key from a Dictionary	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
key = 'd'
if key in d:
<TAB>del d[key]
else:
<TAB>print(""Key not found!"")
<TAB>exit(0)
"
Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.	"

items = [x for x in input().split(',')]
items.sort()
print(','.join(items))
"
Write Python Program to print if a Number is Odd or Even	"num = 102
if (num % 2) == 0:
<TAB>print(f""{num} is Even"")
else:
<TAB>print(f""{num} is Odd"")
"
write a function to merge two sorted lists	"def merge_lists(lst1, lst2):
<TAB>
<TAB>res = []
<TAB>
<TAB>if len(lst1) == 0 or len(lst2) == 0:
        res.extend(lst1 + lst2)
        return res

<TAB>last_processed_i_idx = 0
<TAB>last_processed_j_idx = 0
<TAB>for i_idx, i in enumerate(lst1):
        for j_idx, j in enumerate(lst2, start=last_processed_j_idx + 1):
            if i < j:
                res.append(i)
                last_processed_i_idx = i_idx
                break
            elif i > j:
                res.append(j)
                last_processed_j_idx = j_idx
                continue
            else:
                res.append(i)
                last_processed_i_idx = i_idx
                res.append(j)
                last_processed_j_idx = j_idx
                break

<TAB>if len(lst1) == last_processed_i_idx:
        res.extend(lst2[last_processed_j_idx + 1:])

<TAB>if len(lst2) == last_processed_j_idx:
        res.extend(lst1[last_processed_i_idx + 1:])
<TAB>return res
"
write a python program to find index of min element	"lst = [40, 10, 20, 30]


def minIndex(lst):
<TAB>return min(range(len(lst)), key=lst.__getitem__)


print(minIndex(lst))
"
write a python program to print a set of all elements in either set1 or set2, but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
write a python program to display the Fibonacci sequence up to n-th term	"nterms = int(input(""How many terms? ""))


n1, n2 = 0, 1
count = 0


if nterms <= 0:
<TAB>print(""Please enter a positive integer"")
elif nterms == 1:
<TAB>print(""Fibonacci sequence upto"", nterms, "":"")
<TAB>print(n1)
else:
<TAB>print(""Fibonacci sequence:"")
<TAB>while count < nterms:
        print(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1
"
write a python function to check if a given string is symmetrical	"

def symmetry(a):

<TAB>n = len(a)
<TAB>flag = 0

<TAB>if n % 2:
        mid = n // 2 + 1
<TAB>else:
        mid = n // 2

<TAB>start1 = 0
<TAB>start2 = mid

<TAB>while(start1 < mid and start2 < n):

        if (a[start1] == a[start2]):
            start1 = start1 + 1
            start2 = start2 + 1
        else:
            flag = 1
            break

<TAB>return flag
"
write a python program to merge 2 dictionaries	"x = {'a': 1, 'b': 2, 'c': 3}
y = {'x': 10, 'y': 20, 'z': 30}
z = {**x, **y}
"
write a python function for dice roll asking user for input to continue and randomly give an output.	"def dice():
<TAB>import random
<TAB>min = 1
<TAB>max = 6
<TAB>roll_again = 'y'

<TAB>while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")


from cryptography.fernet import Fernet
"
write a program to convert list to tuple	"l = ['a', 4, 5]
print(f'tuple:{tuple(l)}')
"
write Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]
print(""intial_list"", str(ini_tuple))
result = list(filter(lambda x: x[1] <= 100, ini_tuple))
print(""Resultant tuple list: "", str(result))
"
Please write a program which prints all permutations of [1,2,3]	"import itertools
print(list(itertools.permutations([1, 2, 3])))
"
Write a function to implement stooge sort	"def stoogesort(arr, l, h):
<TAB>if l >= h:
        return
<TAB>if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
<TAB>if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))


arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
<TAB>print(arr[i], end='')
"
write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list	"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}
"
Write a Python program that accepts a string and calculate the number of digits and letters and print them	"

x = input(""Enter a string! "")
d = l = 0
for c in x:
<TAB>if c.isdigit():
        d = d + 1
<TAB>elif c.isalpha():
        l = l + 1
<TAB>else:
        pass
print(""Letters: "", l)
print(""Digits: "", d)
"
write a python function  to convert a list of string list to a string list	"def convert_to_string_list(list_of_string_list):
<TAB>res = [''.join(str(b) for b in eval(a)) for a in list_of_string_list]
<TAB>return res
"
Writing JSON to a file	"import json
person_dict = {""name"": ""Bob"",
               ""languages"": [""English"", ""Fench""],
               ""married"": True,
               ""age"": 32
               }
with open('person.txt', 'w') as json_file:
<TAB>json.dump(person_dict, json_file)
"
write a program that multiplies corresponding elements in two lists and prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a * b for (a, b) in zip(list1, list2)]
print(prod_list)
"
"Assuming that we have some email addresses in the ""username@companyname.com"" format, write program to print the user name of a given email address. Both user names and company names are composed of letters only."	"import re
emailAddress = raw_input()
pat2 = ""(\w+)@((\w+\.)+(com))""
r2 = re.match(pat2, emailAddress)
print(r2.group(1))
"
write a python function to convert degree celsius to degree fahrenheit	"def fahrenheit(celsius):
<TAB>return (celsius * 1.8) + 32
"
Given a string, find the length of the longest substring without repeating characters.	"str = ""piyushjain""


def longest_non_repeat(str):
<TAB>i = 0
<TAB>max_length = 1

<TAB>for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
<TAB>return max_length


longest_non_repeat(str)
"
41 write a python program to check if one tuple is subset of other and print it	"

test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 10)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

res = set(test_tup2).issubset(test_tup1)
print(""Is 2nd tuple subset of 1st ? : "" + str(res))
"
Define a function that can convert a integer into a string and print it in console.	"def printValue(n):
<TAB>print(str(n))
"
write a python program to Generate a Random Number	"import random
print(random.randint(0, 9))
"
write a python program to input a number and check whether a given number is a palindrome.	"

n = int(input(""Enter number:""))
temp = n
rev = 0
while(n > 0):
<TAB>dig = n % 10
<TAB>rev = rev * 10 + dig
<TAB>n = n // 10
if(temp == rev):
<TAB>print(""The number is a palindrome!"")
else:
<TAB>print(""The number isn't a palindrome!"")
"
Write a python program to implement a Stack using One Queue	"

class Stack:
<TAB>def __init__(self):
        self.q = Queue()

<TAB>def is_empty(self):
        return self.q.is_empty()

<TAB>def push(self, data):
        self.q.enqueue(data)

<TAB>def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()


class Queue:
<TAB>def __init__(self):
        self.items = []
        self.size = 0

<TAB>def is_empty(self):
        return self.items == []

<TAB>def enqueue(self, data):
        self.size += 1
        self.items.append(data)

<TAB>def dequeue(self):
        self.size -= 1
        return self.items.pop(0)

<TAB>def get_size(self):
        return self.size


s = Stack()

print('Menu')
print('push <value>')
print('pop')
print('quit')

while True:
<TAB>do = input('What would you like to do? ').split()

<TAB>operation = do[0].strip().lower()
<TAB>if operation == 'push':
        s.push(int(do[1]))
<TAB>elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
<TAB>elif operation == 'quit':
        break
"
3 add 1 to all elements in list python	"lst = [1, 2, 3]
list(map(lambda x: x + 1, lst))
"
write a program to remove the leading and trailing characters	"txt = "",,,,,rrttgg.....banana....rrr""
x = txt.strip("",.grt"")
print(x)
"
21 write a program to remove all the characters except numbers and alphabets	"
import re

ini_string = ""123abcjw:, .@! eiw""

print(""initial string : "", ini_string)

result = re.sub('[\W_]+', '', ini_string)

print(""final string"", result)
"
Calculate number of days between two given dates	"from datetime import datetime


date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
<TAB>delta = date_1 - date_2
else:
<TAB>delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")
"
30 write a function that accepts two numbers or lists or dictionaries and returns True if the two are equal, and False otherwise	"

def check_assert(item1, item2):
<TAB>try:
        assert item1 == item2
        return True
<TAB>except AssertionError:
        return False
"
Write a program that computes the net amount of a bank account based a transaction log from console input.	"netAmount = 0
while True:
<TAB>s = raw_input()
<TAB>if not s:
        break
<TAB>values = s.split("" "")
<TAB>operation = values[0]
<TAB>amount = int(values[1])
<TAB>if operation == ""D"":
        netAmount += amount
<TAB>elif operation == ""W"":
        netAmount -= amount
<TAB>else:
        pass
print(netAmount)
"
Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given	"def find_volume_of_ideal_gas(pressure: float, temp: float, n: float) -> float:
<TAB>r = 8.3145  
<TAB>return (n * r * temp) / pressure
"
write a python function that makes all negative values in a list zero and returns it	"def make_negative_zero(items):
<TAB>return [0 if item < 0 else item for item in items]
"
29 print current day in python	"from datetime import date
today = date.today()
print(""Today's date:"", today)
"
Write a program to find and print the area of a triangle, whose height and width are given.	"h = 12
w = 11
area = 0.5 * h * w
print(area)
"
write a python program to concatenate two strings and print	"str1 = 'hello'
str2 = ' world!'
print(str1 + str2)
"
Write a Python function to create all possible permutations from a given collection of distinct numbers.	"def permute(nums):
<TAB>result_perms = [[]]
<TAB>for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
<TAB>return result_perms
"
58 function to show boolean true / false is a number	"def bool_show(a=5):
<TAB>return True * a
"
33 write a python function to flatten nested lists	"from collections import Iterable


def flatten(lis):
<TAB>for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item
"
A robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:	"import math
pos = [0, 0]
while True:
<TAB>s = raw_input()
<TAB>if not s:
        break
<TAB>movement = s.split("" "")
<TAB>direction = movement[0]
<TAB>steps = int(movement[1])
<TAB>if direction == ""UP"":
        pos[0] += steps
<TAB>elif direction == ""DOWN"":
        pos[0] -= steps
<TAB>elif direction == ""LEFT"":
        pos[1] -= steps
<TAB>elif direction == ""RIGHT"":
        pos[1] += steps
<TAB>else:
        pass
print(int(round(math.sqrt(pos[1]**2 + pos[0]**2))))
"
Write a function to remove empty list from a list using list comprehension	"def removeEmptyList(li):
<TAB>res = [ele for ele in li if ele != []]
<TAB>return res
"
write Python code to demonstrate Kth Non-None String from Rear using filter()	"

test_list = ["""", """", ""Akshat"", ""Nikhil""]


print(""The original list : "" + str(test_list))


K = 2


res = list(filter(None, test_list))[-K]


print(""The Kth non empty string from rear is : "" + str(res))
"
Write a Python Program to Find the Second Largest Number in a List	"a = [11, 22, 33, 44, 55, 66, 77, 88, 99]
a.sort()
print(""Second largest element is:"", a[n - 2])
"
99 write a python program  to get maximum of each key Dictionary List and print it	"

test_list = [{""Gfg"": 8, ""is"": 1, ""Best"": 9},
             {""Gfg"": 2, ""is"": 9, ""Best"": 1},
             {""Gfg"": 5, ""is"": 10, ""Best"": 7}]

print(""The original list is : "" + str(test_list))


res = {}
for i in test_list:
<TAB>for key, value in i.items():

        if key in res:
            res[key] = max(res[key], value)
        else:
            res[key] = value

print(""All keys maximum : "" + str(res))
"
Write a python program to Implement Heapsort and print the sorted list for the below list	"

def heapsort(alist):
<TAB>build_max_heap(alist)
<TAB>for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)


def parent(i):
<TAB>return (i - 1) // 2


def left(i):
<TAB>return 2 * i + 1


def right(i):
<TAB>return 2 * i + 2


def build_max_heap(alist):
<TAB>length = len(alist)
<TAB>start = parent(length - 1)
<TAB>while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1


def max_heapify(alist, index, size):
<TAB>l = left(index)
<TAB>r = right(index)
<TAB>if (l < size and alist[l] > alist[index]):
        largest = l
<TAB>else:
        largest = index
<TAB>if (r < size and alist[r] > alist[largest]):
        largest = r
<TAB>if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python function that returns a dictionary with the area and perimeter of a rectangle	"def calculate_rect_properties(width, height):
<TAB>return {
        'perimeter': 2 * (width + height),
        'area': width * height
<TAB>}
"
39 write a python function to return a list of all punctuations from the string library	"

import string


def return_punct():
<TAB>return string.punctuation
"
Count Tuple Elements Inside List	"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)
"
"Assuming that we have some email addresses in the ""username@companyname.com"" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only."	"import re
emailAddress = 'bing@google.com'
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2, emailAddress)
print(r2.group(2))
"
35 how to open xml file element tree	"import xml.etree.ElementTree as ET


tree = ET.parse('filename.xml')
tree_root = tree.getroot()
"
write a python function to prepend a single value in front of an iterator	"def prepend(value, iterator):
<TAB>import itertools
<TAB>return itertools.chain([value], iterator)
"
Write a function to Find the size of a Tuple in Python without garbage values	"Tuple = (10, 20)


def sizeOfTuple(tup):
<TAB>return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes'
"
write a python function to print the octal value of a decimal number	"def print_octal(dec):
<TAB>print(oct(dec))
"
Find if all elements in a list are identical	"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"",
      listOne.count(listOne[0]) == len(listOne))
"
write a python program to print anonymous function to find all the numbers divisible by 13 in the list.	"my_list = [12, 65, 54, 39, 102, 339, 221, ]


result = list(filter(lambda x: (x % 13 == 0), my_list))


print(""Numbers divisible by 13 are"", result)
"
write a program to print the bitwise OR of two numbers	"

num1 = 5
num2 = 10
print(num1 | num2)
"
write a program to print ascii code of a character	"

x = '5'
print(ord(x))
"
write Python code to convert Celsius scale to Fahrenheit scale	"def Cel_To_Fah(n):
<TAB>return (n * 1.8) + 32


n = 20
print(int(Cel_To_Fah(n)))
"
"write a python program greets the user with ""Hello"", after user inputs his name:"	"name = input(""Input your name: "")
print(""HELLO "", name)
"
write a program to create zero matrix	"rows = 2
cols = 3
M = []
while len(M) < rows:
<TAB>M.append([])
<TAB>while len(M[-1]) < cols:
        M[-1].append(0.0)


print(""Zero Matrix"")
for i in range(rows):
<TAB>row = '|'
<TAB>for b in range(cols):
        row = row + ' ' + str(M[i][b])
<TAB>print(row + ' ' + '|')
"
49 Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it	"

test_list = [{1: 3, 4: 5, 3: 5}, {1: 7, 10: 1, 3: 10}, {1: 100}, {8: 9, 7: 3}]


def func(test_list):
<TAB>return sum(list(test_list.values()))


for i in test_list:
<TAB>test_list.sort(key=func)
print(test_list)
"
54 str to list	"def str_to_list(sen):
<TAB>return list(sen)
"
write a python function to convert an integer to its roman numeral representation	"

def to_roman_numeral(num):
<TAB>lookup = [
        (1000, 'M'),
        (900, 'CM'),
        (500, 'D'),
        (400, 'CD'),
        (100, 'C'),
        (90, 'XC'),
        (50, 'L'),
        (40, 'XL'),
        (10, 'X'),
        (9, 'IX'),
        (5, 'V'),
        (4, 'IV'),
        (1, 'I'),
<TAB>]
<TAB>res = ''
<TAB>for (n, roman) in lookup:
        (d, num) = divmod(num, n)
        res += roman * d
<TAB>return res
"
write a program to convert temperature from Celsius to Fahrenheit	"

Cel = 90

Far = 9.0 / 5.0 * Cel + 32

print(""Temperature:"", Cel, ""Celsius = "", Far, "" F"")
"
access first characters in a string	"word = ""Hello World""
letter = word[0]
print(f""First Charecter in String:{letter}"")
"
Write a Python program that updates set1 by adding items from set2, except common items	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.symmetric_difference_update(set2)
print(set1)
"
write a program to print number of characters in a string	"

str1 = 'It is a glorious day'


res = len(str1)


print(""The number of characters in string are : "", str(res))
"
write Function to convert temperature  from degree Celsius to Kelvin	"def Celsius_to_Kelvin(C):
<TAB>return (C + 273.15)


C = 100
print(""Temperature in Kelvin ( K ) = "",
      Celsius_to_Kelvin(C))
"
35. Python Program to Compute LCM Using GCD	"def compute_gcd(x, y):
<TAB>while(y):
        x, y = y, x % y
<TAB>return x


def compute_lcm(x, y):
<TAB>lcm = (x * y) // compute_gcd(x, y)
<TAB>return lcm


num1 = 54
num2 = 24
print(""The L.C.M. is"", compute_lcm(num1, num2))
"
write Python3 code to demonstrate working of  Sort tuple list by Nth element of tuple  using sort() + lambda	"test_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)]
print(""The original list is : "" + str(test_list))
N = 1
test_list.sort(key=lambda x: x[N])
print(""List after sorting tuple by Nth index sort : "" + str(test_list))
"
Write a function to return the distance covered by a moving object based on speend and given time	"def cal_distance(time: float, speed: float) -> float:
<TAB>return time * speed
"
38. Python Program to Find Sum of Natural Numbers Using Recursion	"def recur_sum(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return n + recur_sum(n - 1)


num = 16
if num < 0:
<TAB>print(""Enter a positive number"")
else:
<TAB>print(""The sum is"", recur_sum(num))
"
write a program to convert date to timestamp and print the result	"import time
import datetime
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1, ""%d/%m/%Y"")
timestamp = datetime.datetime.timestamp(element)
print(timestamp)
"
write a Python program to find the second largest number in given list.	"list1 = [10, 20, 4, 45, 99]

list1.sort()
print(""Second largest element is:"", list1[-2])
"
Write a function that adds 2 iterables a and b such that a is even and b is odd	"def add_even_odd_list(l1: list, l2: list) -> list:
<TAB>return [a + b for a, b in zip(l1, l2) if a % 2 == 0 and b % 2 != 0]
"
write a python function to get prominent words from user test corpus using TFIDF vectorizer	"def get_words(corpus, new_doc, top=2):
<TAB>import numpy as np
<TAB>from sklearn.feature_extraction.text import TfidfVectorizer

<TAB>tfidf = TfidfVectorizer(stop_words='english')
<TAB>if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

<TAB>X = tfidf.fit_transform(corpus)
<TAB>feature_names = np.array(tfidf.get_feature_names())

<TAB>if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
<TAB>responses = tfidf.transform(new_doc)

<TAB>def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

<TAB>print([get_top_tf_idf_words(response, 2) for response in responses])
"
8 write a program to break a list into chunks of size N	"l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = 4
x = [l[i:i + n] for i in range(0, len(l), n)]
print(x)
"
write Python code to demonstrate to remove the tuples if certain criteria met	"

ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]


print(""intial_list"", str(ini_tuple))
result = [i for i in ini_tuple if i[1] <= 100]
print(""Resultant tuple list: "", str(result))
"
write a program to display date and time	"

import datetime
now = datetime.datetime.now()
time = now.strftime(""%Y-%m-%d %H:%M:%S"")
print(f""Current date and time : {time}"")
"
write a program to find length of list	"t = 1, 2, 3, 4, 5
print(f'tuple length: {len(t)}')
"
Write a python program to Count the Number of Lines in a Text File	"

fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
<TAB>for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)
"
write a program to find and print the smallest among three numbers	"num1 = 100
num2 = 200
num3 = 300
if (num1 <= num2) and (num1 <= num3):
<TAB>smallest = num1
elif (num2 <= num1) and (num2 <= num3):
<TAB>smallest = num2
else:
<TAB>smallest = num3
print(f'smallest:{smallest}')
"
write a function to right rotate a given list by given input	"def right_rotate(lst, n):
<TAB>n = n % len(lst)
<TAB>return lst[-n:] + lst[:-n]
"
write a Python Program to check if a number is a Perfect number and print the result	"n = 7
sum1 = 0
for i in range(1, n):
<TAB>if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
<TAB>print(""The number is a Perfect number!"")
else:
<TAB>print(""The number is not a Perfect number!"")
"
Write a python program to print sum of number digits in List	"test_list = [12, 67, 98, 34]
res = []
for ele in test_list:
<TAB>sum = 0
<TAB>for digit in str(ele):
        sum += int(digit)
<TAB>res.append(sum)
print(""List Integer Summation : "" + str(res))
"
Write a python program to turn every item of a list into its square.	"sample_list = [1, 2, 3, 4, 5, 6, 7]
square_list = [x * x for x in sample_list]
print(square_list)
"
By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
Python function to check whether a number is divisible by another number	"def multiple(m, n):
<TAB>return True if m % n == 0 else False


print(multiple(20, 5))
print(multiple(7, 2))
"
Write a python function to remove the duplicate items from a List and return the modified data list	"def remove_duplicates(data):
<TAB>c = Counter(data)
<TAB>s = set(data)
<TAB>for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
<TAB>return data
"
Write a python program to print the combination of tuples in list of tuples	"
test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]

res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]


print(""The list tuple combination : "" + str(res))
"
15. python function for datetime	"from datetime import datetime
datetime.utcnow()


def log(msg, *, dt=datetime.utcnow()):
<TAB>print(f'Message at {dt} was {msg}')
"
write a program to find and print the remainder of two number	"

num1 = 12
num2 = 10


ratio = num1 % num2
print(f'remainder:{ratio}')
"
Write a python function to remove duplicates from list	"

def remove_duplicates(lista):
<TAB>lista2 = []
<TAB>if lista:
        for item in lista:
            if item not in lista2:  
                lista2.append(item)
<TAB>else:
        return lista
<TAB>return lista2


print(""List with duplicates removed:"", remove_duplicates([1, 2, 3, 3]))
"
Write a python function to check the strength of user provided password	"

def check_password_strength(password):
<TAB>import re
<TAB>flag = 0
<TAB>while True:
        if (len(password) < 8):
            flag = -1
            break
        elif not re.search(""[a-z]"", password):
            flag = -1
            break
        elif not re.search(""[A-Z]"", password):
            flag = -1
            break
        elif not re.search(""[0-9]"", password):
            flag = -1
            break
        elif not re.search(""[_@$]"", password):
            flag = -1
            break
        elif re.search(""\s"", password):
            flag = -1
            break
        else:
            flag = 0
            print(""Strong Password"")
            break
<TAB>if flag == -1:
        print(""Weak Password"")
"
Write a Python program to convert string into a datetime object	"from datetime import datetime
date_string = ""Mar 26 2021  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
write a python function to combine three lists of equal lengths into a nested dictionary and return it	"def lists_to_dict(test_list1, test_list2, test_list3):
<TAB>res = [{a: {b: c}}
           for (a, b, c) in zip(test_list1, test_list2, test_list3)]
<TAB>return res
"
Test if string contains upper case	"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")
"
write a python program that prints out natural numbers less than or equal to the given number using a while loop	"input_num = 27
while input_num:
<TAB>print(input_num)
<TAB>input_num -= 1
"
write Python3 code to demonstrate Remove Rear K characters from String List using map() + lambda	"

test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils']


print(""The original list : "" + str(test_list))


K = 4


res = list(map(lambda i: i[: (len(i) - K)], test_list))


print(""The list after removing last characters : "" + str(res))
"
28. Python Program to Swap Two Numbers	"
a = float(input("" Please Enter the First Value a: ""))
b = float(input("" Please Enter the Second Value b: ""))


print(""Before Swapping two Number: a = {0} and b = {1}"".format(a, b))


temp = a
a = b
b = temp


print(""After Swapping two Number: a = {0} and b = {1}"".format(a, b))
"
write a program which accepts a string from console and print the characters that have even indexes.	"s = raw_input()
s = s[::2]
print(s)
"
write a progarm to sort the list in assending order	"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []


while data_list:
<TAB>minimum = data_list[0]  
<TAB>for x in data_list:
        if x < minimum:
            minimum = x
<TAB>new_list.append(minimum)
<TAB>data_list.remove(minimum)


print(f'assending_order_list: {new_list}')
"
generate a random float where the value is between 10 and 100 using Python math module.	"import random
print(random.random() * 100)
"
Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random
print(random.sample([i for i in range(1, 1001) if i %
                     5 == 0 and i % 7 == 0], 5))
"
Write a program which can compute the factorial of a given numbers. The results should be printed in a comma-separated sequence on a single line.	"def fact(x):
<TAB>if x == 0:
        return 1
<TAB>return x * fact(x - 1)


x = int(raw_input())
print(fact(x))
"
write a python program to swaps keys and values in a dict	"

_dict = {""one"": 1, ""two"": 2}
"
write a python function to return powerset of iterable	"def powerset(iterable):
<TAB>
<TAB>from itertools import chain, combinations
<TAB>s = list(iterable)
<TAB>return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))


list(powerset([1, 2, 3]))
"
write a python function to check if the given structure is a instance of list or dictionary	"def check_insst(obj):
<TAB>if isinstance(obj, list):
        return ""list""
<TAB>elif isinstance(obj, dict):
        return ""dict""
<TAB>else:
        return ""unknown""


check_insst({})
"
Calculate length of a string	"word = ""Hello World""
print(f""Length of string: {len(word)}"")
"
Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}	"import collections
my_list = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]
print(""Original List : "", my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "", ctr)
"
write a function to calculate the sum of digits of a number	"

def sum_of_digits(num):
<TAB>sum = 0
<TAB>while(num > 0):
        sum += num % 10
        num = num // 10
<TAB>return sum
"
Write a function to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1 with a given n input by input parameters.	"def f(n):
<TAB>if n == 0:
        return 0
<TAB>else:
        return f(n - 1) + 100
"
Given a two sets find the intersection and remove those elements from the first set	"firstSet = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}


intersection = firstSet.intersection(secondSet)
for item in intersection:
<TAB>firstSet.remove(item)
print(""First Set after removing common element "", firstSet)
"
write a python program to loop over dictionaries that share (some) keys	"

dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}


for ky in dctA.keys() & dctB.keys():
<TAB>print(ky)
"
23 how to check nth prime in python	"x = int(input())
n, c = 1, 0
while(c < x):
<TAB>n += 1
<TAB>for i in range(2, n + 1):
        if(n % i == 0):
            break
<TAB>if(i == n):
        c = c + 1
"
write a python code to implement Sigmoid function	"import math


def sigmoid(x):
<TAB>return 1 / (1 + math.exp(-x))
"
26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate	"def getBaseTen(binaryVal):
<TAB>count = 0

<TAB>binaryVal = binaryVal[::-1]

<TAB>for i in range(0, len(binaryVal)):
        if(binaryVal[i] == ""1""):
            count += 2**i

<TAB>return count
"
random choice	"from random import choice


a, b, c = float, int, str
for i in range(5):
<TAB>j = choice([a, b, c])(i)
<TAB>print(j, type(j))
"
Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.	"s = raw_input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))
"
write a Python program to flatten a shallow list	"

import itertools
original_list = [[2, 4, 3], [1, 5, 6], [9], [7, 9, 0], [1, 2, 3, 4]]
new_merged_list = list(itertools.chain(*original_list))
print(f'merged list/flatten:{new_merged_list}')
"
print the numbers properly by creating a list	"my_list = [lambda x=i: x for i in range(5)]
for l in my_list:
<TAB>print(l())
"
"Write a program to Expand and print a string like ""a-z"" #Example: enter first string :b # enter last string: e #Output : bcde"	"first = input(""The first: "")
last = input(""The last: "")


while first <= last:
<TAB>print(first, end='')
<TAB>first = chr(ord(first) + 1)
print()
"
Calculate the pair-wise product of two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [list1[i] * list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")
"
Write a python program to print calendar of a given year	"

import calendar

year = 2019
print(calendar.calendar(year))
"
write a python function to return the exponential of a number	"def get_exponential_value(i):
<TAB>import math
<TAB>return(math.exp(i))
"
Write a python function to get the surface_area of a rectangular prism with side as length, width and height as input	"def rec_prism_surface_area(length, width, height):
<TAB>surface_area = 2 * ((length * width) +
                        (width * height) + (height * length))
<TAB>return surface_area
"
python program to return unique element from a list	"def unique_list(l):
<TAB>x1 = []
<TAB>for a in l:
        if a not in x1:
            x1.append(a)
<TAB>return x1


print(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))
"
write a python function to multiply two user provided numbers and return the result	"def mul_two_numbers(num1, num2):
<TAB>mul = num1 * num2
<TAB>return mul
"
Write a Python function to extend a list without append.	"def extend_list_without_append(list1, list2):
<TAB>return list1.extend(list2)
"
write a python program to delete a variable	"i = 10
del i
"
write Python3 program for illustration of values() method of dictionary	"

dictionary = {""raj"": 2, ""striver"": 3, ""vikram"": 4}
print(dictionary.values())
"
Write a method which can calculate and return square value of number	"def square(num):
<TAB>return num ** 2
"
write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list	"def make_all_positive(nums):
<TAB>return [num if num > 0 else -num for num in nums]
"
write a python function to find simple interest for given principal amount, time and rate of interest.	"def simple_interest(p, t, r):
<TAB>print('The principal is', p)
<TAB>print('The time period is', t)
<TAB>print('The rate of interest is', r)

<TAB>si = (p * t * r) / 100

<TAB>print('The Simple Interest is', si)
<TAB>return si


simple_interest(8, 6, 8)
"
Write a python function to find all email-id patterns in a given string and write to a user input file	"import re


def extract_mailid(my_string, outfile):
<TAB>regex = re.compile(r'[\w]+@[\w]+\.[\w]+', re.UNICODE)
<TAB>mailids = regex.findall(my_string)
<TAB>if(len(mailids) > 0):
        with open(outfile, 'w') as mailfile:
            for mailid in mailids:
                mailfile.write(mailid + ""\n"")
        mailfile.close()
"
write a python program to print the ASCII value of a character	"character = 'x'
print(f'The ASCII value of {character} is {ord(character)}')
"
write a python function to get the minimum number in passed list	"

def min_check(x):
<TAB>min_val = x[0]
<TAB>for check in x:
        if check < min_val:
            min_val = check
<TAB>return min_val


print(f'{min_check([2,4,5,7,98])}')
"
write a program to find union of 2 arrays	"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}


union_both = a.union(b)
print(""Union"", union_both)
"
Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two	"def setBitNumber(n):
<TAB>if (n == 0):
        return 0
<TAB>msb = 0
<TAB>n = int(n / 2)
<TAB>while (n > 0):
        n = int(n / 2)
        msb += 1
<TAB>return (1 << msb)
"
Fibonacci series up to 100	"n = 100
result = []
a, b = 0, 1
while b < n:
<TAB>result. append(b)
<TAB>a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")
"
write a python function to use a predicate and return entries particition into false entries and true entries	"def partition(pred, iterable):
<TAB>from itertools import filterfalse, tee

<TAB>t1, t2 = tee(iterable)
<TAB>return filterfalse(pred, t1), filter(pred, t2)
"
Write a python program to find and print  K th column of a matrix	"

test_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]]


K = 2
res = [sub[K] for sub in test_list]
print(""The Kth column of matrix is : "" + str(res))
"
Calculate volume V	"V = 4. / 3. * math.pi * radius ** 3
print(f""Volume={V}"")
"
Check if there is a value for a key in JSON	"import json


studentJson = """"""{
   ""id"": 1,
   ""name"": ""Ishwar Venugopal"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""ishwarraja@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
<TAB>print(""value is present for given JSON key"")
<TAB>print(student.get('email'))
else:
<TAB>print(""value is not present for given JSON key"")
"
Write a program to check whether a file/path/direcory exists or not	"file_path = ""path/here""
import os.path
os.path.exists(file_path)
"
Write a Python program to keep only top 2 most frequent values as it is and replace everything else as ‘Other’ in a series	"import pandas as pd
import numpy as np
np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [12]))
ser[~ser.isin(ser.value_counts().index[:2])] = 'Other'
print(ser)
"
write a python function to add two user provided numbers and return the sum	"

def add_two_numbers(num1, num2):
<TAB>sum = num1 + num2
<TAB>return sum
"
Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.	"value = []
items = [x for x in raw_input().split(',')]
for p in items:
<TAB>intp = int(p, 2)
<TAB>if not intp % 5:
        value.append(p)
print(','.join(value))
"
Please write a function to compute the Fibonacci sequence until a given number via input paramters.	"def fibo(n):
<TAB>if n == 0:
        return 0
<TAB>elif n == 1:
        return 1
<TAB>else:
        return f(n - 1) + f(n - 2)
"
Write a Python function to create the HTML string with tags around the word(s).	"def add_tags(tag, word):
<TAB>return ""<%s>%s</%s>"" % (tag, word, tag)
"
Python program to access function iside function	"def test(a):
<TAB>def add(b):
        nonlocal a
        a += 1
        return a + b

<TAB>return add


func = test(4)
print(func(4))
"
21. python function for factorial using reduce	"def fact(n):
<TAB>from operator import mul
<TAB>from functools import reduce
<TAB>return reduce(mul, range(1, n + 1))


fact(10)
"
Write a program to check and print whether a number is palindrome or not	"num = 12321
temp = num
rev = 0
while num > 0:
<TAB>dig = num % 10
<TAB>rev = rev * 10 + dig
<TAB>num //= 10
if temp == rev:
<TAB>print(""The number is a palindrome!"")
else:
<TAB>print(""The number isn't a palindrome!"")
"
"Please write a program to print the running time of execution of ""1+1"" for 100 times."	"from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print(t.timeit())
"
write a python function for implementation of Insertion Sort	"

def insertionSort(arr):
<TAB>for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


arr = [12, 11, 13, 5, 6]
insertionSort(arr)
print(f""Sorted array is: {arr}"")
"
write a python function to convert iterable to pairwise iterable	"def pairwise(iterable):
<TAB>from itertools import tee
<TAB>a, b = tee(iterable)
<TAB>next(b, None)
<TAB>return zip(a, b)
"
write a funtion that accepts two lists of equal length and converts them into a dictioinary	"def list_to_dict(list1, list2):
<TAB>return dict(zip(list1, list2))
"
write Python3 code to demonstrate working of  Merge Python key values to list  Using setdefault() + loop	"

test_list = [{'gfg': 2, 'is': 4, 'best': 6},
             {'it': 5, 'is': 7, 'best': 8},
             {'CS': 10}]


print(""The original list is : "" + str(test_list))


res = {}
for sub in test_list:
<TAB>for key, val in sub.items():
        res.setdefault(key, []).append(val)


print(""The merged values encapsulated dictionary is : "" + str(res))
"
write a Python function to Non-Repeating Integers	"def non_repeats(radix):
<TAB>count = 0
<TAB>for num_digits in range(1, radix + 1):
        product = radix - 1
        for i in range(1, num_digits):
            product *= (radix - i)
        count += product
<TAB>return count


print(non_repeats(6))
"
Write a Python program to print the calendar of a given month and year	"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))
"
15 how to add extra zeros after decimal in python	"format(2.0, '.6f')
"
write a python program to print the ascii value of input character	"

character = input("" Enter Character :"")
print(f""Ascii value of character {character} is : "", ord(character))
"
Write a python program to flatten  a multidimensional list	"

my_list = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]


flattened = [x for temp in my_list for x in temp]
print(flattened)
"
By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
Write a python function to print the size of all the files in a directory only at topmost level	"import os


def get_filesize_for_dir(src_dir_path):
<TAB>if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
<TAB>files_in_dir = glob.glob(src_dir_path + ""/*.*"")
<TAB>if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
<TAB>total_size = 0
<TAB>for filename in files_in_dir:
        
        total_size += os.stat(filename)[6]
<TAB>return total_size
"
write a program to print number of words in a string	"

str1 = 'It is a glorious day'


res = len(str1.split())

print(""The number of words in string are : "" + str(res))
"
Write a python program to Count occurrences of given element in a list	"def countX(lst, x):
<TAB>return lst.count(x)
"
write a python function to emulate the behavior of built-in map() function	"def pad_none(iterable):
<TAB>
<TAB>from itertools import chain, repeat
<TAB>return chain(iterable, repeat(None))
"
40 write a python function that takes in a string and returns it in lowercase	"

def to_lower(s):
<TAB>return s.lower()
"
write a python program to print a string in lowercase	"

string = 'SFG'
print(string.lower())
"
write a python function to convert the values of RGB components to a hexadecimal color code.	"

def rgb_to_hex(r, g, b):
<TAB>return ('{:02X}' * 3).format(r, g, b)
"
Write a Python function to convert Hours into Seconds	"def hours_to_seconds(hours):
<TAB>return hours * 60 * 60
"
Write a Python function that will accept the base and height of a triangle and compute the area.	"def triangle_area(base, height):
<TAB>area = base * height / 2
<TAB>return area
"
Write a Python function to convert height (in feet and inches) to centimeters	"def height_converter(h_ft, h_inch):
<TAB>h_inch += h_ft * 12
<TAB>h_cm = round(h_inch * 2.54, 1)
<TAB>return h_cm
"
write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.	"def NumGenerator(n):
<TAB>for i in range(n + 1):
        if i % 5 == 0 and i % 7 == 0:
            yield i


n = int(raw_input())
values = []
for i in NumGenerator(n):
<TAB>values.append(str(i))
print("","".join(values))
"
write a python program to do chained comparison	"a = 10
print(1 < a < 50)
print(10 == a < 20)
"
wrie a python  Program to Flatten a List without using Recursion	"a = [[1, [[2]], [[[3]]]], [[4], 5]]
def flatten(l): return sum(map(flatten, l), []) if isinstance(l, list) else [l]


print(flatten(a))
"
write a python function that takes a dictionary and a string, appends the string to the list of values	"def addnames_in_dict(dictname, name):
<TAB>for i in dictname:
        dictname[i].append(name)
<TAB>return dictname


addnames_in_dict({""1"": [""A""]}, ""Arun"")
"
write a python function to calculate compound interest	"

def compound_interest(principle, rate, time):
<TAB>Amount = principle * (pow((1 + rate / 100), time))
<TAB>CI = Amount - principle
<TAB>print(f""Compound interest is {CI}"")
"
Write a python function to remove all the even numbers from a list and return the remaining list	"

def remove_even(my_list):
<TAB>result = list(filter(lambda x: (x % 2 != 0), my_list))
<TAB>return result
"
write a  Python3 code to demonstrate  set difference in dictionary list  using list comprehension	"

test_list1 = [{""HpY"": 22}, {""BirthdaY"": 2}, ]
test_list2 = [{""HpY"": 22}, {""BirthdaY"": 2}, {""Shambhavi"": 2019}]


print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))


res = [i for i in test_list1 if i not in test_list2] +<TAB>[j for j in test_list2 if j not in test_list1]


print(""The set difference of list is : "" + str(res))
"
write a python program to check two lists are equal or not	"

a = [1, 4, 3, 5, 2]
b = [3, 1, 5, 2, 4]
print(a == b)
"
Write a Python function to convert the distance (in feet) to inches, yards, and miles.	"def distance_converter(d_ft):
<TAB>d_inches = d_ft * 12
<TAB>d_yards = d_ft / 3.0
<TAB>d_miles = d_ft / 5280.0
<TAB>return f""Distance in Inches:{d_inches}\nDistance in Yards :{d_yards}\nDistance in Miles :{d_miles}""
"
Write a Python program to find the repeated items of a tuple.	"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7
print(tuplex)
count = tuplex.count(4)
print(count)
"
Write a function to calculate the energy released by converting mass m in kg to energy	"def cal_energy_by_mass(mass: float) -> float:
<TAB>c = 300000
<TAB>return mass * (c**2)
"
Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations	"def time_it(fn, *args, repetitons=1, **kwargs):
<TAB>import time
<TAB>total_time = []

<TAB>for _ in range(repetitons):
        start_time = time.perf_counter()
        fn(*args, **kwargs)
        end_time = time.perf_counter()
        ins_time = end_time - start_time
        total_time.append(ins_time)
<TAB>return sum(total_time) / len(total_time)
"
write a python program to round up a number and print it	"

import math
x = 2.3
y = math.ceil(x)
print(y)
"
With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.	"n = 8
d = dict()
for i in range(1, n + 1):
<TAB>d[i] = i * i * i
print(d)
"
write a python function that returns first element of a list	"

def head(lst):
<TAB>return lst[0]
"
42 write a python program that converts lower case letters to uppercase and vice versa	"def flip_case(s):
<TAB>s = [int(ord(x)) for x in s]
<TAB>s = [x - 32 if x >= 97 else x + 32 for x in s]
<TAB>s = [chr(x) for x in s]
<TAB>return """".join(s)
"
Write a Python program to add a prefix text to all of the lines in a string.	"import textwrap
sample_text = '''
        Python is a widely used high-level, general-purpose, interpreted,
        dynamic programming language. Its design philosophy emphasizes
        code readability, and its syntax allows programmers to express
        concepts in fewer lines of code than possible in languages such
        as C++ or Java.
        '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
final_result = textwrap.indent(wrapped, '> ')
"
Write a program to print inverted star pattern for the given number	"

n = 11


for i in range(n, 0, -1):
<TAB>print((n - i) * ' ' + i * '*')
"
write a python function to get the factorial of a given number	"def factorial(n):
<TAB>if n == 1:
        return n
<TAB>else:
        return n * factorial(n - 1)
"
51 write a python program to perform Softmax operation on an input array	"

import math


def softmax(arr):
<TAB>e_arr = [math.exp(x) for x in arr]
<TAB>e_soft = [i / sum(e_arr) for i in e_arr]
<TAB>return e_soft


print(softmax([3.0, 1.0, 0.2]))
"
Write a Python function to convert a string list to a normal list type	"import ast


def convert_string_to_list(str_lst):
<TAB>return ast.literal_eval(str_lst)
"
77 write a program to find number of bits necessary to represent an integer in binary	"

num = int(input(""Enter an integer number: ""))


bits = num.bit_length()


print(""bits required to store "", num, "" = "", bits)
print(""binary value of "", num, "" is = "", bin(num))
"
By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
write a python program to delete an dictionary element	"

a = {1: 5, 2: 3, 3: 4}
a.pop(3)
print(a)
"
11. python program to find whether a number is prime	"def test_prime(n):
<TAB>if (n == 1):
        return False
<TAB>elif (n == 2):
        return True
<TAB>else:
        for x in range(2, n):
            if(n % x == 0):
                return False
        return True
"
write a python program to print two sets differences using operations like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Difference of E and N is"", E - N)
"
55 write a python program to extract  N largest dictionaries keys and print it	"

test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4

res = []
for key, val in sorted(test_dict.items(), key=lambda x: x[0], reverse=True)[:N]:
<TAB>res.append(key)
print(""Top N keys are: "" + str(res))
"
20 write a function which returns the count of each token in a given sentence as a dictionary	"

from collections import Counter


def count_tokens(sent):
<TAB>sent = list(sent)
<TAB>return dict(Counter(sent))
"
write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.	"import random
print(random.choice([i for i in range(11) if i % 2 == 0]))
"
get the username from a prompt	"username = input(""Login: >> "")
"
49 function to show annotation	"def anno_func(a: ""Mandatory"",
              b: ""Optional"" = 2,
              c: ""Optional"" = 10,
              *args: ""Extra Position variable"",
              **kwargs: ""Provide extra to unpack dictionary"") -> 'Documentation to show how to do do annotation':

<TAB>pass
"
Write a Python program to get the difference between the two lists	"list1 = [1, 2, 3, 4]
list2 = [1, 2]
print(list(set(list1) - set(list2)))
"
Write a Python function to remove leading zeros from an IP address	"import re
regex = '\.[0]*'


def remove_leading_zeros(ip):
<TAB>modified_ip = re.sub(regex, '.', ip)
<TAB>return modified_ip
"
write a python function that takes input radius and return area of circle	"def findArea(r):
<TAB>PI = 3.142
<TAB>return PI * (r * r)
"
87 Write a Python program to print the list in a list of lists whose sum of elements is the highest.	"print(max(num, key=sum))
"
Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.	"lines = []
while True:
<TAB>s = input()
<TAB>if s:
        lines.append(s.upper())
<TAB>else:
        break


for sentence in lines:
<TAB>print(sentence)
"
write a Python Program to Convert Kilometers to Miles	"

kilometers = 10.0


conv_fac = 0.621371


miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
50 write a python program to normalize an array such that it sums upto 1	"

def normalize(arr):
<TAB>return [float(i) / sum(arr) for i in arr]


print(normalize([1, 2, 3, 4, 5]))
"
Given a string, find the length of the longest substring without repeating characters.	"str = ""IshwarVenugopal""


def longest_non_repeat(str):
<TAB>i = 0
<TAB>max_length = 1

<TAB>for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1

        if len(sub_str) > max_length:
            max_length = len(sub_str)

        print(sub_str)

<TAB>return max_length


longest_non_repeat(str)
"
write a function to find uncommon words from two strings	"

def UncommonWords(str1, str2):

<TAB>count = {}

<TAB>for word in str1.split():
        count[word] = count.get(word, 0) + 1

<TAB>for word in str2.split():
        count[word] = count.get(word, 0) + 1

<TAB>return [word for word in count if count[word] == 1]
"
write a python program to check whether a person is eligible to vote or not	"

age = 23
if age >= 18:
<TAB>status = ""Eligible""
else:
<TAB>status = ""Not Eligible""
print(""You are "", status, "" for Vote."")
"
"write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + ""*"" operator"	"

test_list = [(5, 6), (2, 4), (5, 7), (2, 5)]
print(""The original list is : "" + str(test_list))


sub_list = [7, 2, 4, 6]
res = [(*sub, *sub_list) for sub in test_list]
print(""The modified list : "" + str(res))
"
write a Python function to check Check if a Substring is Present in a Given String	"def check(string, sub_str):
<TAB>if (string.find(sub_str) == -1):
        print(""NO"")
<TAB>else:
        print(""YES"")


string = ""geeks for geeks""
sub_str = ""geek""
check(string, sub_str)
"
44 write a  Python function to find intersection of two sorted arrays	"def printIntersection(arr1, arr2, m, n):
<TAB>i, j = 0, 0
<TAB>while i < m and j < n:
        if arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr1[i]:
            j += 1
        else:
            print(arr2[j])
            j += 1
            i += 1


arr1 = [1, 2, 4, 5, 6]
arr2 = [2, 3, 5, 7]
m = len(arr1)
n = len(arr2)
printIntersection(arr1, arr2, m, n)
"
17 write a program to get current date and time	"import datetime
current_time = datetime.datetime.now()

print(""Time now at greenwich meridian is : "", end="""")
print(current_time)
"
write Python3 code to demonstrate working of Check if tuple has any None value using any() + map() + lambda	"test_tup = (10, 4, 5, 6, None)
res = any(map(lambda ele: ele is None, test_tup))
print(""Does tuple contain any None value ? : "" + str(res))
"
Write a function to return the volume of a cylinder	"def cal_cylinder_volume(height, radius):
<TAB>pi = 3.14
<TAB>return pi * (radius**2) * height
"
50 write a python program to remove double quotes from dictionary keys and print it	"

test_dict = {'""Geeks""': 3, '""is"" for': 5, '""g""eeks': 9}

res = {key.replace('""', ''): val for key, val in test_dict.items()}

print(""The dictionary after removal of double quotes : "" + str(res))
"
20. Python Program to Check Armstrong Number (for 3 digits)	"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
<TAB>digit = temp % 10
<TAB>sum += digit ** order
<TAB>temp //= 10
if num == sum:
<TAB>print(num, ""is an Armstrong number"")
else:
<TAB>print(num, ""is not an Armstrong number"")
"
Write a python program to find the sum and average of the list. Print the sum and average	"
L = [4, 5, 1, 2, 9, 7, 10, 8]

count = 0

for i in L:
<TAB>count += i


avg = count / len(L)

print(""sum = "", count)
print(""average = "", avg)
"
Python program to calculate the factorial of a number	"

def factorial(n):
<TAB>if n == 0:
        return 1
<TAB>else:
        return n * factorial(n - 1)


n = 45
print(factorial(n))
"
Write a python function to get user specified attributes such as day, month, year from a date	"import datetime


def get_attributes_from_date(date_string, *args):
<TAB>if(isinstance(date_string, datetime.datetime) == False):
        print(""Input string is not a valid datetime type"")
        raise TypeError
<TAB>get_attrs = [i for i in dir(date_string) if not callable(i)]
<TAB>arg_list = []
<TAB>for attr in args:
        if(attr not in get_attrs):
            print(""Invalid argument passed"", attr)
            raise AttributeError
        print(attr, ':', getattr(date_string, attr))
        arg_list.append((attr, getattr(date_string, attr)))
<TAB>return arg_list
"
Write a Python program to accept a filename from the user and print the extension of that	"def filename_extension(file):
<TAB>f_extns = file.split(""."")
<TAB>return f""The extension of the file is :{repr(f_extns[-1])}""
"
write a program to find and print the largest among three numbers	"num1 = 123
num2 = 125
num3 = 148
if (num1 >= num2) and (num1 >= num3):
<TAB>largest = num1
elif (num2 >= num1) and (num2 >= num3):
<TAB>largest = num2
else:
<TAB>largest = num3
print(f'largest:{largest}')
"
87 write a function which accepts a string prints the characters that have even indexes.	"def every_alternate_char(s):
<TAB>s = s[::2]
<TAB>return s
"
write a python function to collect data into fixed-length chunks or blocks	"def grouper(iterable, n, fillvalue=None):
<TAB>from itertools import zip_longest
<TAB>
<TAB>args = [iter(iterable)] * n
<TAB>return zip_longest(*args, fillvalue=fillvalue)
"
write a python program Convert KM/H to MPH	"kmh = 50
mph = 0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")
"
48. Python Program to Illustrate Different Set Operations	"E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}

print(""Union of E and N is"", E | N)
print(""Intersection of E and N is"", E & N)
print(""Difference of E and N is"", E - N)
print(""Symmetric difference of E and N is"", E ^ N)
"
"Python reuses objects for small integers - use ""=="" for equality, ""is"" for identity"	"a = 1
b = 1
print('a is b', bool(a is b))
c = 999
d = 999
print('c is d', bool(c is d))
"
40. write a Python function to Remove all duplicates from a given string	"def removeDuplicate(str):
<TAB>s = set(str)
<TAB>s = """".join(s)
<TAB>print(""Without Order:"", s)
<TAB>t = """"
<TAB>for i in str:
        if(i in t):
            pass
        else:
            t = t + i
<TAB>print(""With Order:"", t)


str1 = ""conondrum""
removeDuplicate(str1)


from .sin import sine
from .cos import cosine
from .tan import tangent
from .softmax import softmax
from .sigmoid import sigmoid
from .tanh import tanh
from .relu import ReLU
from .log import log
from .exp import exp


from .sin import dsine
from .cos import dcosine
from .tan import dtangent
from .sigmoid import dsigmoid
from .tanh import dtanh
from .log import dlog
from .exp import dexp


import math
"
write a python snippet to convert list into indexed tuple	"test_list = [4, 5, 8, 9, 10]
list(zip(range(len(test_list)), test_list))
"
Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.	"import math


def bin_search(li, element):
<TAB>bottom = 0
<TAB>top = len(li) - 1
<TAB>index = -1
<TAB>while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1

<TAB>return index
"
Python version <= 3.4.5 evaluates this statement to False	"print('""datetime.time(0,0,0)"" (Midnight) ->', bool(datetime.time(0, 0, 0)))
"
Please write a program to randomly print a integer number between 7 and 15 inclusive.	"import random
print(random.randrange(7, 16))
"
Write a Python function to print the root of the quadratic equation	"def quadratic_root(A, B, C):
<TAB>import math
<TAB>d = ((B**2) - 4 * A * C)

<TAB>if d >= 0:
        s = (-B + (d)**0.5) / (2 * A)
        p = (-B - (d)**0.5) / (2 * A)
        print(math.floor(s), math.floor(p))
<TAB>else:
        print('The roots are imaginary')
"
36 python parse datetime from string	"from datetime import datetime


datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
"
85 write a program which count and print the numbers of each character in a string	"dic = {}
s = ""JRR Tolkien""
for s in s:
<TAB>dic[s] = dic.get(s, 0) + 1
print(""\n"".join([""%s,%s"" % (k, v) for k, v in dic.items()]))
"
write a python function to transpose a user provided two dimensional list	"

def transpose(lst):
<TAB>return list(zip(*lst))
"
48 write a program  to divide dictionary and its keys into K equal dictionaries and print it	"

test_dict = {""Gfg"": 20, ""is"": 36, ""best"": 100}
print(""The original dictionary is : "" + str(test_dict))
K = 4

s = list(test_dict.keys())
print(s)
q = list(test_dict.values())
t = []
for i in q:
<TAB>t.append(i // K)
print(t)
q = []
d = {}
for i in range(K):
<TAB>for i in range(0, len(s)):
        d[s[i]] = t[i]
<TAB>q.append(d)
print(q)
"
write a progarm to adds every 3rd number in a list	"from functools import reduce
input_list = [x for x in range(10)]
reduce((lambda x, y: x + y),
       [val for idx, val in enumerate(input_list) if (idx + 1) % 3 == 0])
"
Write a Python Program to print the Sum of First N Natural Numbers	"

n = 7
sum1 = 0
while(n > 0):
<TAB>sum1 = sum1 + n
<TAB>n = n - 1
print(""The sum of first n natural numbers is"", sum1)
"
Write a Python Program to Multiply All the Items in a Dictionary and print the result	"d = {'A': 10, 'B': 10, 'C': 239}
tot = 1
for i in d:
<TAB>tot = tot * d[i]
print(tot)
"
write a python program to find the sequences of one upper case letter followed by lower case letters.	"

import re
text = ""Albert""
patterns = '[A-Z]+[a-z]+$'
if re.search(patterns, text):
<TAB>print('Found a match!')
else:
<TAB>print('Not matched!')
"
Write a python function to return the content of a directory sorted by last modified date	"import glob
import os
import datetime


def retrieve_files_sort_bydate(src_dir_path):
<TAB>if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
<TAB>files_in_dir = glob.glob(src_dir_path + ""/*.*"")
<TAB>if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
<TAB>files_in_dir.sort(key=os.path.getmtime)
<TAB>return files_in_dir
"
Python program to find the digits which are absent in a given mobile number.	"def absent_digits(n):
<TAB>all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
<TAB>n = set([int(i) for i in n])
<TAB>n = n.symmetric_difference(all_nums)
<TAB>n = sorted(n)
<TAB>return n


print(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))
"
write Python3 code to demonstrate convert list of strings to list of tuples Using map() + split() + tuple()	"

test_list = ['4, 1', '3, 2', '5, 3']


print(""The original list : "" + str(test_list))


res = [tuple(map(int, sub.split(', '))) for sub in test_list]


print(""The list after conversion to tuple list : "" + str(res))
"
write a python program to print the factorial of number	"num = int(input(""Please enter a number ""))
fact = 1
a = 1
while a <= num:
<TAB>fact *= a
<TAB>a += 1
print(""The factorial of "", num, "" is "", fact)
"
write Python program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character	"

string_input = '''GeeksforGeeks is a Computer Science portal for geeks.
    It contains well written, well thought and well explained
    computer science and programming articles, quizzes etc.'''


words = string_input.split()


dictionary = {}


for word in words:

<TAB>if (word[0].lower() not in dictionary.keys()):

        dictionary[word[0].lower()] = []
        dictionary[word[0].lower()].append(word)

<TAB>else:

        if (word not in dictionary[word[0].lower()]):
            dictionary[word[0].lower()].append(word)


print(dictionary)
"
Write a python function to remove a newline in Python	"def remove_newline(string):
<TAB>return string.strip()
"
write Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]
print(""intial_list"", str(ini_tuple))


result = []
for i in ini_tuple:
<TAB>if i[1] <= 100:
        result.append(i)
print(""Resultant tuple list: "", str(result))
"
Write a python function to get the Cumulative sum of a list	"def Cumulative(lists):
<TAB>cu_list = []
<TAB>length = len(lists)
<TAB>cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
<TAB>return cu_list[1:]


 
l = [1, 2.0, 'hello', 'have', 'a', 'good', 'day']

s = 'hello'

if s in l:
<TAB>print(f'{s} is present in the list')
else:
<TAB>print(f'{s} is not present in the list')
"
Write a Python program to check if all dictionaries in a list are empty or not.	"my_list = [{}, {}, {}]
my_list1 = [{1, 2}, {}, {}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))
"
write a program to Pretty Print a dictionary with dictionary values.	"test_dict = {'tsai': {'rate': 5, 'remark': 'good'}, 'cs': {'rate': 3}}
print(""The Pretty Print dictionary is : "")
for sub in test_dict:
<TAB>print(f""\n{sub}"")
<TAB>for sub_nest in test_dict[sub]:
        print(sub_nest, ':', test_dict[sub][sub_nest])
"
write a python function to load pickle data from a file	"def load_pickle_data(pickle_file):
<TAB>import pickle
<TAB>with open(pickle_file, 'rb') as f:
        data = pickle.load(f)
<TAB>return data
"
write a python function to return sum of the powers between two numbers	"

def sum_of_powers(end, power=2, start=1):
<TAB>return sum([(i) ** power for i in range(start, end + 1)])
"
write a python program to swap two numbers	"num1 = 130
num2 = 34
num1, num2 = num2, num1
"
write python function to detect if a number is odd number	"def is_odd(num):
<TAB>return((num % 2) != 0)
"
4. python function to add even number from 1st list and odd number from 2nd list	"def even_odd(l1, l2):
<TAB>return[x + y for x, y in zip(l1, l2) if x % 2 == 0 and y % 2 != 0]
"
write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using zip() + map() + values()	"

test_list = [{'gfg': 1, 'best': 2}, {'gfg': 4, 'best': 5}]


print(""The original list : "" + str(test_list))


res = list(zip(*map(dict.values, test_list)))

print(""Segregated values of keys are : "" + str(res))
"
Write a Python program to find the positions of numbers that are multiples of 3 from a series	"import pandas as pd
import numpy as np
ser = pd.Series(np.random.randint(1, 10, 7))
print(np.argwhere(ser.values % 3 == 0))
"
write a python function to add elements of two lists	"def add_two_lists(list1, list2):
<TAB>list1 = [1, 2, 3]
<TAB>list2 = [4, 5, 6]
<TAB>sum_list = []

<TAB>for (item1, item2) in zip(list1, list2):
        sum_list.append(item1 + item2)
<TAB>return sum_list
"
write a python program to find difference between elements of two lists and print it	"

l1 = [1, 2, 3, 4]
l2 = [5, 8, 7, 0]


res = []
for i in range(len(l1)):
<TAB>res.append(l1[i] - l2[i])


print(res)
"
write a python function to check if all elements in a list are unique or not	"

def unique(l):
<TAB>if len(l) == len(set(l)):
        print(""All elements are unique"")
<TAB>else:
        print(""List has duplicates"")
"
Write a Python Program to Multiply All the Items in a Dictionary	"

def mul_dict(d):
<TAB>tot = 1
<TAB>for i in d:
        tot = tot * d[i]
<TAB>return tot
"
60 write a program to Test for Even values dictionary values lists and print it	"

test_dict = {""Gfg"": [6, 7, 3],
             ""is"": [8, 10, 12, 16],
             ""Best"": [10, 16, 14, 6]}


res = dict()
for sub in test_dict:
<TAB>flag = 1
<TAB>for ele in test_dict[sub]:
        if ele % 2 != 0:
            flag = 0
            break
<TAB>res[sub] = True if flag else False

print(""The computed dictionary : "" + str(res))
"
Write Python function to check if a string has at least one letter and one number	"def checkString(str):
<TAB>flag_l = False
<TAB>flag_n = False
<TAB>for i in str:
        if i.isalpha():
            flag_l = True
        if i.isdigit():
            flag_n = True
<TAB>return flag_l and flag_n
"
24. Python Program to Find Numbers Divisible by Another Number	"my_list = [12, 65, 54, 39, 102, 339, 221, ]
result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"", result)
"
write a python program to sort dict keys by value and print the keys	"

d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d, key=d.get))
"
Write a python function to Compute LCM of two input number	"def compute_lcm(x, y):
<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y
<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
<TAB>return lcm
"
write a program to remove common element between two sets	"

s1 = {""apple"", ""banana"", ""cherry""}
s2 = {""google"", ""microsoft"", ""apple""}


s1.difference_update(s2)
print(s1)
"
write a python program that prints all characters at even indexes in a sentence	"sentence = 'the quick brown fox'
print(sentence[::2])
"
write a python program to perform multiple assignments	"a = b = c = 1
"
write a rpogram Deleting an arbitrary key  using popitem() function in dictionary	"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}


pop_ele = Dict.popitem()
print(""\nDictionary after deletion: "" + str(Dict))
print(""The arbitrary pair returned is: "" + str(pop_ele))
"
29 write a program to sort a list using bubblesort	"

def bubblesort(arr):
<TAB>n = len(arr)

<TAB>for i in range(n - 1):
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
<TAB>return arr


print(bubblesort([1, 33, 192, 21, 0]))
"
usage of kwargs	"def b_func(**kwargs):
<TAB>print('type of kwargs:', type(kwargs))
<TAB>print('kwargs contents: ', kwargs)
<TAB>print('value of argument a:', kwargs['a'])


b_func(a=1, b=2, c=3, d=4)
"
write a python program to multiply a string n times	"

a = 'python'
print(a * 5)
"
28 Write a python program to compute arithmetic operation from String and print it	"

test_str = '5x6, 9x10, 7x8'
"
write a program for Reversing a sublist	"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a[2].reverse()
print(a)
"
Write a Python Program to Remove the Given Key from a Dictionary	"

def remove_item_dict(d, key):
<TAB>if key in d:
        del d[key]
<TAB>else:
        print(""Key not found!"")
        exit(0)
"
write a python function thats returns a flat list of all the values in a flat dictionary	"

def values_only(flat_dict):
<TAB>return list(flat_dict.values())
"
write a Python function to remove empty tuples from a list of tuples function to remove empty tuples using filter	"def Remove(tuples):
<TAB>tuples = filter(None, tuples)
<TAB>return tuples


tuples = [(), ('ram', '15', '8'), (), ('laxman', 'sita'),
          ('krishna', 'akbar', '45'), ('', ''), ()]
print(Remove(tuples))
"
write a program to  adds every 5th number in a list	"input_list = [x for x in range(20)]


res = reduce((lambda x, y: x + y),
             [val for idx, val in enumerate(input_list) if (idx + 1) % 5 == 0])
print('Sum of every 5th element in the list is', res)
"
Reverse a given string	"str1 = ""PYnative""
print(""Original String is:"", str1)


str1 = str1[::-1]
print(""Reversed String is:"", str1)
"
Write a Python Program to Check and print if a given year is a Leap Year	"year = 2000
if (year % 4) == 0:
<TAB>if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
<TAB>else:
        print(f""{year} is a leap year"")
else:
<TAB>print(f""{year} is not a leap year"")
"
Write a Python program to return a set of all elements in either A or B, but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
Please write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.	"import random
print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))
"
Write a Python program to print the number words in a sentence	"test_string = ""India is my country""
res = len(test_string.split())
print(f""The number of words in string are : {res}"")
"
Write a python program to convert each list element to key-value pair. Print the final dictionary	"
test_list = [2323, 82, 129388, 234, 95]

print(""The original list is : "" + str(test_list))

res = dict()
for ele in test_list:

<TAB>mid_idx = len(str(ele)) // 2
<TAB>key = int(str(ele)[:mid_idx])
<TAB>val = int(str(ele)[mid_idx:])

<TAB>res[key] = val

print(""Constructed Dictionary : "" + str(res))
"
Write Python Program to Remove Punctuations From a String and print the cleaned string.	"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
<TAB>if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)
"
This function computes LCM	"def compute_lcm(x, y):
<TAB>lcm = (x * y) // compute_gcd(x, y)
<TAB>return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
8. python function to identify profane words	"def profane_filter(str):
<TAB>profane_word_url = ""https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt""
<TAB>file = urllib.request.urlopen(profane_word_url)
<TAB>for line in file:
        decoded_line = line.decode(""utf-8"")
<TAB>return decoded_line
<TAB>str = re.findall(r'\w+', str)
<TAB>return [i for i in str if i in decoded_line]
"
Write a pythno function to print the length of a given tuple	"

my_tuple = (1, 2, 3, 4, 5, 6, 7, 8)


print(len(my_tuple))
"
write a python program to remove duplicates from a list and print the result in list	"input_list = [1, 2, 3, 4, 4, 33, 2, 5]
dedup = list(set(input_list))
print(f""{dedup}"")
"
3. python function to return the squareroot of a list of numbers	"def sqrt(n):
<TAB>return [i**0.5 for i in range(n)]
"
48 write a python function that checks if a given key is present in the environment	"import os


def get_env_path(key):
<TAB>return os.getenv(key)
"
write a python program to print the largest number among the three input numbers	"num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))
num3 = float(input(""Enter third number: ""))


if (num1 >= num2) and (num1 >= num3):
<TAB>largest = num1
elif (num2 >= num1) and (num2 >= num3):
<TAB>largest = num2
else:
<TAB>largest = num3


print(""The largest number is"", largest)
"
write a python program to sort alphabetically the words form a string provided by the user	"

my_str = ""Hello this Is an Example With cased letters""


words = [word.lower() for word in my_str.split()]
words.sort()


print(""The sorted words are:"")
for word in words:
<TAB>print(word)
"
write a python program to convert uppercase string to lower	"

a = 'STRING'
print(f'convert lowercase to uppercase:{a.lower()}')
"
write a program to print 5 random numbers between 100 and 200	"import random
print(random.sample(range(100, 200), 5))
"
write a python function to check if all elements in a list are unique.	"

def all_unique(lst):
<TAB>return len(lst) == len(set(lst))
"
Write a python program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala	"

import os
import nltk
import string
from collections import Counter
from itertools import permutations, combinations, combinations_with_replacement


letters = string.ascii_lowercase
"
Usage of while	"i = 0
while i < 2:
<TAB>print(i)
<TAB>i += 1
else:
<TAB>print('in else')
"
write a python program to calculate distance between tao points	"

import math
p1 = [4, 0]
p2 = [6, 6]
distance = math.sqrt(((p1[0] - p2[0])**2) + ((p1[1] - p2[1])**2))
print(f""The distance between {p1} and {p2} is {distance}"")
"
Write Python function to check if a string is palindrome or not	"def isPalindrome(s):
<TAB>return s == s[::-1]
"
write a program Creating a Nested Dictionary as shown in the below image	"Dict = {1: 'Geeks', 2: 'For',
        3: {'A': 'Welcome', 'B': 'To', 'C': 'Geeks'}}


print(Dict)
"
Write a function that takes two lists as input and returns a zipped list of corresponding elements	"

def zip_list(list1, list2):
<TAB>return list(zip(list1, list2))
"
write a python program to expalin list comprehension and print alternative values	"

t = (1, 2, 4, 3, 8, 9)
print([t[i] for i in range(0, len(t), 2)])
"
write a python program to convert lower string to UPPERCASE	"

a = 'string'
print(f'convert lowercase to uppercase:{a.upper()}')
"
write Python Program to Read the Contents of a File	"a = str(input(""Enter the name of the file with .txt extension:""))
file2 = open(a, 'r')
line = file2.readline()
while(line != """"):
<TAB>print(line)
<TAB>line = file2.readline()
file2.close()
"
Write a function to return the circumference of a circle	"def cal_circumference(r):
<TAB>pi = 3.14
<TAB>return 2 * pi * r
"
Write a Python function to find the maximum value in a given heterogeneous list using lambda	"def max_val(list_val):
<TAB>max_val = max(list_val, key=lambda i: (isinstance(i, int), i))
<TAB>return(max_val)
"
Adding Element to a List	"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)
"
Write a python function to convert a string to a list	"def convert_str_to_list(string):
<TAB>return string.split(' ')
"
Multiply Two Matrices	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]


result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):

<TAB>for j in range(len(Y[0])):

        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
<TAB>print(r)
"
write a python program to swap two numbers	"a = 1
b = 2
a, b = b, a
"
Keep All items from List But NOT the Duplicates	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
42 write a program to swap two variables	"x = input('Enter value of x: ')
y = input('Enter value of y: ')

temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
Write a Python program to sort a list alphabetically in a dictionary.	"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)
"
39 function to create a dictionary of mirror of letter.	"def letter_mirror():
<TAB>import string
<TAB>letter = string.ascii_lowercase
<TAB>rvr_letter = letter[::-1]
<TAB>dict_char = dict(zip(letter, rvr_letter))
<TAB>return dict_char
"
write a program to check if a string is binary or not	"

str1 = ""01110011 a""


set1 = set(str1)


if set1 == {'0', '1'} or set1 == {'0'} or set1 == {'1'}:
<TAB>print(""string is binary"")
else:
<TAB>print(""string is not binary"")
"
Note : Number can be anything	"def add_unlimited(*args):
<TAB>return sum(args)
"
write a python function to Check if a given string is binary string or not	"def check(string):
<TAB>s = {'0', '1'}
<TAB>if s == p or p == {'0'} or p == {'1'}:
        return True
<TAB>else:
        return False
"
write a python function to count the occurrences of a value in a list.	"

def count_occurrences(lst, val):
<TAB>return lst.count(val)
"
write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using generator expression	"

test_list = [{'gfg': 1, 'best': 2}, {'gfg': 4, 'best': 5}]


print(""The original list : "" + str(test_list))


res = [tuple(sub[""gfg""] for sub in test_list),
       tuple(sub[""best""] for sub in test_list)]


print(""Segregated values of keys are : "" + str(res))
"
54 Write a Python function to check if a number is a perfect square	"def is_perfect_square(n):
<TAB>x = n // 2
<TAB>y = set([x])
<TAB>while x * x != n:
        x = (x + (n // x)) // 2
        if x in y:
            return False
        y.add(x)
<TAB>return True
"
write a  program to get the matched elements from two list	"a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]
[i for i, j in zip(a, b) if i != j]
"
write a python program to check if a string is palindrome or not	"

my_str = 'aIbohPhoBiA'


my_str = my_str.casefold()
rev_str = reversed(my_str)


if list(my_str) == list(rev_str):
<TAB>print(""The string is a palindrome."")
else:
<TAB>print(""The string is not a palindrome."")
"
Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.	"def printList():
<TAB>li = list()
<TAB>for i in range(1, 21):
        li.append(i**2)
<TAB>print(li[5:])
"
write a python class that defines a Tree and add child	"

class TreeNode:
<TAB>def __init__(self, data):
        self.data = data
        self.parent = None
        self.children = []

<TAB>def add_child(self, child):
        child.parent = self
        self.children.append(child)


t = TreeNode(""Arun"")
t.add_child(TreeNode(""Shruthi""))
"
Write a function to implement Gnome Sort	"def gnomeSort(arr, n):
<TAB>index = 0
<TAB>while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
<TAB>return arr


arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
<TAB>print(i)
"
50. Python Program to Count the Number of Each Vowel Using a list and a dictionary comprehension	"

ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x: sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)
"
write a python program to print the number of uppercase and lowercase letters in a string	"sentence = 'The Quick Brown Fox'
lowercase = 0
uppercase = 0
for c in sentence:
<TAB>if c.isupper():
        uppercase += 1
<TAB>elif c.islower():
        lowercase += 1
<TAB>else:
        pass
print(f'Lowercase: {lowercase}, Uppercase: {uppercase}')
"
write a Python program to get the Cumulative sum of a list	"

list1 = [10, 20, 30, 40, 50]
new_list = []
j = 0
for i in range(0, len(list1)):
<TAB>j += list1[i]
<TAB>new_list.append(j)

print(new_list)
"
97 Write a Python program to print all permutations of a given string (including duplicates).	"def permute_string(str):
<TAB>if len(str) == 0:
        return ['']
<TAB>prev_list = permute_string(str[1:len(str)])
<TAB>next_list = []
<TAB>for i in range(0, len(prev_list)):
        for j in range(0, len(str)):
            new_str = prev_list[i][0:j] + str[0] + prev_list[i][j:len(str) - 1]
            if new_str not in next_list:
                next_list.append(new_str)
<TAB>return next_lis
"
Write a Python program to print the list of all keywords	"import keyword
print(""Python keywords are..."")
print(keyword.kwlist)
"
write a python function to calculate the greatest common divisor (GCD) of two user provided positive integers.	"

def gcd(num1, num2):
<TAB>gcd = 1
<TAB>if num1 % num2 == 0:
        return num2
<TAB>for k in range(int(num2 / 2), 0, -1):
        if num1 % k == 0 and num2 % k == 0:
            gcd = k
            break
<TAB>return gcd
"
36. Python funcction to Find the Factors of a Number	"def print_factors(x):
<TAB>print(""The factors of"", x, ""are:"")
<TAB>for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
"What happens ""behind"" the curtains is that the tuple is not modified, but a new object is generated every time, which will inherit the old ""name tag"":"	"my_tup = (1,)
print(id(my_tup))
my_tup += (4,)
print(id(my_tup))
my_tup = my_tup + (5,)
print(id(my_tup))
"
We have to use the global keyword!	"

def my_func():
<TAB>global var
<TAB>print(var)
<TAB>var = 'locally changed'


var = 'global'
my_func()
print(var)
"
Write a Python Program that Prints which Letters are in the First String but not in the Second	"

s1 = 'python'
s2 = 'schoolofai'
a = list(set(s1) - set(s2))
print(""The letters are:"")
for i in a:
<TAB>print(i)
"
6 write a program to remove empty List from List using list comprehension	"test_list = [5, 6, [], 3, [], [], 9]
print(""The original list is : "" + str(test_list))
res = [ele for ele in test_list if ele != []]
print(""List after empty list removal : "" + str(res))
"
write a python function for bitwise division with given number of shifts	"def bit_div(n, shift):
<TAB>return n >> shift
"
Write a Python function to return Jacobsthal's number	"def jacobsthal_seq(n):
<TAB>if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * jacobsthal_seq(n - 2) + jacobsthal_seq(n - 1)
"
Write a function to compute 5/0 and use try/except to catch the exceptions.	"def throws():
<TAB>return 5 / 0


try:
<TAB>throws()
except ZeroDivisionError:
<TAB>print(""division by zero!"")
except Exception:
<TAB>print('Caught an exception')
finally:
<TAB>print('In finally block for cleanup')
"
93 Write a Python function to check if a nested list is a subset of another nested list and print the output.	"def checkSubset(input_list1, input_list2):
<TAB>return all(map(input_list1.__contains__, input_list2))


list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]
list2 = [[1, 3], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
"
write a program Creating a Dictionary  with Integer Keys	"Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'}
print(""\nDictionary with the use of Integer Keys: "")
print(Dict)
"
55 Write a python program that pads a given python list to a given length at the end and prints the modified list	"

def pad_arr_end(arr, pad_len):
<TAB>pad_arr = [0] * (pad_len - len(arr))
<TAB>return arr.extend(pad_arr)


tmp = [1, 2, 3, 4, 5]
pad_arr_end(tmp, 10)
print(tmp)
"
Write a function to Filter String with substring at specific position	"def f_substring():
<TAB>test_list = ['program ', 'to', 'filter', 'for', 'substring']
<TAB>print(""The original list is : "" + str(test_list))
<TAB>sub_str = 'geeks'
<TAB>i, j = 0, 5
<TAB>res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
<TAB>print(""Filtered list : "" + str(res))
"
Write a Python program to check/test multiple variables against a value	"a = 10
b = 20
c = 30
if 10 in {a, b, c}:
<TAB>print(""True"")
else:
<TAB>print(""False"")
"
write a python python program to find the L.C.M. of two input number	"def compute_lcm(x, y):
<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y

<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

<TAB>return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
write a program to move numbers to the end of a string	"

str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'

res = ''
dig = ''


for ele in str1:
<TAB>if ele.isdigit():
        dig += ele
<TAB>else:
        res += ele

res += dig


print(""Strings after digits at end : "" + str(res))
"
write a python program list comprehension to make a list of size n of random integers in ranges a and b	"

import random


n = 10
a = 1
b = 100


rand = [random.randint(a, b) for i in range(n)]
print(f'list : {rand}')
"
Write a program to read an ASCII string and to convert it to a unicode string encoded by utf-8.	"s = raw_input()
u = unicode(s, ""utf-8"")
print(u)
"
Given a Python list. Turn every item of a list into its square	"aList = [1, 2, 3, 4, 5, 6, 7]
aList = [x * x for x in aList]
print(aList)
"
write a python function to map a numeric lookup using bisect	"def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
<TAB>from bisect import bisect
<TAB>i = bisect(breakpoints, score)
<TAB>return grades[i]
"
57 write a python program  to add prefix to each key name in dictionary and print it	"

test_dict = {'Gfg': 6, 'is': 7, 'best': 9, 'for': 8, 'geeks': 11}
temp = ""Pro""


d = {}
for key, value in test_dict.items():
<TAB>d.update({temp + key: value})
print(d)
"
write a python function to generate 4 digit OTP	"

import math
import random


def generateOTP():
<TAB>digits = ""0123456789""
<TAB>OTP = """"
<TAB>for i in range(4):
        OTP += digits[math.floor(random.random() * 10)]
<TAB>return OTP
"
Write a python program to find whether a given number is perfect or not and print the result in boolean format(True or False)	"x = int(input(""Enter any no. ""))


def perfect_number(n):
<TAB>sum = 0
<TAB>for x in range(1, n):
        if n % x == 0:
            sum += x
<TAB>return sum == n


print(perfect_number(x))
"
write a Python program to find Maximum Frequent Character in String	"

test_str = ""GeeksforGeeks""
print(""The original string is : "" + test_str)


all_freq = {}
for i in test_str:
<TAB>if i in all_freq:
        all_freq[i] += 1
<TAB>else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)


print(""The maximum of all characters in GeeksforGeeks is : "" + res)
"
Write a function to add two positive integers without using the '+' operator	"def add_without_plus_operator(a, b):
<TAB>while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
<TAB>return a
"
16. python function for count of address reference	"import ctypes


def ref_count(address: int):  
<TAB>return ctypes.c_long.from_address(address).value
"
Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given	"def find_volume_of_ideal_gas(pressure: float, temp: float, n: float) -> float:
<TAB>r = 8.3145
<TAB>return (n * r * temp) / pressure
"
write a python Creating a Dictionary and  Accessing element using key	"Dict = {'Dict1': {1: 'Geeks'},
        'Dict2': {'Name': 'For'}}


print(Dict['Dict1'])
print(Dict['Dict1'][1])
print(Dict['Dict2']['Name'])
"
write a python program to sort a list in descending order and print it	"

list = [3, 1, 5, 6]
result = sorted(list, reverse=True)
print(result)
"
write a Python Program to Sum All the Items in a Dictionary and print the result	"d = {'A': 100, 'B': 540, 'C': 239}
print(""Total sum of values in the dictionary:"")
print(sum(d.values()))
"
write a program to find intersection	"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}


intersection_both = a.intersection(b)
print(""Intersection"", intersection_both)
"
write a python function that returns True if the sum of two provided numbers is even	"def is_prod_even(num1, num2):
<TAB>sum = num1 + num2
<TAB>return not sum % 2
"
Write a python function to get the surface_area of a pyramid with base area & vertical height as input	"def pyramid_surface_area(base_area, height):
<TAB>surface_area = 1 / 3 * base_area * height
<TAB>return surface_area
"
99 Write a Python program to calculate distance between two points using latitude and longitude.	"from math import radians, sin, cos, acos


print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))


dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat)
                      * cos(elat) * cos(slon - elon))
print(""The distance is %.2fkm."" % dist)
"
Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given	"def simple_interest(p, r, t):
<TAB>si = (p * r * t) / 100
<TAB>return si
"
Write a python function to get the volume of a pyramid with base area & vertical height as input	"def pyramid_volume(base_area, height):
<TAB>volume = 1 / 3 * base_area * height
<TAB>return volume
"
write a python program that tke two inputs from user and check whether they are equal or not.	"print(""Enter first number"")
first = input()
print(""Enter second number"")
second = input()
print(first == second)
"
Write a python program to solve and print the solution for the quadratic equation ax**2 + bx + c = 0	"

import cmath


a = 1
b = 5
c = 6


d = (b**2) - (4 * a * c)


sol1 = (-b - cmath.sqrt(d)) / (2 * a)
sol2 = (-b + cmath.sqrt(d)) / (2 * a)


print('The solution are {0} and {1}'.format(sol1, sol2))
"
write a python function to get 10 best Artists playing on Apple iTunes	"def get_artists():
<TAB>import requests
<TAB>url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
<TAB>response = requests.get(url)
<TAB>data = response.json()
<TAB>for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)
"
write a python function to make permutations from a list with given length	"def get_permutations(data_list, l=2):
<TAB>return list(permutations(data_list, r=l))
"
Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0	"def roots_of_qad_eq(a: float, b: float, c: float):
<TAB>d = b**2 - 4 * a * c
<TAB>if d >= 0:
        return (-b + (d)**(1 / 2)) / 2 * a, (-b - (d)**(1 / 2)) / 2 * a
<TAB>else:
        return None
"
write a python program to print two sets union using operations like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}


print(""Union of E and N is"", E | N)
"
write a program to capitalize the first and last character of each key in a dictionary	"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
<TAB>new_key = key[0].upper() + key[1:-1] + key[-1].upper()
<TAB>input_dict[new_key] = input_dict[key]
<TAB>if key != new_key:
        del input_dict[key]
"
66 write a python program  to Remove dictionary Key Words and print it	"

test_str = 'gfg is best for geeks'
print(""The original string is : "" + str(test_str))
test_dict = {'geeks': 1, 'best': 6}
l = test_str.split()
print(l)
s = ''
for i in l:
<TAB>if i in test_dict:
        l.remove(i)
print("" "".join(i for i in l))
"
64 write a program  to convert string to dictionary and print it	"
str = "" Jan = January; Feb = February; Mar = March""

dictionary = dict(subString.split(""="") for subString in str.split("";""))

print(dictionary)
"
write a python function using list comprehension to find even numbers in a list	"def find_evennumbers(input_list):
<TAB>list_using_comp = [var for var in input_list if var % 2 == 0]
<TAB>return list_using_comp
"
write a python program to add two matrices and print them	"X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[9, 8, 7],
     [6, 5, 4],
     [3, 2, 1]]


result = [[X[i][j] + Y[i][j] for j in range
           (len(X[0]))] for i in range(len(X))]


for r in result:
<TAB>print(r)
"
Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.	"values = input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
Write a python function to extract odd length words in String	"def findoddlenthwords(test_str):
<TAB>res = []
<TAB>for ele in test_str.split():
        if len(ele) % 2:
            res.append(ele)
<TAB>return res
"
Write a Python Program to Check if a Number is an Armstrong Number	"

def amstrong_check(n):
<TAB>a = list(map(int, str(n)))
<TAB>b = list(map(lambda x: x**3, a))
<TAB>if(sum(b) == n):
        return True
<TAB>else:
        return False
"
Write a function to count the number of digits in a number	"def count_digits(n):
<TAB>return len(str(n))
"
write a python function to generate a Unique identifier across space and time in this cosmos.	"import uuid


def get_uuid():
<TAB>return uuid.uuid4()
"
Write a Python program that prints a new set with all items from both sets by removing duplicates	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.union(set2))
"
write a program to print count of number of unique matching characters in a pair of strings	"

str1 = ""ababccd12@""
str2 = ""bb123cca1@""


matched_chars = set(str1) & set(str2)
print(""No. of matching characters are : "" + str(len(matched_chars)))
"
write a dictionary comprehension in python so that the values are square of the key number	"
square_dict = {num: num * num for num in range(1, 11)}
print(square_dict)
"
No problem to use the same variable name in the local scope without affecting the local counterpart:	"def my_func():
<TAB>var = 'locally changed'


var = 'global'
my_func()
print(var)
"
Write a Python function to return cullen number	"def cullen_number(n):
<TAB>if n >= 0:
        return n * 2 ** n + 1
"
Write a function to return the lateral surface area of a cylinder	"def cal_cylinder_lat_surf_area(height, radius):
<TAB>pi = 3.14
<TAB>return 2 * pi * radius * height
"
write a Python function to Calculate Curved Surface Area of Cylinder	"def curvedsurfacearea(r, h):
<TAB>cursurf_ar = (2 * pi * r * h)
<TAB>return cursurf_ar


r = 5
h = 8


print(""Curved Surface Area Of Cylinder = "", curvedsurfacearea(r, h))
"
82 Write a Python program to count number of substrings with same first and last characters of a given string.	"def no_of_substring_with_equalEnds(str1):
<TAB>result = 0
<TAB>n = len(str1)
<TAB>for i in range(n):
        for j in range(i, n):
            if (str1[i] == str1[j]):
                result = result + 1
<TAB>return result
"
40 write a python program to find minimum k records from tuple list	"

test_list = [('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)]
K = 2

print(""The original list is : "" + str(test_list))
res = sorted(test_list, key=lambda x: x[1])[:K]
print(""The lowest K records are : "" + str(res))
"
write a function that converts a integer dictionary into a list of tuples.	"def dict_to_tuple(input_dict):
<TAB>out_tuple = [(a, b) for a, b in input_dict.items()]
<TAB>return out_tuple
"
Write a function to return the area of a rectangle	"def cal_area_rect(length, breadth):
<TAB>return length * breadth
"
write a python function to convert given variable to said datatype	"

def type_conversion(typ, a):
<TAB>if(typ) == 'int':
        return(int(a))
<TAB>elif(typ) == 'float':
        return(float(a))
<TAB>else:
        return(str(a))


type_conversion('str', 1)
"
write a python program to sum the set of unqiue elements	"

a = {5, 6, 7}
print(sum(a, 5))
"
Reusing global variable names and UnboundLocalErrors	"def my_func():
<TAB>print(var)


var = 'global'
my_func()
"
Write a function to find the area of rectangle	"

def rectangle_area(l, b):
<TAB>return l * b
"
write a python function that would read the given input file path and print its contents	"def read_and_print_file(filepath):
<TAB>with open(filepath, ""r"") as infile:
        print(infile.read())
"
56 write a python program to print a  Dictionary Keys whose Values summation equals K	"

test_dict = {""Gfg"": 3, ""is"": 5, ""Best"": 9, ""for"": 8, ""Geeks"": 10}
print(""The original dictionary is : "" + str(test_dict))
K = 14
l = []
s = list(test_dict.values())
v = list(test_dict.keys())
for i in range(0, len(s)):
<TAB>for j in range(i + 1, len(s) - 1):
        if s[i] + s[j] == K:
            print([v[i], v[j]])
"
Write a Python program to subtract five days from current date	"from datetime import date, timedelta
dt = date.today() - timedelta(5)
print('Current Date :', date.today())
print('5 days before Current Date :', dt)
"
write a python function to convert an angle from radians to degrees.	"

def rads_to_degrees(rad):
<TAB>return (rad * 180.0) / 3.14
"
write a python program to print the datatype of a variable	"x = 2
print(type(x))
"
Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?	"def solve(numheads, numlegs):
<TAB>ns = 'No solutions!'
<TAB>for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
<TAB>return ns, ns
"
Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.	"def printList():
<TAB>li = list()
<TAB>for i in range(1, 21):
        li.append(i**2)
<TAB>print(li[:5])
"
Write a Python function to return carol numbers	"def carol_number(n):
<TAB>if n >= 0:
        return (2**n - 1)**2 - 2
"
Given a string, find the lenth of the longest substring without repeating characters.	"str = ""akshayjain""


def longest_non_repeat(str):
<TAB>i = 0
<TAB>max_length = 1

<TAB>for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
<TAB>return max_length


longest_non_repeat(str)
"
write a python function to generate random number between a  given range	"import random


def get_weather_data(min, max):
<TAB>return random.randrange(min, max)


rand_num = get_weather_data(11, 20)
print(f""{rand_num}"")
"
write a python function to get Bitcoin prices after every given 'interval' seconds	"def get_btc_price(interval=5):
<TAB>import requests
<TAB>import json
<TAB>from time import sleep

<TAB>def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

<TAB>while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)
"
62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.	"def is_arithmetic(l):
<TAB>delta = l[1] - l[0]
<TAB>for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
            return False
<TAB>return True
"
write a python function that would print the ASCII value of a given character	"def print_ascii(char):
<TAB>print(ord(char))
"
write a python function to create two threads and start and join the two threads	"import threading


def print_cube(num):
<TAB>print(""Cube: {}"".format(num * num * num))


t1 = threading.Thread(target=print_cube, args=(10,))
t2 = threading.Thread(target=print_cube, args=(10,))


t1.start()


t2.start()


t1.join()
t2.join()
"
write a python program to check whether the number is prime	"

num = 407
if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
<TAB>else:
        print(num, ""is a prime number"")

else:
<TAB>print(num, ""is not a prime number"")
"
write a python function to strip punctuations from a given string	"def strip_punctuations(s):
<TAB>return s.translate(str.maketrans('', '', string.punctuation))
"
Write a python program to obtain principal amount, rate of interest and time from user to print simple interest.	"principal = float(input(""Enter principal : ""))
rate = float(input(""Enter rate : ""))
time = float(input(""Enter time : ""))
simple_interest = print(f""Simple Interest : {(principal*rate*time/100)}"")
"
write a recursive python function that would return the sum of first n natural numbers, where n is the input	"def sum_first_n_recursive(n):
<TAB>if n == 0:
        return 0
<TAB>return sum_first_n_recursive(n - 1) + n
"
write a python program to reverse user provided number	"

n = 4562
rev = 0
while(n > 0):
<TAB>a = n % 10
<TAB>rev = rev * 10 + a
<TAB>n = n // 10
print(rev)
"
write a Python function to find the area of the triangle inscribed within the rectangle which in turn is inscribed in an ellipse	"

def area(a, b):

<TAB>if (a < 0 or b < 0):
        return -1

<TAB>A = a * b
<TAB>return A


a = 5
b = 2
print(area(a, b))
"
Write a Python Program to Detect if Two Strings are Anagrams	"

def anagram_check(s1, s2):
<TAB>if(sorted(s1) == sorted(s2)):
        return True
<TAB>else:
        return False
"
write a python function to calculate the median of user provided list of numbers	"

def median(list):
<TAB>list.sort()
<TAB>list_length = len(list)
<TAB>if list_length % 2 == 0:
        return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2
<TAB>return float(list[int(list_length / 2)])
"
write a program to count characters in a string	"st = ""AmmarAdil""
count = {}
for a in st:
<TAB>if a in count:
        count[a] += 1
<TAB>else:
        count[a] = 1
print('Count', count)
"
Write a function to calculate amount of radioactive element left based on initial amount and half life	"def cal_half_life(initail_quatity: float, time_elapsed: float, half_life: float) -> float:
<TAB>return initail_quatity * ((1 / 2)**(time_elapsed / half_life))
"
7. python sigmoid function	"def sigmoid_activation(l):
<TAB>return[round(1 / (1 + math.exp(-x)), 2) for x in l]
"
25. Python Program to Add two Lists	"
NumList1 = []
NumList2 = []
total = []


Number = int(input(""Please enter the Total Number of List Elements: ""))
print(""Please enter the Items of a First and Second List   "")
for i in range(1, Number + 1):
<TAB>List1value = int(input(""Please enter the %d Element of List1 : "" % i))
<TAB>NumList1.append(List1value)

<TAB>List2value = int(input(""Please enter the %d Element of List2 : "" % i))
<TAB>NumList2.append(List2value)

for j in range(Number):
<TAB>total.append(NumList1[j] + NumList2[j])

print(""\nThe total Sum of Two Lists =  "", total)
"
write a python program to add every alternate elements in a list of even elements and print the final list	"given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5]
if len(given_list) % 2 == 0:
<TAB>res_list = []
<TAB>for i in range(len(given_list) - 2):
        res_list.append(given_list[i] + given_list[i + 2])
<TAB>print(f'Resultant list is {res_list}')
"
write a python program to print display the powers of 2 using anonymous function	"

terms = 10


result = list(map(lambda x: 2 ** x, range(terms)))
for i in range(terms):
<TAB>print(""2 raised to power"", i, ""is"", result[i])
"
write a Python Program to Check Whether a String is Palindrome or Not	"my_str = 'aIbohPhoBiA'
my_str = my_str.casefold()
rev_str = reversed(my_str)
if list(my_str) == list(rev_str):
<TAB>print(""The string is a palindrome."")
else:
<TAB>print(""The string is not a palindrome."")
"
write a python function to check if a given string is a palindrome	"

def isPalindrome(s):
<TAB>return s == s[::-1]
"
Write a function to find sum of nested list using Recursion	"total = 0


def sum_nestedlist(l):
<TAB>global total
<TAB>for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]


sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)
"
write a python program to print sum of elements in a list	"lst = range(5)
print(sum(lst))
"
write a Python Program to Count and print the Number of Each Vowel in the input string	"vowels = 'aeiou'
ip_str = 'India is my country'
ip_str = ip_str.casefold()
count = {}.fromkeys(vowels, 0)
for char in ip_str:
<TAB>if char in count:
        count[char] += 1
print(count)
"
write a python program to iterate an dict and concatenate	"

D = dict(p='san', q='foundry')
print('{p}{q}'.format(**D))
"
write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using lambda + filter() + isdigit()	"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")]
print(""The original list is : "" + str(test_list))
res = list(filter(lambda sub: all(ele.isdigit() for ele in sub), test_list))
print(""Filtered Tuples : "" + str(res))
"
37 write a program to remove i-th indexed character from a string	"
def remove(string, i):

<TAB>a = string[: i]
<TAB>b = string[i + 1:]
<TAB>return a + b


if __name__ == '__main__':

<TAB>string = ""HellowWorld""

<TAB>i = 5

<TAB>print(remove(string, i))
"
write a program to print count of vowels in a string	"st = ""ammaradil""
vowle = ['a', 'e', 'i', 'o', 'u']
count = 0


for s in st:
<TAB>if s in vowle:
        count = count + 1


print(""Count"", count)
"
write a python program to do selection sort	"

A = [64, 25, 12, 22, 11]


for i in range(len(A)):

<TAB>min_idx = i
<TAB>for j in range(i + 1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j

<TAB>A[i], A[min_idx] = A[min_idx], A[i]


print(""Sorted array"")
for i in range(len(A)):
<TAB>print(""%d"" % A[i])
"
7 write a  program to remove empty tuples from a list of tuples	"def Remove(tuples):
<TAB>tuples = filter(None, tuples)
<TAB>return tuples


tuples = [(), ('ram', '15', '8'), (), ('laxman', 'sita'),
          ('krishna', 'akbar', '45'), ('', ''), ()]
print(Remove(tuples))
"
Write a python function to get the surface_area of a cylinder with radius & height as input	"def cylinder_surface_area(radius, height):
<TAB>surface_area = 3.14 * (radius ** 2) + (2 * 3.14 * radius * height)
<TAB>return surface_area
"
write a python program to concatenate two dictionaries	"

d1 = {'a': 1, 'b': 2}
d2 = {'c': 1, 'd': 2}
d3 = {**d1, **d2}
print(d3)
"
Write a Python function that calculate side length of a equilateral polygon	"

import math


def side_length(no_of_sides, circumradius):
<TAB>return 2 * circumradius * math.sin(math.pi / no_of_sides)
"
94 write a program to print double quotes with the string variable	"str1 = ""Hello world""


print(""\""%s\"""" % str1)
print('""%s""' % str1)
print('""{}""'.format(str1))
"
Write a function to return the speed of moving object based of distance travelled in given time	"def cal_speed(distance: float, time: float) -> float:
<TAB>return distance / time
"
write a program to convert all the sentances present in the list to upper	"

mylis = ['this is test', 'another test']
print(f'{[item.upper() for item in mylis]}')
"
write a python function for a string to swap the case of all letters.	"def swap_case(s):
<TAB>return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))
"
Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0	"def sum_of_roots(a: float, c: float):
<TAB>if a:
        return c / a
<TAB>else:
        return None
"
10 write a python program to construct equidigit tuple and print them	"

list1 = [5654, 223, 982143, 34, 1021]


list2 = []
for sub in list1:

<TAB>mid_idx = len(str(sub)) // 2

<TAB>el1 = str(sub)[:mid_idx]
<TAB>el2 = str(sub)[mid_idx:]

<TAB>list2.append((int(el1), int(el2)))

print(""Equidigit tuples List : "" + str(list2))
"
write a python function that returns the lcm of two numbers	"def lcm(x, y):
<TAB>if x > y:
        greater = x
<TAB>else:
        greater = y

<TAB>while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

<TAB>return lcm
"
Python Program to Check if a Number is Odd or Even	"

num = 100
if (num % 2) == 0:
<TAB>print(""{0} is Even"".format(num))
else:
<TAB>print(""{0} is Odd"".format(num))
"
write a python program that prints the area of a circle	"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')
"
write a program to print logrithmic values of any number	"

import math
x = 100
base = 5
print(math.log(x, base))
"
1 write a program to reverse a list	"lst = [11, 5, 17, 18, 23]


def reverse(lst):
<TAB>new_lst = lst[::-1]
<TAB>return new_lst
"
Write a Python function to return hexadecimal value of a given integer	"def int_to_hex(a):
<TAB>return hex(a)
"
90 show generator is faster than list	"def show_gen_fast():
<TAB>from timeit import timeit
<TAB>dt = timeit(""[num for num in fib(100) ]"", globals=globals(), number=1)
<TAB>return dt
"
Write a python class to welcome	"

class Welcome(object):

<TAB>def __init__(self, name):
        self.name = name  

<TAB>def welcome(self, up=False):
        if up:
            print('Hi, %s!' % self.name.upper())
        else:
            print('Hey, %s' % self.name)


w = Welcome('Geeta')
w.welcome(up=True)
"
Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically.	"freq = {}   
line = input()
for word in line.split():
<TAB>freq[word] = freq.get(word, 0) + 1


words = freq.keys()
words.sort()


for w in words:
<TAB>print(""%s:%d"" % (w, freq[w]))
"
Write a Python function to create a union of sets.	"def union_of_sets(Set1, Set2):
<TAB>result = Set1 | Set2
<TAB>return result
"
write a python function to find H.C.F of two numbers	"

def compute_hcf(x, y):
<TAB>if x > y:
        smaller = y
<TAB>else:
        smaller = x
<TAB>for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
<TAB>return hcf


num1 = 54
num2 = 24


print(""The H.C.F. is"", compute_hcf(num1, num2))
"
Write a python program to reverse a list and print it.	"def Reverse(lst):
<TAB>return [ele for ele in reversed(lst)]


lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))
"
Write a Python program to get the current username using getpass library	"import getpass
print(getpass.getuser())
"
write a python function to generate a Unique identifier across space and time in this cosmos.	"def get_uuid():
<TAB>return uuid.uuid4()


import secrets
"
write a python program that converts a binary number to decimal and prints it	"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)
"
write a python program that takes input a list and squares every term using list comprehension	"s1 = eval(input(""Enter list ""))
print([i**2 for i in s1])
"
Disassembler	"import dis


def hello1_func():
<TAB>s = 'Hello'
<TAB>return s


dis.dis(hello1_func)
"
Write a function to return the total surface area of a cube of side a	"def cal_surface_area_cube(a):
<TAB>return 6 * (a**2)
"
write a python function to convert a user provided list of dictionaries into a list of values corresponding to the user specified key	"

def pluck(lst, key):
<TAB>return [x.get(key) for x in lst]
"
Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.	"values = input()
numbers = [x for x in values.split("","") if int(x) % 2 != 0]
print("","".join(numbers))
"
Write a Python function to Find if a Number is Prime or Not Prime	"

def check(n, div=None):
<TAB>if div is None:
        div = n - 1
<TAB>while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div - 1)
<TAB>else:
        print(""Number is prime"")
        return 'True'
"
write a program to transpose a matrix	"M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


if not isinstance(M[0], list):
<TAB>M = [M]


rows = len(M)
cols = len(M[0])


MT = []
while len(MT) < dim:
<TAB>MT.append([])
<TAB>while len(MT[-1]) < dim:
        MT[-1].append(0.0)


for i in range(rows):
<TAB>for j in range(cols):
        MT[j][i] = M[i][j]


print(""Transpose Array"")
for i in range(rows):
<TAB>row = '|'
<TAB>for b in range(cols):
        row = row + ' ' + str(MT[i][b])
<TAB>print(row + ' ' + '|')
"
write a python program to add two list of same length.	"def add_two_list_items():
<TAB>num1 = [1, 2, 3]
<TAB>num2 = [4, 5, 6]
<TAB>sum = num1 + num2
<TAB>print(f'Sum: {sum}')
"
write a function to reverse words of string	"

def rev_sentence(sentence):

<TAB>words = sentence.split(' ')

<TAB>reverse_sentence = ' '.join(reversed(words))

<TAB>return reverse_sentence
"
write a python function to calculate the day difference between two user provided dates	"

def days_diff(start, end):
<TAB>return (end - start).days
"
write a python program to replace the first character of a given word	"word = ""goal""
word = ""f"" + word[1:]
print(word)
"
Write a Python Program to Convert Kilometers to Miles	"kilometers = 10000
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
Python program that accepts an integer (n) and computes the value of n+nn+nnn.	"

def custom(n):
<TAB>a = n
<TAB>n1 = int(""%s"" % a)
<TAB>n2 = int(""%s%s"" % (a, a))
<TAB>n3 = int(""%s%s%s"" % (a, a, a))
<TAB>return n1 + n2 + n3


print(custom(20))
"
write a python program to print all the prime numbers within an interval	"

lower = 900
upper = 1000


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
<TAB>
<TAB>if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
write a python program to print the ASCII value of a character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
write a Python program to demonstrate working of Swap Binary substring	"test_str = ""geeksforgeeks""


print(""The original string is : "" + test_str)


temp = str.maketrans(""geek"", ""abcd"")
test_str = test_str.translate(temp)


print(""The string after swap : "" + test_str)
"
write a python function that would reverse the given string	"def reverse_string(str_to_be_reversed):
<TAB>return str_to_be_reversed[::-1]
"
python program to Filter String with substring at specific position	"def f_substring():
<TAB>test_list = ['program ', 'to', 'filter', 'for', 'substring']
<TAB>print(""The original list is : "" + str(test_list))
<TAB>sub_str = 'geeks'
<TAB>i, j = 0, 5
<TAB>res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
<TAB>print(""Filtered list : "" + str(res))
"
write a python program that prints the length of tuple	"thistuple = (""apple"", ""banana"", ""cherry"")
print(len(thistuple))
"
write a Python program to demonstrate working of Convert List to Single valued Lists in Tuple	"

test_list = [6, 8, 4, 9, 10, 2]


print(f""The original list is : {test_list}"")


res = tuple([ele] for ele in test_list)


print(f""Tuple after conversion : {res}"")
"
"write Python3 code to demonstrate working of Concatenating tuples to nested tuples Using "", "" operator during concatenation"	"

test_tup1 = (3, 4)
test_tup2 = (5, 6)


print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))


res = ((test_tup1, ) + (test_tup2, ))


print(""Tuples after Concatenating : "" + str(res))
"
write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sort()	"

def get_rear(sub):
<TAB>return sub[-1]


test_list = ['gfg', 'is', 'best', 'for', 'geeks']
print(""The original list is : "" + str(test_list))
test_list.sort(key=get_rear)
print(""Sorted List : "" + str(test_list))
"
Calculate difference in days between two dates	"def days_between(d1, d2):
<TAB>from datetime import datetime as dt
<TAB>f_date = dt.strptime(d1, ""%d/%m/%Y"").date()
<TAB>l_date = dt.strptime(d2, ""%d/%m/%Y"").date()
<TAB>delta = l_date - f_date
<TAB>print(delta.days)
"
Write a Python program to reverse a tuple.	"
x = (""w3resource"")
y = reversed(x)
"
Write a function to repeat M characters of a string N times	"

def multTimes(str, m, n):
<TAB>front_len = m
<TAB>if front_len > len(str):
        front_len = len(str)
<TAB>front = str[:front_len]
<TAB>result = ''
<TAB>for i in range(n):
        result = result + front
<TAB>return result


print(multTimes('Hello', 3, 7))
"
32 write a program in python to create a directed graph, and add an edge between two vertices	"

from collections import defaultdict


class Graph:
<TAB>def __init__(self):
        self.graph = defaultdict(list)

<TAB>def addEdge(self, f, t):
        self.graph[f].append(t)

<TAB>def printEdge(self):
        for ed in list(self.graph.keys()):
            print(f""From : {ed}, To : {self.graph[ed]}"")


g = Graph()
g.addEdge(""a"", ""b"")
g.addEdge(""a"", ""e"")
g.addEdge(""b"", ""d"")
g.addEdge(""c"", ""d"")
g.addEdge(""c"", ""a"")
g.printEdge()
"
7 write a python function to return every second number from a list	"

def every_other_number(lst):
<TAB>return lst[::2]
"
9. python function to add even mubers in a list	"def add_even_num(l):
<TAB>sum = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))
<TAB>return sum
"
write a python program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(f'{celsius} degree Celsius is equal to {fahrenheit} degree Fahrenheit')
"
write a python function to print the hexadecimal value of a decimal number	"def print_hexadecimal(dec):
<TAB>print(hex(dec))
"
Find the middle element of a random number list	"my_list = [4, 3, 2, 9, 10, 44, 1]
print(""mid value is "", my_list[int(len(my_list) / 2)])
"
write a function to reverse a string	"

def reverse_string(string):
<TAB>return string[::-1]
"
write a python program to input a string from user and convert input string into all upper case and print the result	"string = input(""Please Enter your Own String : "")


string1 = string.upper()

print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)
"
write a python function to return the area of a circle with given radius	"import math


def area_circle(radius):
<TAB>return math.pi * radius * radius
"
By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.	"array = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)
"
write a python program to define a decorator to cache property	"

class PropertyCache(object):
<TAB>

<TAB>def __init__(self, func):
        self.func = func

<TAB>def __get__(self, obj, cls):
        if not obj:
            return self
        value = self.func(obj)
        setattr(obj, self.func.__name__, value)
        return value


class Foo:
<TAB>def __init__(self):
        self._property_to_be_cached = 'result'

<TAB>@ PropertyCache
<TAB>def property_to_be_cached(self):
        print('compute')
        return self._property_to_be_cached


test = Foo()


print(test.property_to_be_cached)
print(test.property_to_be_cached)
"
write a python function to check external IP address	"def check_ip():
<TAB>import re
<TAB>import urllib.request as ur
<TAB>url = ""http://checkip.dyndns.org""
<TAB>with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r""\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"", s)
        print(""IP Address: "", ip[0])
        return ip[0]
"
write a program to remove the empty list from the given list	"str_list = [""Emma"", ""Jon"", """", ""Kelly"", None, ""Eric"", """"]


print(str_list)
"
56 write a python function to implement the sigmoid activation function	"

import math


def sigmoid(x):
<TAB>return 1 / (1 + math.exp(-x))
"
write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples	"def zip_(list_of_seq):
<TAB>return list(zip(*list_of_seq))
"
Write a Python program to check whether an element exists within a tuple.	"tuplex = (""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"")
print(""e"" in tuplex)
"
9. Python Program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
      (celsius, fahrenheit))
"
write a python function to find the factors of a number	"def print_factors(x):
<TAB>print(""The factors of"", x, ""are:"")
<TAB>for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
write a program to find tangent of a number	"import math


num = 45
print(""Tangent"", math.tan(num))
"
write a Python program to calculate the number of days between two dates.	"

from datetime import date
f_date = date(2019, 4, 15)
l_date = date(2020, 4, 15)
delta = l_date - f_date
print(f'No of days between {f_date} and {l_date} is:{delta.days}')
"
Write a python function to get the volume of a sphere with radius as input	"def sphere_volume(radius):
<TAB>volume = 4.0 / 3.0 * 3.14 * radius ** 3
<TAB>return volume
"
33 write a python program to delete all occurences of character and print it	"

test_str = ""TheSchoolofAI""

rem_char = ""e""

res = test_str.replace(rem_char, """")

print(""The string after character deletion : "" + str(res))
"
Write a python function to remove duplicate words from a given string	"def remove_duplicate_words(string):
<TAB>string = string.strip().split()
<TAB>return ' '.join(set(string))
"
17. Python Program to Display the multiplication Table	"num = 12


for i in range(1, 11):
<TAB>print(num, 'x', i, '=', num * i)
"
Write a Python Program Print Restaurant Menu using Class given menu and cost as list	"

class Food(object):
<TAB>def __init__(self, name, price):
        self.name = name
        self.price = price

<TAB>def getprice(self):
        return self.price

<TAB>def __str__(self):
        return self.name + ' : ' + str(self.getprice())


def buildmenu(names, costs):
<TAB>menu = []
<TAB>for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
<TAB>return menu


names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']


costs = [250, 150, 180, 70, 65, 55, 120, 350]


Foods = buildmenu(names, costs)


n = 1
for el in Foods:
<TAB>print(n, '. ', el)
<TAB>n = n + 1
"
30 get rid of all null values in array python	"mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]
"
Write a program to calculate Binary Ones Complement of a number	"a = 60


c = ~a
print(""Binary Ones Complement"", c)
"
write a Python program to demonstrate to convert list of string to list of list	"

test_list = ['[1, 4, 5]', '[4, 6, 8]']


print(f""The original list is : {test_list}"")


res = [i.strip(""[]"").split("", "") for i in test_list]


print(f""The list after conversion is : {res}"")
"
Write a python program to Implement Gnome sort and print the sorted list for the below list	"

def gnome_sort(alist):
<TAB>for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1


alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Write a Python program to check a triangle is equilateral, isosceles or scalene.# Note :# An equilateral triangle is a triangle in which all three sides are equal.# A scalene triangle is a triangle that has three unequal sides.# An isosceles triangle is a triangle with (at least) two equal sides.	"

print(""Input lengths of the triangle sides: "")
x = int(input(""x: ""))
y = int(input(""y: ""))
z = int(input(""z: ""))
if x == y == z:
<TAB>print(""Equilateral triangle"")
elif x != y != z:
<TAB>print(""Scalene triangle"")
else:
<TAB>print(""isosceles triangle"")
"
Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.	"input_str = input()
dimensions = [int(x) for x in input_str.split(',')]
rowNum = dimensions[0]
colNum = dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]


for row in range(rowNum):
<TAB>for col in range(colNum):
        multilist[row][col] = row * col


print(multilist)
"
37 print list as matrix in python without bracketspython by Bright Butterfly on Jun 14 2020 Donate	"data = [7, 7, 7, 7]
print(*data, sep='')
"
Write a lambda function that gives the word count in a statement.	"

def count_word(s): return len(s.split(' '))
"
write a python program to check if a number is a prime number	"num = int(input(""Enter a number: ""))


if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
<TAB>else:
        print(num, ""is a prime number"")
else:
<TAB>print(num, ""is not a prime number"")
"
Write a python function to remove all digits and underscores from a Unicode strings	"import re


def extract_unicode(my_string):
<TAB>regex = re.compile(r'[^\W\d_]+', re.UNICODE)
<TAB>return regex.findall(my_string)
"
Write a python program to print negative Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

<TAB>if num < 0:
        print(num, end="" "")
"
26. Python Program to find Largest and Smallest Number in a List	"

NumList = []
Number = int(input(""Please enter the Total Number of List Elements: ""))
for i in range(1, Number + 1):
<TAB>value = int(input(""Please enter the Value of %d Element : "" % i))
<TAB>NumList.append(value)


smallest = largest = NumList[0]


for j in range(1, Number):
<TAB>if(smallest > NumList[j]):
        smallest = NumList[j]
        min_position = j
<TAB>if(largest < NumList[j]):
        largest = NumList[j]
        max_position = j


print(""The Smallest Element in this List is : "", smallest)
print(""The Index position of Smallest Element in this List is : "", min_position)
print(""The Largest Element in this List is : "", largest)
print(""The Index position of Largest Element in this List is : "", max_position)
"
Write a function that returns relu value of the input	"def relu(x: float) -> float:
<TAB>x = 0 if x < 0 else x
<TAB>return x
"
"Write a python program to filter names not starting with ""a"""	"names = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']
a_names = list(filter(lambda name: name[0] == 'a', names))
print(a_names)
"
86 write a program which accepts a string and counts the number of words in it	"def num_of_words(st):
<TAB>return len(st.split())
"
63 Python Challenges: Check a sequence of numbers is a geometric progression or not	"def is_geometric(li):
<TAB>if len(li) <= 1:
        return True
<TAB>ratio = li[1] / float(li[0])
<TAB>for i in range(1, len(li)):
        if li[i] / float(li[i - 1]) != ratio:
            return False
<TAB>return True
"
write a python function to return dictionary of two lists using zip	"def dict_using_comp(list1, list2):
<TAB>dict_using_comp = {key: value for (key, value) in zip(list1, list2)}
<TAB>return dict_using_comp
"
write a python program to make use of setdefault for missing dictionary keys	"

a_dict = {'a': 1}
a_dict.setdefault('b', 2)
print(f'After appending with new value:{a_dict}')
"
Write a function to return the area of a trapezium with base a base b and height h between parallel sides	"def cal_area_trapezium(a, b, h):
<TAB>return h * (a + b) / 2
"
Write a Python Program to Add Two Matrices and print result.	"X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[10, 11, 12],
     [13, 14, 15],
     [16, 17, 18]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]
for r in result:
<TAB>print(r)
"
Write python function to count number of 1s in binary representation of an integer.	"def countSetBits(n):
<TAB>count = 0
<TAB>while (n):
        count += n & 1
        n >>= 1
<TAB>return count
"
write a function to check if a number is positive or not	"

def check(num):
<TAB>if num > 0:
        return True
<TAB>return False
"
conditional usecase	"a_list = [1, 2]
if a_list[0] == 1:
<TAB>print('Hello, World!')
else:
<TAB>print('Bye, World!')
"
write a python program to check is all are digit	"print('0xa'.isdigit())
"
Write a function to append two lists	"def append_lists(l1: list, l2: list) -> list:
<TAB>return l1.extend(l2)
"
write Python code t get difference of two lists Using set()	"def Diff(li1, li2):
<TAB>return (list(list(set(li1) - set(li2)) + list(set(li2) - set(li1))))


li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))
"
write a python program to read and print contents of a file	"

filepath = 'data.txt'
with open(filepath, 'r') as file:
<TAB>data = file.read()
<TAB>print(f'Data: {data}')
"
Write a function for vertical concatenating of a matrix	"def vertical_concatenation():
<TAB>test_list = [[""this"", ""is""], [""program"", ""for""],
                 [""vertical"", ""concatenation""]]
<TAB>print(""The original list : "" + str(test_list))
<TAB>res = []
<TAB>N = 0
<TAB>while N != len(test_list):
        temp = ''
        for idx in test_list:
            try:
                temp = temp + idx[N]
            except IndexError:
                pass
        res.append(temp)
        N = N + 1
<TAB>res = [ele for ele in res if ele]
<TAB>print(""List after column Concatenation : "" + str(res))


vertical_concatenation()
"
write a python program to make increment on each call of method using lambda function	"

def make_incrementor(n):
<TAB>return lambda x: x + n


f = make_incrementor(42)
f(0)
print(f(1))
"
another way to append data to tuple	"tup = ([],)
print('tup before: ', tup)
tup[0].append(1)
print('tup after: ', tup)
"
74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.	"def digits_sum():
<TAB>n = 2**20
<TAB>ans = sum(int(c) for c in str(n))
<TAB>return str(ans)
"
write a program for Rolling the dices	"

import random
min = 1
max = 6


print(""Rolling the dices...and the values are"", random.randint(min, max))
print(""Rolling the dices...and the values are"", random.randint(min, max))
"
write a python function to convert string in to binary	"def convertstringtobinary(text):
<TAB>for chr in text:
        bin = ''
        asciiVal = int(ord(chr))
        while asciiVal > 0:
            if asciiVal % 2 == 0:
                bin = bin + '0'
            else:
                bin = bin + '1'
            asciiVal = int(asciiVal / 2)
        return(bin + "" : "" + bin[::-1])
"
write a python program to check it contains any space	"print(''''''.isspace())
"
write a python program to create multiplication table of 5	"

n = 5
for i in range(1, 11):
<TAB>print(n, 'x', i, '=', n * i)
"
Write a Python program to calculate the hypotenuse of a right angled triangle using math library	"
from math import sqrt
print(""Input lengths of shorter triangle sides:"")


def hypotenuse(side1, side2):
<TAB>hyp = sqrt(side1**2 + side2**2)
<TAB>return hyp
"
Write a Python function to compute simple interest	"def simple_interest(p, t, r):
<TAB>si = (p * t * r) / 100
<TAB>return si
"
write a python function to pickle data to a file	"def pickle_data(data, pickle_file):
<TAB>import pickle
<TAB>with open(pickle_file, 'wb') as f:
        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
<TAB>return None
"
write a python function to count number of vowels in a string	"def count_vowels(text):
<TAB>v = set('aeiou')
<TAB>for i in v:
        print(f'\n {i} occurs {text.count(i)} times')
"
write a boolean python function to check if a given string matches a given pattern	"

import re


def match(pattern, string):
<TAB>if re.match(pattern, string):
        return True
<TAB>return False
"
write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.	"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10},
             {'tsai': 1, 'for': 10, 'geeks': 9},
             {'love': 4, 'tsai': [7, 3, 22, 1]}]
N = 2
key = ""tsai""
for sub in test_list:
<TAB>if isinstance(sub[key], list):
        sub[key] = sub[key][N]
"
4. write a python function to add two user provided numbers and return the sum	"def add_two_numbers(num1, num2):
<TAB>sum = num1 + num2
<TAB>return sum
"
Write a program that accepts a sentence and calculate the number of letters and digits.	"s = raw_input()
d = {""DIGITS"": 0, ""LETTERS"": 0}
for c in s:
<TAB>if c.isdigit():
        d[""DIGITS""] += 1
<TAB>elif c.isalpha():
        d[""LETTERS""] += 1
<TAB>else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])
"
10 limit decimals to only two decimals in python	"answer = str(round(answer, 2))
"
write a python program to count the number of each vowel and print them	"vowels = 'aeiou'


ip_str = 'Hello, have you tried our tutorial section yet?'


ip_str = ip_str.casefold()


count = {}.fromkeys(vowels, 0)


for char in ip_str:
<TAB>if char in count:
        count[char] += 1


print(count)
"
Write a program to print the length of a list	"

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]


print(len(my_list))
"
Returns an integer value for the given character	"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")
"
write a Python program to demonstrate working of Convert String to tuple list	"

test_str = ""(1, 3, 4), (5, 6, 4), (1, 3, 6)""


print(""The original string is : "" + test_str)


res = []
temp = []
for token in test_str.split("", ""):
<TAB>num = int(token.replace(""("", """").replace("")"", """"))
<TAB>temp.append(num)
<TAB>if "")"" in token:
        res.append(tuple(temp))
        temp = []


print(f""List after conversion from string : {res}"")
"
Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list	"

def cocktail_shaker_sort(alist):
<TAB>def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

<TAB>upper = len(alist) - 1
<TAB>lower = 0

<TAB>no_swap = False
<TAB>while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1

        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1


alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python program to multiply three numbers	"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')
"
Write a Python Program to Convert Gray Code to Binary	"

def gray_to_binary(n):
<TAB>
<TAB>n = int(n, 2)

<TAB>mask = n
<TAB>while mask != 0:
        mask >>= 1
        n ^= mask

<TAB>return bin(n)[2:]
"
82 write a program to extract the mobile number from the given string in Python	"

import re


string = '''hello you can call me at 018002089898.'''


Phonenumber = re.compile(r'\d\d\d\d\d\d\d\d\d\d\d\d')
m = Phonenumber.search(string)


print('mobile number found from the string : ', m.group())
"
83 write a python program to remove given character from first element of Tuple and print it	"
test_list = [(""GF ! g !"", 5), (""! i ! s"", 4), (""best !!"", 10)]
print(""The original list is : "" + str(test_list))

K = ""!""
res = [(sub[0].replace(K, ''), sub[1]) for sub in test_list]
print(""The filtered tuples : "" + str(res))
"
write a python function that joins strings in a list and returns the result	"def join_string_parts(str_list):
<TAB>return "" "".join(str_list)
"
write a python function to check if given set is subset or not	"def check_subset():
<TAB>for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
<TAB>print(a.issubset(b))
"
write a python program to print the top N largest keys in an integer dictionary.	"test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4
res = []
for key, val in sorted(test_dict.items(), key=lambda x: x[0], reverse=True)[:N]:
<TAB>res.append(key)
print(""Top N keys are: "" + str(res))
"
write a python program  to convert list of tuples into list	"

lt = [('English', 2), ('Maths', 4), ('Science', '6')]
out = [item for t in lt for item in t]
print(out)
"
Write a Python class that will initiate a number, input a number and print the number	"class Number:
<TAB>def __init__(self, num):
        self.num = num

<TAB>def inputNum(self):
        self.num = int(input(""Enter an integer number: ""))

<TAB>def printNum(self):
        print(self.num)
"
"we should better create ""new"" objects:"	"my_list2 = [[1, 2, 3] for i in range(2)]
print('initially:  ---> ', my_list2)
"
Write a Python program that Given a two Python list. Iterate both lists simultaneously such that list1 should display item in original order and list2 in reverse order	"list1 = [10, 20, 30, 40]
list2 = [100, 200, 300, 400]


for x, y in zip(list1, list2[::-1]):
<TAB>print(x, y)
"
write Python3 code to demonstrate conversion of list of tuple to list of list using map() + join()	"

test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'),
             ('G', 'E', 'E', 'K', 'S')]
print(""The original list is : "" + str(test_list))
res = list(map(''.join, test_list))
print(""The list after conversion to list of string : "" + str(res))
"
lazy evaluation	"gen_succeeds = (i for i in range(5) for j in 1 / 0)
print('But obviously fails when we iterate ...')
for i in gen_succeeds:
<TAB>print(i)
"
68 write a python program to convert List of Dictionaries to List of Lists and print it	"
test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


s = []
count = 0
for i in test_list:
<TAB>if count < 1:
        s.append(list(i.keys()))
<TAB>s.append(list(i.values()))
<TAB>count += 1
print(s)
"
write the list comprehension to pick out only negative integers from a given list ‘l’.	"

l1 = [1, 2, 3, -4, -8]


print('negative integers:', [x for x in l1 if x < 0])
"
write a python function to return the square root of a number	"def get_sqrt(i):
<TAB>import math
<TAB>return(math.sqrt(i))
"
write a python function to repeat calls to function with specified arguments	"def repeatfunc(func, times=None, *args):
<TAB>from itertools import starmap, repeat
<TAB>if times is None:
        return starmap(func, repeat(args))
<TAB>return starmap(func, repeat(args, times))
"
Write a function to return the area of an ellipse	"def cal_area_ellipse(minor, major):
<TAB>pi = 3.14
<TAB>return pi * (minor * major)
"
81 generate intereger random number between user choice	"def gen_ran_int_number(lower, upper):
<TAB>import random
<TAB>final = [random.randint(lower, upper) for _ in range(10)]
<TAB>return final
"
write a python function to add all even numbers between minimum and maximum value	"def add_even_num(min, max):
<TAB>return sum([i for i in range(min, max) if i % 2 == 0])


add_even_num(1, 6)
"
what if we put a mutable object into the immutable tuple	"tup1 = ([],)
print('tup before: ', tup1)
tup1[0] += [1]
"
Write a Python program to Find the day of week of a given date	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
write a python program to print the words in a sentence in reverse order	"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))
"
Write a python program to Implement Binary Search with Recursion and print the key element if found	"

def binary_search_rec(alist, start, end, key):
<TAB>
<TAB>if not start < end:
        return -1

<TAB>mid = (start + end) // 2
<TAB>if alist[mid] < key:
        return binary_search_rec(alist, mid + 1, end, key)
<TAB>elif alist[mid] > key:
        return binary_search_rec(alist, start, mid, key)
<TAB>else:
        return mid


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search_rec(alist, 0, len(alist), key)
if index < 0:
<TAB>print(f'{key} was not found.')
else:
<TAB>print(f'{key} was found at index {index}.')
"
write a python function to calculate the volume of ellipsoid	"
def volumeOfEllipsoid(r1, r2, r3):
<TAB>return 1.33 * 22 * r1 * r2 * r3 / 7
"
13. Python Program to Find the Largest Among Three Numbers	"

num1 = 10
num2 = 14
num3 = 12


if (num1 >= num2) and (num1 >= num3):
<TAB>largest = num1
elif (num2 >= num1) and (num2 >= num3):
<TAB>largest = num2
else:
<TAB>largest = num3


print(""The largest number is"", largest)
"
write a python program to use python lambda function	"

def lamb(x): return x ** 3


print(lamb(5))
"
write a Python Function to rotate string left and right by d length	"

def rotate(input, d):

<TAB>Lfirst = input[0: d]
<TAB>Lsecond = input[d:]
<TAB>Rfirst = input[0: len(input) - d]
<TAB>Rsecond = input[len(input) - d:]

<TAB>print(""Left Rotation : "", (Lsecond + Lfirst))
<TAB>print(""Right Rotation : "", (Rsecond + Rfirst))


input = 'GeeksforGeeks'
d = 4
rotate(input, d)
"
write a python program to check if the number is an Armstrong number or not	"

num = 663
sum = 0


temp = num
while temp > 0:
<TAB>digit = temp % 10
<TAB>sum += digit ** 3
<TAB>temp //= 10


if num == sum:
<TAB>print(num, ""is an Armstrong number"")
else:
<TAB>print(num, ""is not an Armstrong number"")
"
write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.	"import math


def bin_search(li, element):
<TAB>bottom = 0
<TAB>top = len(li) - 1
<TAB>index = -1
<TAB>while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1
<TAB>return index


li = [2, 5, 7, 9, 11, 17, 222]
print(bin_search(li, 11))
print(bin_search(li, 12))
"
make a dictionary with each vowel a key and value 0	"count = {}.fromkeys(vowels, 0)
for char in ip_str:
<TAB>if char in count:
        count[char] += 1


print(count)
"
write a python function to get the absolute value of a number	"def get_absolute_value(i):
<TAB>return(abs(i))
"
15 Write a python program to check if two list are reverse equal and print boolean value	"

list1 = [5, 6, 7, 8]
list2 = [8, 7, 6, 5]

res = list1 == list(reversed(list2))

print(""Are both list reverse of each other ? : "" + str(res))
"
Write a python function to generate Square Numbers (1, 4, 9, 16, 25...)	"def square_numbers(n):
<TAB>for i in range(n):
        yield i ** 2
"
Remove the last element from the stack	"s = [1, 2, 3, 4]
print(f""last element from the stack:{s.pop()}"")
"
45. Python Program to Check Whether a String is Palindrome or Not	"

my_str = 'aIbohPhoBiA'


my_str = my_str.casefold()


rev_str = reversed(my_str)


if list(my_str) == list(rev_str):
<TAB>print(""The string is a palindrome."")
else:
<TAB>print(""The string is not a palindrome."")
"
59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.	"def add_digits(num):
<TAB>return (num - 1) % 9 + 1 if num > 0 else 0
"
Define a class named American and its subclass NewYorker.	"class American(object):
<TAB>pass


class NewYorker(American):
<TAB>pass


anAmerican = American()
aNewYorker = NewYorker()
print(anAmerican)
print(aNewYorker)
"
Write a python program to print the length of a given string.	"sample_str = ""Python is good for datascience""
print(len(sample_str))
"
write a program to print the product of integers in a mixed list of string and numbers	"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2]
res = 1
for ele in test_list:
<TAB>try:
        res *= int(ele)
<TAB>except:
        pass
print(""Product of integers in list : "" + str(res))
"
write a python program which takes list as an input and calculate sum of given list of numbers	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
<TAB>sum = sum + i
print("" The mean of given list is :"", sum)
"
69 Write a Python function to add two binary numbers.	"def add_binary_nums(x, y):
<TAB>max_len = max(len(x), len(y))

<TAB>x = x.zfill(max_len)
<TAB>y = y.zfill(max_len)

<TAB>result = ''
<TAB>carry = 0

<TAB>for i in range(max_len - 1, -1, -1):
        r = carry
        r += 1 if x[i] == '1' else 0
        r += 1 if y[i] == '1' else 0
        result = ('1' if r % 2 == 1 else '0') + result
        carry = 0 if r < 2 else 1

<TAB>if carry != 0:
        result = '1' + result

<TAB>return result.zfill(max_len)
"
True and False in the datetime module	"from platform import python_version
import datetime


print(""Current python version: "", python_version())
"
Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.	"def printDict():
<TAB>d = dict()
<TAB>d[1] = 1
<TAB>d[2] = 2**2
<TAB>d[3] = 3**2
<TAB>print(d)
"
Write a Python function to print whether the given Date is valid or not	"def date_validator(d, m, y):
<TAB>import datetime
<TAB>try:
        s = datetime.date(y, m, d)
        print(""Date is valid."")
<TAB>except ValueError:
        print(""Date is invalid."")
"
write a python function to calculate the area of tetraheadron	"
def area_of_tetrahedron(side):
<TAB>return (1.73205
            * (side * side));
"
50. Python Program to Count the Number of Each Vowel Using a list and a dictionary comprehension	"
ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x: sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)
"
write a python function to that performs as ReLU	"

def ReLU(num):
<TAB>if num > 0:
        return num
<TAB>return 0
"
Write a Python program to validate an Email	"import re
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'


def check(email):
<TAB>if(re.search(regex, email)):
        print(""Valid Email"")
<TAB>else:
        print(""Invalid Email"")


email = ""ishwarraja@gmail.com""
check(email)
"
22 write a program to merge dict using update() method	"def Merge(dict1, dict2):
<TAB>return(dict2.update(dict1))


dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}

print(Merge(dict1, dict2))
print(dict2)
"
18 how to break out of nested loops python	"x_loop_must_break = False


for x in [1, 2, 3]:
<TAB>print(f""x is {x}"")
<TAB>for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
<TAB>if x_loop_must_break:
        break
"
73 write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle


li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
change this value for a different result	"num = 16


if num < 0:
<TAB>print(""Enter a positive number"")
else:
<TAB>print(""The sum is"", recur_sum(num))
"
Write a function to determine whether a given number is even or odd recursively	"

def check(n):
<TAB>if (n < 2):
        return (n % 2 == 0)
<TAB>return (check(n - 2))


n = int(input(""Enter number:""))
if(check(n) == True):
<TAB>print(""Number is even!"")
else:
<TAB>print(""Number is odd!"")
"
illustrate the test for equality (==) vs. identity (is)	"a = 'hello world!'
b = 'hello world!'
print('a is b,', a is b)
print('a == b,', a == b)
"
write a python class named complex with constructor accepting real and imaginary parts	"class Complex:
<TAB>def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart
"
write a Python Program to Check if a Number is Positive, Negative or 0	"

num = 10
if num > 0:
<TAB>print(""Positive number"")
elif num == 0:
<TAB>print(""Zero"")
else:
<TAB>print(""Negative number"")
"
write a python function to return the factors of a number	"def get_factors(num):
<TAB>factors = []
<TAB>for i in range(1, num + 1):
        if num % i == 0:
            factors.append(i)
<TAB>return factors
"
write a python program that removes all blank spaces in a sentence and prints it	"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))
"
Sort the list in descending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")
"
"Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class."	"class Person(object):
<TAB>def getGender(self):
        return ""Unknown""


class Male(Person):
<TAB>def getGender(self):
        return ""Male""


class Female(Person):
<TAB>def getGender(self):
        return ""Female""
"
write a python program to use maxsplit with arbitrary whitespace	"

s = ""foo    bar   foobar foo""


print(s.split(None, 2))
"
Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x % 2 == 0, li))
print(evenNumbers)
"
Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen	"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
<TAB>if(item in countDict):
        countDict[item] += 1
<TAB>else:
        countDict[item] = 1

print(""Printing count of each item  "", countDict)
"
Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense	"def cal_focal_length_of_lense(u: float, v: float) -> float:
<TAB>return (u * v) / (u + v)
"
write a python function to list all unique elements, preserving order	"def unique_everseen(iterable, key=None):
<TAB>from itertools import filterfalse
<TAB>
<TAB>
<TAB>seen = set()
<TAB>seen_add = seen.add
<TAB>if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
<TAB>else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
"
write a program to extract string of N size and having K distict characters	"

str1 = 'GoodisalwaysGoood'

N = 3

K = 2

res = []


for idx in range(0, len(str1) - N + 1):

<TAB>if (len(set(str1[idx: idx + N])) == K):
        res.append(str1[idx: idx + N])

print(""Extracted Strings : "" + str(res))
"
write a program to Binary Left Shift a number	"c = a << 2
print(""Binary Left Shift"", c)
"
10. Python Program to Check if a Number is Positive, Negative or 0	"num = float(input(""Enter a number: ""))
if num > 0:
<TAB>print(""Positive number"")
elif num == 0:
<TAB>print(""Zero"")
else:
<TAB>print(""Negative number"")
"
Addition of two vector	"v1 = [1, 2, 3]
v2 = [1, 2, 3]
s1 = [0, 0, 0]


for i in range(len(v1)):
<TAB>s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")
"
write a python function to check if a string contains a vowel or not	"

def check_vowel(string):
<TAB>vowels = ['a', 'e', 'i', 'o', 'u']
<TAB>for vowel in vowels:
        if vowel in string:
            return True
<TAB>return False
"
write a python program to remove an element from a list	"li = [1, 2, 3, 4]
li.remove(1)
li
"
66 write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.	"import random


print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))
"
write a Python program to find Least Frequent Character in String	"

test_str = ""GeeksforGeeks""
print(""The original string is : "" + test_str)


all_freq = {}
for i in test_str:
<TAB>if i in all_freq:
        all_freq[i] += 1
<TAB>else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)


print(""The minimum of all characters in GeeksforGeeks is : "" + res)
"
Write a Python function that calculate area of a equilateral polygon	"

import math


def area(no_of_sides, circumradius):
<TAB>side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
<TAB>apothem = circumradius * math.cos(math.pi / no_of_sides)
<TAB>return no_of_sides / 2 * side_length * apothem
"
Write a Python Program to Map Two Lists into a Dictionary	"

def map_dict(keys, values):
<TAB>return dict(zip(keys, values))
"
write a python program to replace blank space to 1	"my_string = 'balaji'
k = [print(i) for i in my_string if i not in ""aeiou""]
print('Not a vowel', k)
"
write a Python function to find volume of the Pentagonal Prism	"

def volume(b, h):
<TAB>return (5 * b * h) / 2


a = 5
b = 3
h = 7


print(""volume ="", volume(b, h))
"
write a python program to count how many times each letter occurs in a string	"string = 'The quick brown fox jumps over the lazy dog'
countmap = {}
for letter in string:
<TAB>if letter in countmap:
        countmap[letter] += 1
<TAB>else:
        countmap[letter] = 1
print(f'Count of letters: {countmap}')
"
write a python function to emulate the behavior of built-in map() function	"def pad_none(iterable):

<TAB>from itertools import chain, repeat
<TAB>return chain(iterable, repeat(None))
"
76 Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
write a python program to check if a number is positive, negative or 0	"num = float(input(""Enter a number: ""))
if num > 0:
<TAB>print(""Positive number"")
elif num == 0:
<TAB>print(""Zero"")
else:
<TAB>print(""Negative number"")
"
accept user input	"str = input(""Enter your input: "")
print(""Received input is : "", str)
"
Write a python function to add 2 iterables a and b such that a is even and b is odd	"

n = 10
a = []
b = []
_ = [a.append(i) if i % 2 == 0 else b.append(i) for i in range(n)]


def add(a, b):
<TAB>return [a + b for a, b in (zip(a, b))]


add(a, b)
"
write a python program to count the number of each vowels	"

vowels = 'aeiou'


ip_str = 'Hello, have you tried our tutorial section yet?'


ip_str = ip_str.casefold()


count = {}.fromkeys(vowels, 0)


for char in ip_str:
<TAB>if char in count:
        count[char] += 1


print(count)
"
Write a python  function which returns True elements in a given list is monotonically increasing or decreasing, return False otherwise	"

def isMonotonic(A):
<TAB>return (all(A[i] <= A[i + 1] for i in range(len(A) - 1))
            or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))
"
write a python program to check if a number is prime or not	"

num = 407


if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
<TAB>else:
        print(num, ""is a prime number"")
else:
<TAB>print(num, ""is not a prime number"")
"
Write a Python program to convert a list of tuples into a dictionary.	"l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
<TAB>d.setdefault(a, []).append(b)
print(d)
"
21 Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.	"def print_miss_num(l: list):
<TAB>print(f'Missing number is {55-sum(l)}')
"
71 write a program to add 2 binary numbers	"

num1 = '00001'
num2 = '10001'


sum = bin(int(num1, 2) + int(num2, 2))
print(sum)
"
Write a python program to Convert and print Snake case to Pascal case	"test_str = 'go_east_or_west_india_is_the_best'
res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(res)
"
Write a  python program to print the last element of a list	"list1 = ['p', 'r', 'o', 'b', 'e']


print(list1[-1])
"
13 how to add a blank line in python	"print("""")
"
write a python program which takes input a list and print reverse output	"lst = eval(input(""Enter list""))
print(lst[::-1])
"
Write a function to return the volume of a cone	"def cal_cone_volume(height, radius):
<TAB>pi = 3.14
<TAB>return pi * (radius**2) * height / 3
"
write a python program to replace blank space to 1	"print([i + j for i in ""abc"" for j in ""def""])
"
Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list	"def mergeList(list1, list2):
<TAB>thirdList = []
<TAB>for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
<TAB>for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
<TAB>return thirdList
"
Write a Python function to find the intersection of two arrays	"def array_intersection(A, B):
<TAB>inter = list(set(A) & set(B))
<TAB>return inter
"
Write a function to find time for a given angle.	"def calcAngle(hh, mm):
<TAB>hour_angle = 0.5 * (hh * 60 + mm)
<TAB>minute_angle = 6 * mm
<TAB>angle = abs(hour_angle - minute_angle)
<TAB>angle = min(360 - angle, angle)
<TAB>return angle
"
Generators are consumed	"gen = (i for i in range(5))
print('2 in gen,', 2 in gen)
print('3 in gen,', 3 in gen)
print('1 in gen,', 1 in gen)
"
write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.	"def filter_with_key_value(list_of_dicts, key, value):
<TAB>return list(filter(lambda x: x.get(key) == value, list_of_dicts))
"
95 write a program to Remove leading zeros from an IP address	"

import re


def removeLeadingZeros(ip):
<TAB>modified_ip = re.sub(regex, '.', ip)
<TAB>print(modified_ip)


if __name__ == '__main__':

<TAB>ip = ""216.08.094.196""
<TAB>removeLeadingZeros(ip)
"
write Function to right rotate n by d bits	"def rightRotate(n, d):
<TAB>INT_BITS = 32

<TAB>return (n >> d) | (n << (INT_BITS - d)) & 0xFFFFFFFF


n = 16
d = 2


print(""Right Rotation of"", n, ""by"", d, ""is"", end="" "")
print(rightRotate(n, d))
"
Write a Python function for Binary Search	"def binary_search(l, num_find):
<TAB>
<TAB>start = 0
<TAB>end = len(l) - 1
<TAB>mid = (start + end) // 2
<TAB>found = False
<TAB>position = -1
<TAB>while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
<TAB>return (found, position)
"
15 write a program to Remove Tuples of Length K Using list comprehension	"
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]
print(""The original list : "" + str(test_list))
K = 1
res = [ele for ele in test_list if len(ele) != K]
print(""Filtered list : "" + str(res))
"
write a Python program to convert Python objects into JSON strings.	"

import json
python_dict = {""name"": ""David"", ""age"": 6, ""class"": ""I""}
json_dict = json.dumps(python_dict, sort_keys=True, indent=4)
print(f""json dict : {json_dict}"")
"
write a python program to convert lower case to upper for list of elements	"

x = ['ab', 'cd']
for i in x:
<TAB>print(i.upper())
"
75 return dot product of two vectors	"def dot_product(a: ""Vector1"", b: ""Vector2""):
<TAB>return sum(e[0] * e[1] for e in zip(a, b))
"
Write a function to calculate volume of Triangular Pyramid	"def volumeTriangular(a, b, h):
<TAB>return (0.1666) * a * b * h
"
Write a function to append two lists	"

def append_lists(l1: list, l2: list) -> list:
<TAB>return l1.extend(l2)
"
14.Write a Python Program to check if a number is prime or not	"

num = 407


if num > 1:
<TAB>for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
<TAB>else:
        print(num, ""is a prime number"")

else:
<TAB>print(num, ""is not a prime number"")
"
Write a function to calculate the new selling price based on discount percentage	"def cal_sp_after_discount(sp: float, discount: float) -> float:
<TAB>return sp * (1 - discount / 100)
"
write a python function to print prime numbers between two numbers	"def get_prime_numbers(range1, range2):
<TAB>for num in range(range1, range2):
        for i in range(2, num):
            if num % i == 0:
                j = num / i
                break
        else:
            print(num, 'is a prime number')
"
write a python program to print system time	"import time
print(f""{time.time()}"")
"
Write a Python function to Find the Sum of Cosine Series	"

def cosine(x, n):
<TAB>cosx = 1
<TAB>sign = -1
<TAB>for i in range(2, n, 2):
        pi = 22 / 7
        y = x * (pi / 180)
        cosx = cosx + (sign * (y**i)) / math.factorial(i)
        sign = -sign
<TAB>return cosx
"
write a Python program to count the number of even and odd numbers from a series of numbers and print the result	"

x = (1, 2, 3, 4, 5, 6, 7, 8, 9)
odd = even = 0
for i in x:
<TAB>if i % 2 == 0:
        even = even + 1
<TAB>else:
        odd = odd + 1

print(""Even Numbers are: "", even)
print(""Odd Numbers are: "", odd)
"
This function computes GCD	"def compute_gcd(x, y):

<TAB>while(y):
        x, y = y, x % y
<TAB>return x
"
Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.	"def check_number(num):
<TAB>mod = num % 2
<TAB>if mod > 0:
        return ""This is an odd number.""
<TAB>else:
        return ""This is an even number.""


print(check_number(5))
"
write a python program to print all the keys in the dictionary and store it in a list	"sample_dict = {'1': 1, '2': 2, '3': 3}
key_list = list(sample_dict.keys())
print(f""{key_list}"")
"
write a python function to return random selection from itertools.product(*args, **kwds)	"def random_product(*args, repeat=1):
<TAB>import random
<TAB>pools = [tuple(pool) for pool in args] * repeat
<TAB>return tuple(map(random.choice, pools))
"
Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.	"

def putNumbers(n):
<TAB>i = 0
<TAB>while i < n:
        j = i
        i = i + 1
        if j % 7 == 0:
            yield j


for i in reverse(100):
<TAB>print(i)
"
write a program to find length of list	"l = [1, 2, 3, 4, 5]
print(len(l))
"
write a python function to add numbers in a list	"

def add(list):
<TAB>sum = 0
<TAB>for i in range(0, len(list)):
        sum += list[i]
<TAB>return sum
"
use built-in function filter to filter empty value	"new_str_list = list(filter(None, str_list))


print(""After removing empty strings"")
print(new_str_list)
"
Calculate the sum of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a + b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")
"
62 write a python function to return mode of the data	"

import statistics


def mode(arr):
<TAB>return statistics.mode(arr)
"
"write a python program to create round robin algorithm: ""roundrobin('ABC', 'D', 'EF') --> A D E B F C"""	"def roundrobin(*iterables):
<TAB>from itertools import islice, cycle
<TAB>
<TAB>num_active = len(iterables)
<TAB>nexts = cycle(iter(it).__next__ for it in iterables)
<TAB>while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
"
Write a python program to Count the Occurrences of a Word in a Text File	"

fname = input(""Enter file name: "")
word = 'the'
k = 0

with open(fname, 'r') as f:
<TAB>for line in f:
        words = line.split()
        for i in words:
            if(i == word):
                k = k + 1
print(f""Frequency of Occurrences of the word {a} is:"")
print(k)
"
Write Python Program to Print Table of a Given Number	"

n = int(input(""Enter the number to print the tables for:""))
for i in range(1, 11):
<TAB>print(n, ""x"", i, ""="", n * i)
"
Write a python function to extract even length words in String	"def findevenlenthwords(test_str):
<TAB>res = []
<TAB>for ele in test_str.split():
        if len(ele) % 2 == 0:
            res.append(ele)
<TAB>return res
"
Write a python function to find Area Of Rectangle	"def areaRectangle(a, b):
<TAB>return (a * b)
"
31 write a python program to  check if string starts with any element in list	"

test_string = ""GfG is best""
pref_list = ['best', 'GfG', 'good']
res = list(filter(test_string.startswith, pref_list)) != []
print(""Does string start with any prefix list sublist ? : "" + str(res))
"
100 write a python program to extract Keys with specific Value Type	"

test_dict = {'gfg': 2, 'is': 'hello', 'best': 2, 'for': {'1': 3}, 'geeks': 4}

print(""The original dictionary is : "" + str(test_dict))

targ_type = int

res = []
for key, val in test_dict.items():
<TAB>if isinstance(val, targ_type):
        res.append(key)

print(""The extracted keys : "" + str(res))


if __name__ == '__main__':
<TAB>string = ""SchoolofAI""
<TAB>i = 5
<TAB>print(remove(string, i))
"
Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).	"evenNumbers = filter(lambda x: x % 2 == 0, range(1, 21))
print(evenNumbers)
"
write a python function to return the nth fibonacci number	"def fib(n):
<TAB>if n <= 1:
        return n
<TAB>else:
        return (fib(n - 1) + fib(n - 2))
"
98 write a python function that calculates the midpoint between two numbers	"

def midpoint(a, b):
<TAB>lar = b if b > a else a
<TAB>sm = a if b > a else b

<TAB>return float(lar + sm) / 2
"
write a python function to find the nth catalan number	"

def catalan(n):
<TAB>if n <= 1:
        return 1
<TAB>res = 0
<TAB>for i in range(n):
        res += catalan(i) * catalan(n - i - 1)
<TAB>return res
"
write a program to replace multiple words with a single word	"

str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long']

repl_word = 'good'

res = ' '.join(
<TAB>[repl_word if idx in word_list else idx for idx in str1.split()])


print(""String after multiple replace : "" + str(res))
"
write a python program to check the length of list	"

sample_list = ['a', 'b', 'c']
print(f'length of sample_list is {len(sample_list)}')
"
write a python program which takes list as an input and find frequency of all elements in list	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
<TAB>sum = sum + i
print("" The mean of given list is :"", sum)
"
16 how to add list numbers in python	"numbers = [1, 2, 3, 4, 5, 1, 4, 5]
Sum = sum(numbers)
"
82 write a python program to find Tuples with positive elements in List of tuples and print it	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]
print(""The original list is : "" + str(test_list))

result = [i for i in test_list if all(ele >= 0 for ele in i)]
print(""Positive elements Tuples : "" + str(result))
"
write a python program to input a number n and print an inverted star pattern of the desired size.	"n = int(input(""Enter number of rows: ""))
for i in range(n, 0, -1):
<TAB>print((n - i) * ' ' + i * '*')
"
1 write a python function to add to add two numbers	"

def return_exponential(num1, num2):
<TAB>return num1 ** num2
"
Write a function that generates Factorial of number	"def factorial(n):
<TAB>if n == 0 or n == 1:
        return 1
<TAB>else:
        return n * factorial(n - 1)
"
72 write a python program to Filter and Double keys greater than K and print it	"

test_dict = {'Gfg': 4, 'is': 2, 'best': 3, 'for': 6, 'geeks': 1}
print(""The original dictionary : "" + str(test_dict))
d = {}
K = 2
for keys, values in test_dict.items():
<TAB>if values > K:
        d.update({keys: 2 * values})
<TAB>else:
        d.update({keys: values})
print(d)
"
Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File	"def count_letter(fname, l):
<TAB>k = 0
<TAB>with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter == l):
                        k = k + 1
<TAB>return k
"
Python program to calculate area of a circle	"

def area(a):
<TAB>from math import pi
<TAB>r = float(input(""Input the radius of the circle : ""))
<TAB>return ""The area of the circle with radius "" + str(r) + "" is: "" + str(pi * a ** 2)


print(area(5))
"
write a python code to implement RELU function	"def relu(array):
<TAB>return [max(0, i) for i in array if(isinstance(i, int) or isinstance(i, float))]
"
38. python function to print all time when angle between hour hand and minute hand is theta	"def printTime(theta):

<TAB>for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return

<TAB>print(""Input angle not valid."")
<TAB>return
"
Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1	"def f(n):
<TAB>if n == 0:
        return 0
<TAB>else:
        return f(n - 1) + 100


n = int(raw_input())
print(f(n))
"
write a python program  to Shuffle Deck of Cards	"import itertools
import random
deck = list(itertools.product(range(1, 14), [
<TAB>'Spade', 'Heart', 'Diamond', 'Club']))
random.shuffle(deck)
print(deck)
"
52 Write a python program to calculate the slope of a line given two points	"

def slope_of_a_line(x1, x2, y1, y2):
<TAB>del_x = x2 - x1
<TAB>del_y = y2 - y1
<TAB>return float(del_y) / del_x


print(slope_of_a_line(0, 10, 0, 10))
"
write a python function to return only odd numbers in a list	"def filter_odd(nums):
<TAB>return list(filter(lambda num: num % 2 == 1, nums))
"
write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder	"def divide_first_number_by_second(num1, num2):
<TAB>return (num1 // num2), (num1 % num2)
"
Write a Python function that returns the integer obtained by reversing the digits of the given integer	"def reverse(n):
<TAB>s = str(n)
<TAB>p = s[::-1]
<TAB>return p
"
Write a Python function to check whether a given number is perfect number or not	"def perfect_number_checker(num):
<TAB>i = 2
<TAB>sum = 1
<TAB>while(i <= num // 2):
        if (num % i == 0):
            sum += i
        i += 1
<TAB>if sum == num:
        return f'{num} is a perfect number'

<TAB>else:
        return f'{num} is not a perfect number'
"
Write a Python function to Find the Sum of Sine Series	"

import math


def sin(x, n):
<TAB>sine = 0
<TAB>for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
<TAB>return sine
"
Write a Python program to slice a tuple	"tuplex = (2, 4, 3, 5, 4, 6, 7, 8, 6, 1)
_slice = tuplex[3:5]
"
52 write a python program to normalize a list of numbers and print the result	"a = [2, 4, 10, 6, 8, 4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
<TAB>a[i] = (val - amin) / (amax - amin)
print(a)
"
Python program to add two objects if both objects are of type integer	"

def add_numbers(a, b):
<TAB>if not (isinstance(a, int) and isinstance(b, int)):
        raise TypeError(""Inputs must be integers"")
<TAB>return a + b


print(add_numbers(10, 20))
"
Write a Python function to unzip a list of tuples into individual lists	"def unzip_list_of_tuples(list_tuple):
<TAB>return list(zip(*l))
"
50 function to check whether a given name is function or method	"def inspect_func(fn):
<TAB>from inspect import isfunction, ismethod
<TAB>print(f'{fn} is method {ismethod(func)}')
<TAB>print(f'{fn} is function {isfunction(func)}')
"
Write a function that sorts list of numbers and returns top element	"

def biggest_no(l: list) -> int:
<TAB>sorted(l)
"
Write a python function to get the surface_area of a prism with base area, base perimeter & height as input	"def prism_surface_area(base_area, base_perimeter, height):
<TAB>surface_area = 2 * base_area + (base_perimeter * height)
<TAB>return surface_area
"
All blank lists are not the same	"a_list = []
print(a_list, '\nID (initial):', id(a_list), '\n')
a_list.append(1)
print(a_list, '\nID (append):', id(a_list), '\n')
a_list.extend([2])
print(a_list, '\nID (extend):', id(a_list))
"
write a python function to find the add two numbers and then find the largest among sum and other two inputs	"def find_the_largest(num1, num2):
<TAB>sum_ = num1 + num2
<TAB>if num1 >= sum_ and num1 >= num2:
        return num1
<TAB>elif num2 >= sum_ and num2 >= num1:
        return num2
<TAB>else:
        return sum_
"
Please write a program which accepts a string from console and print the characters that have even indexes.	"s = input()
s = s[::2]
print(s)
"
write a program to print the values of a given extraction key from a list of dictionaries.	"test_list = [{""Gfg"": 3, ""b"": 7},
             {""is"": 5, 'a': 10},
             {""Best"": 9, 'c': 11}]
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]
print(""The extracted value : "" + str(res))
"
write a python function to return the length of user provided string in bytes	"

def byte_size(s):
<TAB>return len(s.encode('utf-8'))
"
write a python program to check string istitle	"

str1 = 'Hello!2@#World'
if str1.istitle():
<TAB>print('Yes string is title')
"
write a python program to typecast an integer to string and print it	"

x = 2
y = str(x)
print(y)
"
Write a program that calculates and prints the value according to the given formula:	"
import math
c = 50
h = 30
value = []
items = [x for x in input().split(',')]
for d in items:
<TAB>value.append(str(int(round(math.sqrt(2 * c * float(d) / h)))))


print(','.join(value))
"
Write a program that will determine the memory usage by python process	"import os
import psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)
"
write a Python function to find time for a given angle.	"

def calcAngle(hh, mm):

<TAB>hour_angle = 0.5 * (hh * 60 + mm)
<TAB>minute_angle = 6 * mm

<TAB>angle = abs(hour_angle - minute_angle)

<TAB>angle = min(360 - angle, angle)

<TAB>return angle


def printTime(theta):

<TAB>for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return

<TAB>print(""Input angle not valid."")
<TAB>return


theta = 90.0
printTime(theta)
"
Write a Python function to interchange first and last elements in a list	"def swapList(newList):
<TAB>size = len(newList)
<TAB>temp = newList[0]
<TAB>newList[0] = newList[size - 1]
<TAB>newList[size - 1] = temp
<TAB>return newList
"
write a python program to check is an variable is printable	"print('1@ a'.isprintable())
"
write a python function to repeat a given string n times	"def repeat_string(string, frequency):
<TAB>return string * frequency
"
write a Python3 program to demonstrate the use of replace() method	"

string = ""geeks for geeks geeks geeks geeks""


print(string.replace(""geeks"", ""Geeks""))


print(string.replace(""geeks"", ""GeeksforGeeks"", 3))
"
Write a Python Program to Read a List of Words and Return the Length of the Longest One	"

a = ['the', 'tsai', 'python']
max1 = len(a[0])
temp = a[0]
for i in a:
<TAB>if(len(i) > max1):
        max1 = len(i)
        temp = i
print(""The word with the longest length is:"")
print(temp)
"
3. python function to return the squares of a list of numbers	"def sq(n):
<TAB>return [i**2 for i in range(n)]
"
write a Python program to merge two dictionaries	"

d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(f'merge two dictionaries:{d}')
"
write a program to count characters surrounding vowels	"

str1 = 'week after week the numbers are increasing'

res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']


for idx in range(1, len(str1) - 1):

<TAB>if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list):
        res += 1

if str1[0] not in vow_list and str1[1] in vow_list:
<TAB>res += 1

if str1[-1] not in vow_list and str1[-2] in vow_list:
<TAB>res += 1


print(""Characters around vowels count : "" + str(res))
"
write a python program to count the number of lower case in a string	"

string = ""This is a very good place to Visit""
count = 0
for i in string:
<TAB>if(i.islower()):
        count = count + 1
print(f""The number of lowercase characters is:{count}"")
"
write a python program to remove punctuations from a string and print it	"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = input(""Enter a string: "")


no_punct = """"
for char in my_str:
<TAB>if char not in punctuations:
        no_punct = no_punct + char


print(no_punct)
"
write a python program to make use of regular expression for matching	"

s = 'foo123bar'
m = re.findall('123', s)
print('find the number position:', m)
"
write python function get the unique number of elements from the user given list	"

mylist = ['nowplaying', 'PBS', 'PBS',
          'nowplaying', 'job', 'debate', 'thenandnow']


def get_unique_elements(list):
<TAB>unique = [x for i, x in enumerate(mylist) if i == mylist.index(x)]
<TAB>return unique


get_unique_elements(mylist)
"
Write a Python program to print largest element in an array	"arr = [10, 324, 45, 90, 9808]
print(f'the largest element in the array is {max(arr)}')
"
Python program to compute the greatest common divisor (GCD) of two positive integers.	"

def gcd(x, y):
<TAB>gcd1 = 1

<TAB>if x % y == 0:
        return y

<TAB>for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd1 = k
            break
<TAB>return gcd1


print(gcd(12, 17))
print(gcd(4, 6))
"
write a program from given string replace each punctuation with #	"

from string import punctuation


str1 = '/*Jon is @developer & musician!!'
print(f""The original string is :{str1}"")
"
Write a function to find the perimeter of a rectangle	"

def rectangle_perimeter(l, b):
<TAB>return 2 * (l + b)
"
49. Python Program to Count the Number of Each Vowel	"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {}.fromkeys(vowels, 0)
for char in ip_str:
<TAB>if char in count:
        count[char] += 1


print(count)
"
33. Python Program to Calculate Simple Interest	"

princ_amount = float(input("" Please Enter the Principal Amount : ""))
rate_of_int = float(input("" Please Enter the Rate Of Interest   : ""))
time_period = float(input("" Please Enter Time period in Years   : ""))


simple_interest = (princ_amount * rate_of_int * time_period) / 100


print(""\nSimple Interest for Principal Amount {0} = {1}"".format(
<TAB>princ_amount, simple_interest))
"
write a python function to add two user provided numbers and return the sum	"def add_two_numbers(num1, num2):
<TAB>sum = num1 + num2
<TAB>return sum
"
write a python program to print the last 3 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])
"
write a python function to swap two numbers in a list and return the list	"def swapPositions(list, pos1, pos2):

<TAB>list[pos1], list[pos2] = list[pos2], list[pos1]
<TAB>return list


List1 = [23, 65, 19, 90]
pos1, pos2 = 1, 3


print(swapPositions(List1, pos1 - 1, pos2 - 1))
"
Write a Python program to check whether an alphabet is a vowel or consonant	"

l = input(""Input a letter of the alphabet: "")
if l in ('a', 'e', 'i', 'o', 'u'):
<TAB>print(""%s is a vowel."" % l)
elif l == 'y':
<TAB>print(""Sometimes letter y stand for vowel, sometimes stand for consonant."")
else:
<TAB>print(""%s is a consonant."" % l)
"
Write a python function to generate Triangular Number Series (1, 3, 6, 10, 15...)	"def triangle_numbers(n):
<TAB>for i in range(n):
        yield int(i * (i + 1) / 2)
"
Write a Python Program to print the LCM of Two Numbers	"

def lcm(a, b):
<TAB>lcm.multiple = lcm.multiple + b
<TAB>if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple
<TAB>else:
        lcm(a, b)
<TAB>return lcm.multiple


lcm.multiple = 0
a = 4
b = 7
if(a > b):
<TAB>LCM = lcm(b, a)
else:
<TAB>LCM = lcm(a, b)


print(LCM)
"
Bubble sort in python	"list1 = [1, 5, 3, 4]


for i in range(len(list1) - 1):
<TAB>for j in range(i + 1, len(list1)):
        if(list1[i] > list1[j]):
            temp = list1[i]
            list1[i] = list1[j]
            list1[j] = temp
print(""Bubble Sorted list: "", list1)
"
write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.	"

d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d.items(), key=lambda x: x[1]))
"
89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.	"from itertools import groupby


def pack_consecutive_duplicates(l_nums):
<TAB>return [list(group) for key, group in groupby(l_nums)]


n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
print(""Original list:"")
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list))
"
write a Python program to find N largest element from given list of integers	"

l = [1000, 298, 3579, 100, 200, -45, 900]
n = 4
l.sort()
print(l[-n:])
"
write a function to replace vowels with a specific character K	"

def replacewith_K(test_str, K):

<TAB>vowels = 'AEIOUaeiou'
<TAB>for ele in vowels:
        test_str = test_str.replace(ele, K)

<TAB>return test_str
"
write Python code to convert string to list character-wise	"def Convert_3(string):
<TAB>list1 = []
<TAB>list1[:0] = string
<TAB>return list1


str1 = ""ABCD""
print(Convert(str1))
"
write a python functionto test the equality of the float numbers	"def float_equality_testing(a, b):

<TAB>rel_tol = 1e-12
<TAB>abs_tol = 1e-05
<TAB>return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
"
44. Python Program to Multiply Two Matrices using Nested Loop	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
<TAB>for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
<TAB>print(r)
"
write a program to print the sine value of a number	"import math
num = 3
print(math.sin(num))
"
Write a function to get list of profanity words from Google profanity URL	"def profanitytextfile():
<TAB>url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
<TAB>html = urlopen(url).read()
<TAB>soup = BeautifulSoup(html, features=""html.parser"")

<TAB>textlist = []
<TAB>table = soup.find('table')
<TAB>trs = table.find_all('tr')
<TAB>for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
<TAB>return textlist
"
write a python Program to Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
write a python program to merge two sorted lists	"a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]


a.extend(b)
c = sorted(a)
print(f""{c}"")
"
write a function to find all urls in a given string	"

import re


def find_urls(string):

<TAB>regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
<TAB>url = re.findall(regex, string)
<TAB>return [x[0] for x in url]
"
Write a program to copy a given array	"M = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
rows = len(M)
cols = len(M[0])


MC = []
while len(MC) < rows:
<TAB>MC.append([])
<TAB>while len(MC[-1]) < cols:
        MC[-1].append(0.0)


for i in range(rows):
<TAB>for j in range(cols):
        MC[i][j] = M[i][j]


print(""Copied Array"")
for i in range(rows):
<TAB>row = '|'
<TAB>for b in range(cols):
        row = row + ' ' + str(MC[i][b])
<TAB>print(row + ' ' + '|')
"
Write a function that returns cosine value of the input	"def cos(x: float) -> float:
<TAB>import math
<TAB>return math.cos(x)
"
write a python program to get numbers divisible by fifteen from a list	"

num_list = [45, 55, 60, 37, 100, 105, 220]
result = list(filter(lambda x: (x % 15 == 0), num_list))
print(f""Numbers divisible by 15 are {result}"")
"
write a python function to return nth item or a default value	"def nth(iterable, n, default=None):
<TAB>from itertools import islice
<TAB>return next(islice(iterable, n, None), default)
"
Write a python program using a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.	"values = raw_input()
numbers = [x for x in values.split("","") if int(x) % 2 != 0]
print("","".join(numbers))
"
91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.	"nums = []


for i in range(3):

<TAB>nums.append([])

<TAB>for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
"
39. Python Program to Find Factorial of Number Using Recursion	"def recur_factorial(n):
<TAB>if n == 1:
        return n
<TAB>else:
        return n * recur_factorial(n - 1)


num = 7


if num < 0:
<TAB>print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
<TAB>print(""The factorial of 0 is 1"")
else:
<TAB>print(""The factorial of"", num, ""is"", recur_factorial(num))
"
write a python program to print len of each characters	"words = ['cat', 'window', 'defenestrate']
for w in words:
<TAB>print(w, len(w))
"
write a python function to concatenate two integers like string concatenation and return concatenated number as integer	"def concat_two_numbers(num1, num2):
<TAB>combined_num = str(num1) + str(num2)
<TAB>return int(combined_num)
"
write a program that prints the sum and average of the digits that appear in the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
<TAB>totalMarks += mark


percentage = totalMarks / len(markList)
print(f'Total Marks is:{totalMarks},Percentage is:{percentage}')
"
Write python function role a dice	"

import random
min = 1
max = 6


roll_again = ""yes""


while roll_again == ""yes"" or roll_again == ""y"":
<TAB>print(""Rolling the dices..."")
<TAB>print(""The values are...."")
<TAB>print(random.randint(min, max))
<TAB>print(random.randint(min, max))

<TAB>roll_again = input(""Roll the dices again?"")
"
